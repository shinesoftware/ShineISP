<?php

/**
 * Languages
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Languages extends BaseLanguages {
	
	/**
	 * grid
	 * create the configuration of the grid
	 */
	public static function grid($rowNum = 10) {
	
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
	
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'l.language_id', 'alias' => 'language_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Id' ), 'field' => 'l.language_id', 'alias' => 'language_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Name' ), 'field' => 'l.language', 'alias' => 'language', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Locale' ), 'field' => 'l.locale', 'alias' => 'locale', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Active' ), 'field' => 'l.active', 'alias' => 'active', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
	
		$config ['datagrid'] ['fields'] = "language_id, language, locale, base, active";
		$config ['datagrid'] ['rownum'] = $rowNum;
	
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )->from ( 'Languages l' );
	
		$config ['datagrid'] ['basepath'] = "/admin/languages/";
		$config ['datagrid'] ['index'] = "language_id";
	
		return $config;
	}

	/**
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Languages l' )
		->where ( "language_id = ?", $id )->limit ( 1 );
	
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$records = $dq->execute ( array (), $retarray );
		return $records;
	}

	/**
	 * Get all data 
	 * @param $id
	 * @return Doctrine Record / Array
	 */
	public static function getAllInfo($id, $fields = "*", $retarray = false) {
	
		try {
			$dq = Doctrine_Query::create ()->select ( $fields )
			->from ( 'Languages l' )
			->where ( "language_id = ?", $id )
			->limit ( 1 );
	
			$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
			$item = $dq->execute ( array (), $retarray );
	
			return $item;
		} catch (Exception $e) {
			die ( $e->getMessage () );
		}
	}
	
	/**
	 * get the language configuration by the identifier
	 * 
	 * @param unknown_type $locale
	 */
	public static function get_language_id($locale) {
		
		$ns = new Zend_Session_Namespace ();
		
		if(empty($locale)){
			return 1; // get the first default language 
		}
		
		if(!empty($ns->lang) && ($locale == $ns->lang) && !empty($ns->langid)){
			return $ns->langid;
		}
		
		$record = Doctrine_Query::create ()->select ( 'language_id' )->from ( 'Languages l' )->where ( "locale = ?", $locale )->limit ( 1 )->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		if (isset ( $record [0] )) {
			return $record [0]['language_id'];
		} else {
			return 1;
		}
	}
	
	/**
	 * get the language id by the code
	 * 
	 * @param string $locale [en,it,fr]
	 */
	public static function get_language_id_by_code($code) {
		
		if(empty($code)){
			return 1; // get the first default language
		}

		$record = Doctrine_Query::create ()->select ( 'language_id' )->from ( 'Languages l' )->where ( "code = ?", $code )->limit ( 1 )->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		if (!empty ( $record [0] )) {
			return $record [0]['language_id'];
		} else {
			return 1;
		}
	}
	
	/**
	 * get the language name by the code
	 * 
	 * @param string $locale [en,it,fr]
	 */
	public static function get_language_name_by_code($code) {
		
		if(empty($code)){
			return 1; // get the first default language
		}

		$record = Doctrine_Query::create ()->select ( 'language' )->from ( 'Languages l' )->where ( "code = ?", $code )->limit ( 1 )->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		if (!empty ( $record [0] )) {
			return $record [0]['language'];
		} else {
			return null;
		}
	}
	
	/**
	 * get the language code by the language_id
	 * 
	 * @param string $language_id
	 */
	public static function get_code($language_id) {
		
		if(empty($language_id)){
			return "en"; // get the first default code
		}

		$record = Doctrine_Query::create ()->select ( 'code' )->from ( 'Languages l' )->where ( "language_id = ?", $language_id )->limit ( 1 )->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		if (!empty ( $record [0] )) {
			return $record [0]['code'];
		} else {
			return 1;
		}
	}
	
	/**
	 * get the locale by the language_id
	 * 
	 * @param integer $language_id
	 */
	public static function get_locale($language_id) {

		$record = Doctrine_Query::create ()->select ( 'locale' )
										   ->from ( 'Languages l' )
										   ->where ( "language_id = ?", $language_id )
										   ->limit ( 1 )->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		if (!empty ( $record [0] )) {
			return $record [0]['locale'];
		} else {
			return "en";
		}
	}
	
	/**
	 * getDefault
	 * get the default language
	 */
	public static function getDefault() {
		$record = Doctrine::getTable ( 'Languages' )->findBy ( 'base', 1, Doctrine_Core::HYDRATE_ARRAY );
		if (!empty ( $record [0] )) {
			return $record [0];
		} else {
			return null;
		}
	}
	
	/**
	 * get the first language
	 */
	public static function getFirst() {
		$record = Doctrine::getTable ( 'Languages' )->findAll ( Doctrine_Core::HYDRATE_ARRAY );
		if (!empty ( $record [0] )) {
			return $record [0];
		} else {
			return null;
		}
	}
	
	/*
	 * get the language label 
	 */
	public static function getLanguageLabel($id) {
		$record = Doctrine::getTable ( 'Languages' )->find ( $id, Doctrine_Core::HYDRATE_ARRAY );
		if(!empty($record)){
			return $record['language'];
		}else{
			return null;
		}
	}
	
	/*
	 * getList
	 * get the language list 
	 */
	public static function getList() {
		$items = array ();
		$records = Doctrine::getTable ( 'Languages' )->findAll ( Doctrine_Core::HYDRATE_ARRAY );
		
		foreach ( $records as $c ) {
			$items [$c ['language_id']] = $c ['language'];
		}
		return $items;
	}
	
	/*
	 * getActiveLanguageList
	 * get the active language list 
	 */
	public static function getActiveLanguageList() {
		return Doctrine::getTable ( 'Languages' )->findBy('active', 1, Doctrine_Core::HYDRATE_ARRAY );		
	}
	
	/**
	 * getActiveLanguageList
	 * get the active language list
	 *  
	 * @param string path
	 */
	public static function getLanguageFiles($path=null) {
		$locales = array();

		if(empty($path)){
			$path = PUBLIC_PATH . "/languages";
		}
		
		// Get all the language files
		$files = Shineisp_Commons_Utilities::getDirectoryList($path);
		foreach ($files as $file){
			
			// Get the name and the extension
			$name = pathinfo($file, PATHINFO_FILENAME);
			$ext = pathinfo($file, PATHINFO_EXTENSION);
			
			// If the extension is .mo then
			if($ext == "mo"){
				
				// Get the locale of the translation file, for ex: en
				$locale = new Zend_Locale($name);

				// Get all the translation of the territory for the en locale  
				$territories = $locale->getTranslationList('language', $name, 2);
				
				// Check if the territories array is full of data
				if(!empty($territories) && is_array($territories)){
					
					// Get the name of the territory using only the two letter, for ex: US in order to get United States 
					$locales[$name] = ucfirst($territories[$name]);
				}
				
			}
		}
		
		return $locales;		
	}

	/**
	 * Get the default languages
	 * @param $locale
	 */
	public static function getLocales() {
		$locales = array();
		$list = Zend_Locale::getTranslationList('key');
		foreach ($list as $locale => $name){
			if(strlen($locale) > 4){
				$locales[$locale] = $name;
			}
		}
		Zend_Debug::dump($locales);
		return $list;
	}

	/**
	 * Set the language object variable
	 * @param $locale
	 */
	public static function setDefaultLanguage($path, $locale) {
		$zl = new Zend_Locale ();
		
		if (!empty($locale)) {
			$zl->setLocale ( $locale );
			
			Shineisp_Registry::set ( 'Zend_Locale', $zl );
	
		}
	}
}