<?php

/**
 * Notes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Notes extends BaseNotes
{

	/**
	 * grid
	 * create the configuration of the grid
	 */	
	public static function grid($rowNum = 10) {
		
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'n.note_id', 'alias' => 'note_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'n.note_id', 'alias' => 'note_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Name' ), 'field' => 'n.name', 'alias' => 'name', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Created' ), 'field' => 'n.created', 'alias' => 'created', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		
		$config ['datagrid'] ['fields'] = "note_id, name, created, changed";
        
        $dq     = Doctrine_Query::create ()
                    ->select ( $config ['datagrid'] ['fields'] )
                    ->from ( 'Notes n' );
                    
        $auth = Zend_Auth::getInstance ();
        if( $auth->hasIdentity () ) {
            $logged_user= $auth->getIdentity ();
            $dq->leftJoin ( 'n.AdminUser au' )
                ->where( "au.isp_id = ?", $logged_user['isp_id']);
        }          
        
		$config ['datagrid'] ['dqrecordset'] = $dq;
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		
		$config ['datagrid'] ['basepath'] = "/admin/notes/";
		$config ['datagrid'] ['index'] = "note_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/notes/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/notes/delete/id/%d";
		return $config;
	}		
    
    /**
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function getById($id) {
        $dq = Doctrine_Query::create ()->from ( 'Notes n' )
        							   ->where ( "n.note_id = ?", $id )
        							   ->limit ( 1 );
        $auth = Zend_Auth::getInstance ();
        if( $auth->hasIdentity () ) {
            $logged_user= $auth->getIdentity ();
            $dq->leftJoin ( 'n.AdminUser au' )
                ->whereIn( "au.isp_id", $logged_user['isp_id']);
        }           
        
        $record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        if(!empty($record)){
        	if(!empty($record[0]['expire'])){
        		$record[0]['expire'] = Shineisp_Commons_Utilities::formatDateOut($record [0]['expire']);
        	} 
        }
        
        return $record;
    }	
    
    /**
     * Get the tax percentage by note_id
     * 
     * @param $id
     * @return Doctrine Record
     */
    public static function get_percentage($note_id) {
        $record = Doctrine_Query::create ()->select ( 'percentage' )
        								->from ( 'Notes n' )
        								->where ( "n.note_id = ?", $note_id )
        								->limit ( 1 )
        								->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        
        return !empty($record['percentage']) ? $record['percentage'] : null;
    }	
    
    /**
     * Get a list 
     * 
     * @param $id
     * @return Doctrine Record
     */
    public static function summary($userId) {
        $dq = Doctrine_Query::create ()->select("note_id, name, DATE_FORMAT(expire, '%d/%m/%Y') as creation_date")
        								->from ( 'Notes n' )
        								->where ( "n.user_id = ?", $userId );
        
        $auth = Zend_Auth::getInstance ();
        if( $auth->hasIdentity () ) {
            $logged_user= $auth->getIdentity ();
            $dq->leftJoin ( 'n.AdminUser au' )
                ->whereIn( "au.isp_id", $logged_user['isp_id']);
        }         
        
        $records    = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        return $records;
    }	
    	   
    /**
     * Save all the data in the database
     * @param array $data
     * @param integer $id
     */
    public static function saveAll(array $data, $id, $userId) {
    
    	if(!empty($data) && is_array($data)){
    		
    		if(is_numeric($id)){
    			$note = Doctrine::getTable ( 'Notes' )->find($id);
                if( $note->user_id != $userId ) {
                    return false;
                }
                
    		}else{
    			$note = new Notes();
    			$note->created = date('Y-m-d H:i:s');
    		}
    			
    		$note->name = $data ['name'];
    		$note->note = $data ['note'];
    		$note->user_id = $userId;
    		$note->changed = date('Y-m-d H:i:s');
    		$note->expire = !empty($data ['expire']) ? Shineisp_Commons_Utilities::formatDateIn($data ['expire']) : null;
    		
    		$note->save ();
    		return $note['note_id'];
    	}
    
    	return false;
    }
    
    /**
     * delete
     * Delete a record by ID
     * @param $id
     */
    public static function deleteItem($id) {
        $item   = self::find( $id );
        if( empty( $item->note_id ) ) {
            return false;
        }
        
        Doctrine::getTable ( 'Notes' )->findOneBy ( 'note_id', $id )->delete();
    }
    	   
    /**
     * Get a record by ID
     * @param $id
     */
    public static function find($id) {
        $dq = Doctrine_Query::create ()->from ( 'Notes n' )
                                       ->where ( "n.note_id = ?", $id )
                                       ->limit ( 1 );
        $auth = Zend_Auth::getInstance ();
        if( $auth->hasIdentity () ) {
            $logged_user= $auth->getIdentity ();
            $dq->leftJoin ( 'n.AdminUser au' )
                ->whereIn( "au.isp_id", $logged_user['isp_id']);
        }  
        
        $record = $dq->execute ( );
        return $record->{$id};
    }
    
	/**
     * getList
     * Get a list ready for the html select object
     * @return array
     */
    public static function getList($empty=false) {
        $items = array ();
        $arrTypes = Doctrine::getTable ( 'Notes' )->findAll ();
        if($empty){
            $items[] = "";
        }
        foreach ( $arrTypes->getData () as $c ) {
            $items [$c ['note_id']] = $c ['name'];
        }
        
        return $items;
    }

}