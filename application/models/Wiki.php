<?php

/**
 * Wiki
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Wiki extends BaseWiki {

	/**
	 * grid
	 * create the configuration of the grid
	 */	
	public static function grid($rowNum = 10) {
		
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'w.wiki_id', 'alias' => 'wiki_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'w.wiki_id', 'alias' => 'wiki_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Subject' ), 'field' => 'w.subject', 'alias' => 'subject', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Creation Date' ), 'field' => 'w.creationdate', 'alias' => 'creation_date', 'sortable' => true, 'searchable' => true, 'type' => 'date' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Category' ), 'field' => 'wc.category_id', 'alias' => 'category', 'sortable' => true, 'type' => 'index', 'searchable' => true, 'filterdata' => WikiCategories::getList()  );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Visits' ), 'field' => 'w.views', 'alias' => 'visits', 'sortable' => true, 'type' => 'index');
		
		$config ['datagrid'] ['fields'] = "w.wiki_id, w.subject as subject, DATE_FORMAT(w.creationdate, '%d/%m/%Y') as creation_date, wc.category as category, w.views as visits";
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )->from ( 'Wiki w' )->leftJoin ( 'w.WikiCategories wc' );
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		
		$config ['datagrid'] ['basepath'] = "/admin/wiki/";
		$config ['datagrid'] ['index'] = "wiki_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/wiki/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/wiki/delete/id/%d";
		$config ['datagrid'] ['massactions'] = array ('massdelete'=>'Mass Delete', 'bulkexport'=>'Export' );
		return $config;
	}

	
	/**
	 * find
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id) {
		return Doctrine::getTable ( 'Wiki' )->findOneBy ( 'wiki_id', $id );
	}
	
	
	/**
	 * update the views
	 * @param $id
	 * @return void
	 */
	public static function update_views($id){
		Doctrine_Query::create()->update("Wiki")->set('views', 'views + 1')->where("wiki_id = ?", $id)->execute(); 
	}
	

	/**
	 * massdelete
	 * delete the customer selected 
	 * @param array
	 * @return Boolean
	 */
	public static function massdelete($items) {
		$retval = Doctrine_Query::create ()->delete ()->from ( 'Wiki w' )->whereIn ( 'w.wiki_id', $items )->execute ();
		return $retval;
	}
		
	/**
	 * findAll
	 * Get records from the DB
	 * @param $currentPage
	 * @param $rowNum
	 * @param $sort
	 * @param $where
	 * @return array
	 */
	public static function findAll($fields = "*", $currentPage = 1, $rowNum = 2, array $sort = array(), array $where = array()) {
		
		$module = Zend_Controller_Front::getInstance ()->getRequest ()->getModuleName ();
		$controller = Zend_Controller_Front::getInstance ()->getRequest ()->getControllerName ();
		
		// Defining the url sort
		$uri = isset ( $sort [1] ) ? "/sort/$sort[1]" : "";
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Wiki w' )->leftJoin ( 'w.WikiCategories wc' );
		
		$pagerLayout = new Doctrine_Pager_Layout ( new Doctrine_Pager ( $dq, $currentPage, $rowNum ), new Doctrine_Pager_Range_Sliding ( array ('chunk' => 10 ) ), "/$module/$controller/list/page/{%page_number}" . $uri );
		
		// Get the pager object
		$pager = $pagerLayout->getPager ();
		
		// Set the Order criteria
		if (isset ( $sort [0] )) {
			$pager->getQuery ()->orderBy ( $sort [0] );
		}
		
		if (isset ( $where ) && is_array ( $where )) {
			foreach ( $where as $filters ) {
				if (isset ( $filters [0] ) && is_array($filters [0])) {
					foreach ( $filters as $filter ) {
						$method = $filter ['method'];
						$value = $filter ['value'];
						$criteria = $filter ['criteria'];
						$pager->getQuery ()->$method ( $criteria, $value );
					}
				} else {
					$method = $filters ['method'];
					$value = $filters ['value'];
					$criteria = $filters ['criteria'];
					$pager->getQuery ()->$method ( $criteria, $value );
				}
			}
		}
		
		$pagerLayout->setTemplate ( '<a href="{%url}">{%page}</a> ' );
		$pagerLayout->setSelectedTemplate ( '<a class="active" href="{%url}">{%page}</a> ' );
		
		$records = $pagerLayout->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		$pagination = $pagerLayout->display ( null, true );
		return array ('records' => $records, 'pagination' => $pagination, 'pager' => $pager, 'recordcount' => $dq->count () );
	}
	
	/**
	 * 
	 * Get the wiki page by the ID 
	 * @param integer $id
	 * @param string $fields
	 */
	public static function getPost($id, $fields = "*") {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Wiki w' )->leftJoin ( 'w.WikiCategories wc' )->where ( 'wiki_id = ?', $id );
		$records = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $records;
	}
	
	/**
	 * Get the wiki page by the URI 
	 * @param string $uri
	 * @param string $fields
	 */
	public static function getPostbyUri($uri, $fields = "*") {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Wiki w' )->leftJoin ( 'w.WikiCategories wc' )->where ( 'uri = ?', $uri );
		$records = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $records;
	}
	
	/**
	 * getAllInfo
	 * Get all data starting from the wikiID 
	 * @param $id
	 * @return Doctrine Record / Array
	 */
	public static function getAllInfo($id, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Wiki w' )->leftJoin ( 'w.WikiCategories wc' )->addWhere ( "wiki_id = $id" )->limit ( 1 );
		
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$items = $dq->execute ( array (), $retarray );
		
		return $items;
	}
	
	/**
	 * getList
	 * Get a list ready for the html select object
	 * @return array
	 */
	public static function getList($empty = false) {
		$items = array ();
		$Session = new Zend_Session_Namespace ( 'Default' );
		
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$dq = Doctrine_Query::create ()->select ( "w.wiki_id, w.subject as subject" )
									   ->from ( 'Wiki w' )
									   ->where('w.language_id = ?', $Session->langid);
		$retval = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		if ($empty) {
			$items [] = $translator->translate ( 'Select ...' );
		}
		foreach ( $retval as $c ) {
			$items [$c ['wiki_id']] = $c ['subject'];
		}
		
		return $items;
	}	
	
	/**
	 * Get all the items
	 * @return array
	 */
	public static function get_items($limit=0, $category = null) {
		$dq = Doctrine_Query::create ()
							->from ( 'Wiki w' )
							->leftJoin ( 'w.WikiCategories wc' );
		if($limit > 0){
			$dq->limit($limit);	
		}
		
		if(is_numeric($category)){
			$dq->where('w.category_id = ?', $category);
		}
		
		$dq->orderBy('RAND()');
		
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}	
	

	######################################### BULK ACTIONS ############################################
	
	
	/**
	 * massdelete
	 * delete the customer selected 
	 * @param array
	 * @return Boolean
	 */
	public static function bulk_delete($items) {
		if(!empty($items)){
			return self::massdelete($items);
		}
		return false;
	}
		
	
}