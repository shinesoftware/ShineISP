<?php

/**
 * Contacts
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Contacts extends BaseContacts {
	
	/**
	 * Add a new contact
	 * @param $id
	 * @param array $data
	 * @return integer contact_id
	 */
	public static function AddNew(array $data, $id="") {
		
		if(is_numeric($id)){
			$contact = self::find($id);
		}else{
			$contact = new Contacts();	
		}
		
		$contact['contact'] = $data['contact'];
		$contact['type_id'] = $data['type_id'];
		$contact['customer_id'] = $data['customer_id'];
		
		$contact->save();
		return $contact['contact_id'];
	}
	
	
	/**
	 * get customer information attached to the contact
	 *
	 * @param integer $contactid
	 * @return ArrayObject
	 */
	public static function getCustomer($contactid) {
		if(is_numeric($contactid)){
			$dq = Doctrine_Query::create ()->from ( 'Contacts c' )->leftJoin('c.Customers co')->where('c.contact_id = ?', $contactid)->limit(1);
			$record = $dq->execute (array (), Doctrine::HYDRATE_ARRAY);
			return !empty($record[0]['Customers']) ? $record[0]['Customers'] : array();
		}else{
			return array();
		}
	}
	
	/**
	 * findOneByUserContact
	 * Get a record by the contact value
	 * @param $contact
	 * @return Doctrine Record
	 */
	public static function findOneByUserContact($contact) {
		return Doctrine_Query::create ()->from ( 'Contacts c' )->where("c.contact = '$contact'")->execute();
	}
	
   /**
     * find
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function find($id, $fields = "*", $retarray = false) {
        $dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Contacts c' )->addWhere ( "contact_id = $id" )->limit ( 1 );
        $retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
        $record = $dq->fetchOne ( array (), $retarray );
        return $record;
    }
	
   /**
     * Get a record by type name
     * @param $type [Telephone, Skype, Email, Mobile, Fax]
     * @param $customer_id
     * @return ArrayObject
     */
    public static function getContact($customer_id, $type = "Telephone") {
        $record = Doctrine_Query::create ()->select ( 'contact' )
        							   ->from ( 'Contacts c' )
        							   ->leftJoin ( 'c.ContactsTypes t' )
        							   ->where ( "customer_id = ? and t.name = ?", array($customer_id, $type) )
        							   ->limit ( 1 )
        							   ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        							   
        return !empty($record[0]['contact']) ? $record[0]['contact'] : array();
    }
	
   /**
     * Get all the contact emails
     * @param $customer_id
     * @return ArrayObject
     */
    public static function getEmails($customer_id) {
    	$emails = array();
    	
    	if(is_numeric($customer_id)){
	    	$mainmail = Customers::getEmail($customer_id);
	    	if(!empty($mainmail)){
	    		$emails[] = $mainmail;
	    	}
	    	
	        $records = Doctrine_Query::create ()->select ( 'contact_id, contact as email' )
	        							   ->from ( 'Contacts c' )
	        							   ->leftJoin ( 'c.ContactsTypes t' )
	        							   ->where ( "customer_id = ? and t.name = ?", array($customer_id, "email") )
	        							   ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	        
	        foreach ($records as $record){
	        	$emails[] = $record['email'];	
	        }					   
	        
	        return !empty($emails) ? $emails : NULL;
    	}
    }
	
	/**
	 * findOneByUserId
	 * Get a record by customer ID
	 * @param $customerid
	 * @return Doctrine Record
	 */
	public static function findbyName($customerid, $type_id) {
		$result = Doctrine::getTable ( 'Contacts' )->findBySql ( "type_id = '?' and customer_id = '?'", array ($type_id, $customerid ) );
		
		return $result;
	}
	
	/**
	 * Get a list of contacts by customerId and TypeId
	 * @param $customerid
	 * @param $type_id
	 * @return Array
	 */
	public static function getContactByCustomerAndType($customerid, $type_id) {
		$dq = Doctrine_Query::create ()
								->select ( 'c.contact_id, c.contact, ct.name as type' )
								->from ( 'Contacts c' )
								->leftJoin ( 'c.ContactsTypes ct ON ct.type_id = c.type_id' )
								->where('c.customer_id = ?', $customerid)
								->addWhere('c.type_id = ?', $type_id);
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );;
	}
	
	/**
	 * Get all emails
	 * @param $customerid
	 * @return Array
	 */
	public static function getAllEmails($customerid) {
		$dq = Doctrine_Query::create ()
								->select ( 'contact_id, c.contact as email' )
								->from ( 'Contacts c' )
								->leftJoin ( 'c.ContactsTypes ct ON ct.type_id = c.type_id' )
								->where('c.customer_id = ?', $customerid)
								->addWhere('c.type_id = ?', ContactsTypes::getIdbyName('email'));
		
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );;
	}
	
	/**
	 * Get all the contacts of a customer
	 * @param integer $customerid
	 */
	public static function getContacts($customerid){
		$dq = Doctrine_Query::create ()
                          ->select ( 'c.contact_id, c.contact, ct.name as type' )
                          ->from ( 'Contacts c' )
                          ->leftJoin ( 'c.ContactsTypes ct ON ct.type_id = c.type_id' )
                          ->where('c.customer_id = ' . $customerid);
                          
	   return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * Delete the contact selected by id
	 * @param $id
	 * @return Boolean 
	 */
	public static function delete_contact($id) {
		return Doctrine::getTable ( 'Contacts' )->find ($id)->delete();
	}
	

	/**
     * DeleteAllContactsByCustomerId
     * Delete all the contacts record of the customer ID selected
     * @param $customerid
     * @return Doctrine Record
     */
    public static function DeleteAllContactsByCustomerId($customerid) {
        return Doctrine::getTable ( 'contacts' )->findBy ( 'customer_id', $customerid )->delete ();
    }
}