<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Servers', 'doctrine');

/**
 * BaseServers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $server_id
 * @property string $name
 * @property string $ip
 * @property string $netmask
 * @property string $host
 * @property string $domain
 * @property string $description
 * @property string $datacenter
 * @property float $cost
 * @property boolean $is_default
 * @property integer $services
 * @property integer $max_services
 * @property timestamp $buy_date
 * @property integer $isp_id
 * @property integer $type_id
 * @property integer $status_id
 * @property integer $panel_id
 * @property Isp $Isp
 * @property Servers_Types $Servers_Types
 * @property Statuses $Statuses
 * @property CustomAttributesValues $CustomAttributesValues
 * @property Panels $Panels
 * @property Doctrine_Collection $OrdersItemsServers
 * @property Doctrine_Collection $ServersGroupsIndexes
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseServers extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('servers');
        $this->hasColumn('server_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '200',
             ));
        $this->hasColumn('ip', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '200',
             ));
        $this->hasColumn('netmask', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '200',
             ));
        $this->hasColumn('host', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '200',
             ));
        $this->hasColumn('domain', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '200',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '',
             ));
        $this->hasColumn('datacenter', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '200',
             ));
        $this->hasColumn('cost', 'float', 10, array(
             'type' => 'float',
             'default' => '0.00',
             'length' => '10',
             ));
        $this->hasColumn('is_default', 'boolean', 25, array(
             'type' => 'boolean',
             'default' => 0,
             'length' => '25',
             ));
        $this->hasColumn('services', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('max_services', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('buy_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('isp_id', 'integer', 4, array(
             'type' => 'integer',
             'default' => 1,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('type_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('status_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('panel_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Isp', array(
             'local' => 'isp_id',
             'foreign' => 'isp_id'));

        $this->hasOne('Servers_Types', array(
             'local' => 'type_id',
             'foreign' => 'type_id'));

        $this->hasOne('Statuses', array(
             'local' => 'status_id',
             'foreign' => 'status_id'));

        $this->hasOne('CustomAttributesValues', array(
             'local' => 'server_id',
             'foreign' => 'external_id'));

        $this->hasOne('Panels', array(
             'local' => 'panel_id',
             'foreign' => 'panel_id'));

        $this->hasMany('OrdersItemsServers', array(
             'local' => 'server_id',
             'foreign' => 'server_id'));

        $this->hasMany('ServersGroupsIndexes', array(
             'local' => 'server_id',
             'foreign' => 'server_id'));
    }
}