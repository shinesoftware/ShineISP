<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Tickets', 'doctrine');

/**
 * BaseTickets
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $ticket_id
 * @property int $customer_id
 * @property int $category_id
 * @property int $status_id
 * @property int $sibling_id
 * @property int $order_id
 * @property timestamp $date_open
 * @property timestamp $date_updated
 * @property timestamp $date_close
 * @property string $subject
 * @property string $description
 * @property int $domain_id
 * @property int $user_id
 * @property integer $vote
 * @property TicketsCategories $TicketsCategories
 * @property Customers $Customers
 * @property Domains $Domains
 * @property Statuses $Statuses
 * @property Orders $Orders
 * @property Tickets $Tickets
 * @property AdminUser $AdminUser
 * @property Doctrine_Collection $TicketsNotes
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTickets extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('tickets');
        $this->hasColumn('ticket_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('customer_id', 'int', 4, array(
             'type' => 'int',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('category_id', 'int', 4, array(
             'type' => 'int',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('status_id', 'int', 4, array(
             'type' => 'int',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('sibling_id', 'int', 4, array(
             'type' => 'int',
             'notnull' => false,
             'length' => '4',
             ));
        $this->hasColumn('order_id', 'int', 4, array(
             'type' => 'int',
             'length' => '4',
             ));
        $this->hasColumn('date_open', 'timestamp', 25, array(
             'type' => 'timestamp',
             'notnull' => 'true;',
             'length' => '25',
             ));
        $this->hasColumn('date_updated', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('date_close', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('subject', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '',
             ));
        $this->hasColumn('domain_id', 'int', 4, array(
             'type' => 'int',
             'length' => '4',
             ));
        $this->hasColumn('user_id', 'int', 4, array(
             'type' => 'int',
             'length' => '4',
             ));
        $this->hasColumn('vote', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TicketsCategories', array(
             'local' => 'category_id',
             'foreign' => 'category_id'));

        $this->hasOne('Customers', array(
             'local' => 'customer_id',
             'foreign' => 'customer_id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Domains', array(
             'local' => 'domain_id',
             'foreign' => 'domain_id'));

        $this->hasOne('Statuses', array(
             'local' => 'status_id',
             'foreign' => 'status_id'));

        $this->hasOne('Orders', array(
             'local' => 'order_id',
             'foreign' => 'order_id',
             'onDelete' => 'Set Null'));

        $this->hasOne('Tickets', array(
             'local' => 'sibling_id',
             'foreign' => 'ticket_id'));

        $this->hasOne('AdminUser', array(
             'local' => 'user_id',
             'foreign' => 'user_id',
             'onDelete' => 'Set Null'));

        $this->hasMany('TicketsNotes', array(
             'local' => 'ticket_id',
             'foreign' => 'ticket_id'));
    }
}