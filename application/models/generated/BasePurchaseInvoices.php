<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PurchaseInvoices', 'doctrine');

/**
 * BasePurchaseInvoices
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $purchase_id
 * @property date $creationdate
 * @property string $number
 * @property string $company
 * @property integer $method_id
 * @property integer $category_id
 * @property float $total_net
 * @property float $total_vat
 * @property float $total
 * @property date $expiringdate
 * @property date $paymentdate
 * @property string $note
 * @property string $document
 * @property integer $status_id
 * @property PurchaseCategories $PurchaseCategories
 * @property PaymentsMethods $PaymentsMethods
 * @property Statuses $Statuses
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePurchaseInvoices extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('invoices_purchases');
        $this->hasColumn('purchase_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('creationdate', 'date', 25, array(
             'type' => 'date',
             'notnull' => true,
             'length' => '25',
             ));
        $this->hasColumn('number', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '50',
             ));
        $this->hasColumn('company', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '150',
             ));
        $this->hasColumn('method_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('total_net', 'float', 10, array(
             'type' => 'float',
             'notnull' => true,
             'default' => '0.00',
             'length' => '10',
             ));
        $this->hasColumn('total_vat', 'float', 10, array(
             'type' => 'float',
             'notnull' => true,
             'default' => '0.00',
             'length' => '10',
             ));
        $this->hasColumn('total', 'float', 10, array(
             'type' => 'float',
             'notnull' => true,
             'default' => '0.00',
             'length' => '10',
             ));
        $this->hasColumn('expiringdate', 'date', 25, array(
             'type' => 'date',
             'length' => '25',
             ));
        $this->hasColumn('paymentdate', 'date', 25, array(
             'type' => 'date',
             'length' => '25',
             ));
        $this->hasColumn('note', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('document', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('status_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('PurchaseCategories', array(
             'local' => 'category_id',
             'foreign' => 'category_id'));

        $this->hasOne('PaymentsMethods', array(
             'local' => 'method_id',
             'foreign' => 'method_id'));

        $this->hasOne('Statuses', array(
             'local' => 'status_id',
             'foreign' => 'status_id'));
    }
}