<?php

/**
 * Customers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */

class Customers extends BaseCustomers {
    
	/**
	 * Override of the relations between the 
	 * Customers and Custom_Attributes_Values table
	 * 
	 * Setup a new external relationship 
	 * between the Customers table class 
	 * and the CustomAttributesValues class
	 * 
	 * (non-PHPdoc)
	 * @see BaseServers::setUp()
	 */
    public function setUp()
    {
        parent::setUp();
        $this->hasOne('CustomAttributesValues', array(
             'local' => 'customer_id',
             'foreign' => 'external_id'));
    }
    
	/**
	 * grid
	 * create the configuration of the grid
	 */	
	public static function grid($rowNum = 10) {
		
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'c.customer_id', 'alias' => 'customer_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'c.customer_id', 'alias' => 'customer_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Company' ), 'field' => 'c.company', 'alias' => 'company', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Fullname' ), 'field' => 'CONCAT(c.firstname, " ", c.lastname)', 'alias' => 'fullname', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Email' ), 'field' => 'c.email', 'alias' => 'email', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Statuses' ), 'field' => 's.status', 'alias' => 'status', 'sortable' => true, 'type' => 'index', 'searchable' => true, 'filterdata' => Statuses::getList('customers')  );
		
		$config ['datagrid'] ['fields'] = "c.customer_id, 
										   c.company as company, 
										   CONCAT(c.firstname, ' ', c.lastname) as fullname, 
										   c.email as email, 
										   s.status as status";
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )->from ( 'Customers c' )->leftJoin ( 'c.Statuses s' );
		
		$config ['datagrid'] ['basepath'] = "/admin/customers/";
		$config ['datagrid'] ['index'] = "customer_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/customers/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/customers/confirm/id/%d";
		
		$config ['datagrid'] ['massactions']['common'] = array ('bulk_export'=>'Export PDF Customers List',
													  'bulk_excel'=>'Export EXCEL Customers List',
													  'bulk_xml'=>'Export XML Customers List', 
													  'bulk_reset_password'=>'Reset password and send welcome mail', 
													  'bulk_add_to_newsletter'=>'Add to the newsletter' );
		$statuses = Statuses::getList('customers');
		
		if(!empty($statuses))
			$customacts = array();
			foreach ($statuses as $key => $value) {
				$customacts['bulk_set_status&status=' . $key ] = "Set as $value";
			}
			$config ['datagrid'] ['massactions']['status'] = $customacts;
		
		return $config;
	}
	
	/*
	 * Create
	 * Create a new customer
	 */
	public static function Create($data) {
		$customer = new Customers ( );
		
		// Customer's parameters.
		$customer->company = !empty($data ['company']) ? $data ['company'] : null;
		$customer->firstname = !empty($data ['firstname']) ? $data ['firstname'] : null;
		$customer->lastname = !empty($data ['lastname']) ? $data ['lastname'] : null;
		$customer->sex = !empty($data ['sex']) ? $data ['sex'] : null;
		$customer->email = $data ['email'] ? $data ['email'] : null;
		$customer->password = crypt($data ['password']);
		
		$customer->birthplace = !empty($data ['birthplace']) ? $data ['birthplace'] : null;
		$customer->birthdate = !empty($data ['birthdate']) ? Shineisp_Commons_Utilities::formatDateIn ( $data ['birthdate'] ) : null;
		$customer->birthdistrict = !empty($data ['birthdistrict']) ? $data ['birthdistrict'] : null;
		$customer->birthcountry = !empty($data ['birthcountry']) ? $data ['birthcountry'] : null;
		$customer->birthnationality = !empty($data ['birthnationality']) ? $data ['birthnationality'] : null;
		$customer->note = ! empty ( $data ['note'] ) ? $data ['note'] : Null;
		$customer->vat = ! empty ( $data ['vat'] ) ? $data ['vat'] : Null;
		$customer->taxpayernumber = ! empty ( $data ['taxpayernumber'] ) ? $data ['taxpayernumber'] : Null;
		$customer->status_id = ! empty ( $data ['status_id'] ) ? $data ['status_id'] : Statuses::id('Active', 'Customers'); 
		$customer->legalform_id = ! empty ( $data ['legalform'] ) ? $data ['legalform'] : Null;
		$customer->type_id = ! empty ( $data ['company_type_id'] ) ? $data ['company_type_id'] : Null;
		$customer->parent_id = ! empty ( $data ['parent_id'] ) ? $data ['parent_id'] : Null;
		$customer->isreseller = ! empty ( $data ['isreseller'] ) ? $data ['isreseller'] : Null;
		$customer->language = ! empty ( $data ['language'] ) ? $data ['language'] : "it_IT";
		$customer->created_at = date ( 'Y-m-d H:i:s' );
		$customer->updated_at = date ( 'Y-m-d H:i:s' );
		
		// Save the data
		$customer->save ();
		
		// Add the customer email in the newsletter list
		NewslettersSubscribers::customer_optIn($customer['customer_id']);
		
		if(!empty($data ['contact'])){
			$customer->Contacts [0]->contact = ! empty ( $data ['contact'] ) ? $data ['contact'] : Null;
			$customer->Contacts [0]->type_id = ! empty ( $data ['contacttypes'] ) ? $data ['contacttypes'] : Null;
			$customer->Contacts [0]->base = 1;
		  $customer->save ();
		}
		
		if(!empty($data ['address'])){
			$customer->Addresses [0]->address = ! empty ( $data ['address'] ) ? $data ['address'] : Null;
			$customer->Addresses [0]->city = ! empty ( $data ['city'] ) ? $data ['city'] : Null;
			$customer->Addresses [0]->code = ! empty ( $data ['code'] ) ? $data ['code'] : Null;
			$customer->Addresses [0]->country_id = ! empty ( $data ['country_id'] ) ? $data ['country_id'] : Null;
			$customer->Addresses [0]->area = ! empty ( $data ['area'] ) ? $data ['area'] : Null;
			$customer->save ();
		}
		
		$customerID = $customer->getIncremented ();
		
		// Send the welcome email
		self::welcome_mail($customerID, $data ['password']);
		
		return $customerID;
	}
	
	/**
	 * Send the welcome email to the selected user and reset the password
	 * @param integer $customerid
	 * @return Boolean
	 */
	public static function welcome_mail($customerid, $passwd="") {
	
		$data     = self::getAllInfo($customerid);
		$isp      = Isp::getActiveISP ();

		// Reset password
		if (empty($passwd)) {
			$passwd = Shineisp_Commons_Utilities::GenerateRandomPassword();
			self::reset_password($customerid, $passwd);
		}
		
		Shineisp_Commons_Utilities::sendEmailTemplate($data ['email'], 'new_account', array(
			 'storename' => $isp['company']
			,'website'   => $isp['website']
			,'email'     => $data['email']
			,'fullname'  => $data['fullname']
			,'signature' => $isp['company']
			,'password'  => $passwd
		));
	}
	
	/**
	 * Check if the customer has not to pay taxes
	 * in his orders.
	 * 
	 * 
	 * @param integer $id
	 * @return boolean
	 * @throws Exception
	 */
	public static function isTaxFree($id) {
		if( ! is_numeric($id) ) {
			throw new Exception('Customer Id paramenter is mandatory');
		}
		
		$customer = self::getAllInfo($id);
		return $customer['taxfree'];
	}

	/**
	 * Check if the customer is subject to EU-VAT
	 * TODO: add support for multiple invoicing addresses
	 * 
	 * @param integer $id
	 * @return boolean
	 * @throws Exception
	 */
	public static function isVATFree($id) {	
		if( ! is_numeric($id) ) {
			throw new Exception('Customer Id paramenter is mandatory');
		}
		
		$customer = self::getAllInfo($id);

		// tax free also means vat free
		if ( $customer['taxfree'] == 1 ) {
			return true;
		}

		$Addresses = Addresses::findOneByUserId($id);
		if ( ! isset($Addresses->country_id) || ! is_numeric($Addresses->country_id) ) {
			return false;
		}

		if ( empty($customer['vat']) ) {
			/*
			 * Private
			 */
			//* EU country, VAT ok
			return ! Countries::isUEbyId($Addresses->country_id);  
			 
		} else {
			/*
			 * Company
			 */
			 
			//* TODO: 82 is Italy. This should not be hardcoded here.
			return ($Addresses->country_id != 82) ? true : false;
		}
		
		
	}
	
	/**
	 * Save all the data in the database
	 * @param array $data
	 * @param integer $id
	 */
	public static function saveAll(array $data, $id) {
		
		if(!empty($data) && is_array($data)){
			if(is_numeric($id)){
				$customer = Doctrine::getTable ( 'Customers' )->find($id);
			}else{
				$customer = new Customers();
			}
			
			$customer['company'] = $data['company'];
			$customer['firstname'] = $data['firstname'];
			$customer['lastname'] = $data['lastname'];
			$customer['sex'] = $data['sex'];
			
			if (! empty ( $data ['password'] )) {
				$customer['password'] = crypt($data['password']);
			}
			
			$customer['email'] = $data['email'];
			$customer['birthplace'] = $data['birthplace'];
			$customer['birthdate'] = Shineisp_Commons_Utilities::formatDateIn ( $data ['birthdate'] );
			$customer['birthdistrict'] = $data['birthdistrict'];
			$customer['birthcountry'] = $data['birthcountry'];
			$customer['birthnationality'] = $data['birthnationality'];
			$customer['note'] = $data['note'];
			$customer['vat'] = $data['vat'];
			$customer['taxpayernumber'] = $data['taxpayernumber'];
			$customer['status_id'] = $data['status_id'];
			$customer['issubscriber'] = $data['issubscriber'];
			$customer['legalform_id'] = $data['legalform_id'];
			$customer['type_id'] = $data['type_id'];
			$customer['group_id'] = $data['group_id'];
			$customer['issubscriber'] = !empty($data ['issubscriber']) ? 1 : 0;
			$customer['taxfree'] = !empty($data ['taxfree']) ? 1 : 0;
			$customer['legalform_id'] = $data['legalform_id'];
			$customer['type_id'] = ! empty ( $data ['type_id'] ) ? $data ['type_id'] : Null;
			$customer['parent_id'] = ! empty ( $data ['parent_id'] ) ? $data ['parent_id'] : Null;
			$customer['isreseller'] = ! empty ( $data ['isreseller'] ) ? $data ['isreseller'] : Null;
			$customer['ignore_latefee'] = (bool)$data ['ignore_latefee'];
			$customer['language'] = $data['language'];
			
			$customer->save();
				
			// get the customer ID
			$data['customer_id'] = empty($data['customer_id']) ? $customer['customer_id'] : $data['customer_id'];
			
			// Handle the customer address
			if(!empty($data['address'])){
				Addresses::AddNew($data);
			}
				
			// Handle the customer contact
			if (! empty ( $data ['contact'] )) {
				Contacts::AddNew(array('contact' => $data['contact'], 'type_id' => $data['contacttypes'], 'customer_id' => $customer['customer_id']));
			}
			
			// Newsletter OptIn
			if(!empty($data ['issubscriber']) && $data ['issubscriber'] == 1){
				NewslettersSubscribers::customer_optIn($customer['customer_id']);  // Add the customer email in the newsletter list
			}else{
				NewslettersSubscribers::customer_optOut($customer['customer_id']); // Remove the customer email from the newsletter subscriber list
			}
			
			// Save the upload file
			self::UploadDocument($customer['customer_id'], $data['filecategory']);
	
			
		
			return $customer['customer_id'];
		}
		
		return false;
	}


    
    /**
     * UploadDocument
     * the extensions allowed are JPG, GIF, PNG
     */
    public static function UploadDocument($id, $categoryID){
    	try{
    		
	    	$attachment = new Zend_File_Transfer_Adapter_Http();
	    	
			$files = $attachment->getFileInfo();
			
			// Create the directory
			@mkdir ( PUBLIC_PATH . "/documents/customers/$id/", 0777, true );
			
			// Set the destination directory
			$attachment->setDestination ( PUBLIC_PATH . "/documents/customers/$id/" );
			
			if ($attachment->receive()) {
				return Files::saveit($files['attachments']['name'], "/documents/customers/$id/", 'customers', $id, $categoryID);
			}	
			
    	}catch (Exception $e){
			echo $e->getMessage();
			die;	    		
    	}
    }	    
    	
	
	/**
	 * delete the customer selected 
	 * @param $customerid
	 * @return Boolean
	 */
	public static function del($customerid) {
		
		// Delete all the domains
		Domains::delete_by_customerid($customerid);
		
		// Delete all the references of the customers
		CustomersDomainsRegistrars::del($customerid);
		
		// Delete all the orders
		Orders::DeleteByCustomerID($customerid);

		// Delete all the customer's files
		Files::delete_all_by_customerId($customerid);
		
		return Doctrine_Query::create ()->delete ( 'Customers' )->where ( 'customer_id = ?', $customerid )->execute ();
	}
	
	/**
	 * getAll
	 * get all the customers 
	 * @return ArrayObject
	 */
	public static function getAll() {
		$dq = Doctrine_Query::create ()->from ( 'Customers c' );
		return $dq->execute (array (), Doctrine::HYDRATE_ARRAY);
	}
	
	/**
	 * setCustomerPassword
	 * set the password of the customer 
	 * @param $customerid
	 * @param $newPwd
	 * @return Boolean
	 */
	public static function setCustomerPassword($customerid, $newPwd) {
		$q = Doctrine_Query::create ()->update ( 'Customers' )
				->set ( 'password', '?', crypt ( $newPwd ) )
				->set ( 'last_password_change', '?', date ( 'Y-m-d H:i:s' ) )
				->set ( 'force_password_change', '?', 0)
				->where ( 'customer_id = ?', intval($customerid) );
		return $q->execute ();
	}
	
	/**
	 * reset the customer's password  
	 * @param integer $customerid
	 * @param string $newpwd
	 * @return Boolean
	 */
	public static function reset_password($customerid, $newpwd) {
		return Doctrine_Query::create ()->update ( 'Customers' )
				->set ( 'password', '?', crypt ( $newpwd ) )
				->set ( 'last_password_change', '?', date ( 'Y-m-d H:i:s' ) )
				->set ( 'force_password_change', '?', 0)
				->where ( 'customer_id = ?', intval($customerid) )
				->execute ();
	}
	
	/**
	 * generateResetPasswordKey
	 * generate a new key needed for password reset
	 * @param $customerId
	 * @return $key
	 */
	public static function generateResetPasswordKey($customerid) {
		$resetKey = Shineisp_Commons_Utilities::GenerateRandomPassword(24);
		
		$q = Doctrine_Query::create ()->update ( 'Customers' )
				->set ( 'resetpwd_key', '?', $resetKey )
				->set ( 'resetpwd_expire', '?', date ( 'Y-m-d H:i:s', time()+(2*3600)) )
				->where ( 'customer_id = ?', intval($customerid) );
		if ( $q->execute () ) {
			return $resetKey;
		};
	}
	
	/**
	 * setCustomerPassword
	 * set the password of the customer 
	 * @param $customerid
	 * @param $newPwd
	 * @return Boolean
	 */
	public static function deleteResetPasswordKey($customerid) {
		return Doctrine_Query::create ()->update ( 'Customers' )
				->set ( 'resetpwd_key', '?', '')
				->set ( 'resetpwd_expire', '?', '')
				->where ( 'customer_id = ?', intval($customerid) )
				->execute();
	}
	
	
	
	/**
	 * getCustomerbyEmailMd5
	 * Get a customer by MD5 email  
	 * @param $email
	 * @return Array
	 */
	public static function getCustomerbyEmailMd5($email) {
		$dq = Doctrine_Query::create ()->from ( 'Customers c' )->where ( "MD5(email) = ?", $email )->limit ( 1 );
		return $dq->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}
	
	/**
	 * getCustomerbyEmailSha1
	 * Get a customer by SHA1 email  
	 * @param $email
	 * @return Array
	 */
	public static function getCustomerbyEmailSha1($email) {
		$dq = Doctrine_Query::create ()->from ( 'Customers c' )->where ( "SHA1(email) = ?", $email )->limit ( 1 );
		return $dq->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}
	
	/**
	 * getCustomerByResetKey
	 * Get a customer by a reset key enforced by reset key expiration  
	 * @param $email
	 * @return Array
	 */
	public static function getCustomerByResetKey($resetKey) {
		if ( empty($resetKey) ) {
			return false;	
		}
		
		return Doctrine_Query::create ()->from ( 'Customers c' )
			->where ('resetpwd_key = ?', $resetKey)
			->andWhere('TIME_TO_SEC(TIMEDIFF(resetpwd_expire,NOW())) > 0')
			->limit ( 1 )
			->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}
	
	
	
	/**
	 * isReseller
	 * Get if the customer is a reseller  
	 * @return Array
	 */
	public static function isReseller($id) {
		$record = Doctrine_Query::create ()->select('isreseller')
											->from ( 'Customers c' )
											->where ( "customer_id = ?", $id )
											->limit ( 1 )
											->execute (array (), Doctrine::HYDRATE_ARRAY);
											
		if(!empty($record[0]['isreseller']) && $record[0]['isreseller']){
			return true;
		}else{
			return false;
		}
	}
	
	/**
	 * Get a customer by parent id 
	 * @param integer $parent_id
	 * @param string $fields
	 * @return Array
	 */
	public static function getClients($parent_id, $fields="*") {
		return Doctrine_Query::create ()->select($fields)
										->from ( 'Customers c' )
										->where ( "parent_id = ?", $parent_id )
										->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}
	
	/**
	 * Get a customer by id lists 
	 * @param array $ids [1,2,3,4,...,n]
	 * @param string $fields
	 * @return Array
	 */
	public static function get_customers($ids, $fields=null) {
		$dq = Doctrine_Query::create ()->from ( 'Customers c' )
										->leftJoin ( 'c.Orders o' )
										->leftJoin ( 'o.OrdersItems oi' )
										->leftJoin ( 'c.CompanyTypes cts' )
										->leftJoin ( 'c.Legalforms l' )
										->leftJoin ( 'c.Addresses a' )
										->leftJoin ( 'a.Countries ct' )
										->leftJoin ( 'c.Contacts cn' )
										->leftJoin ( 'cn.ContactsTypes t' )
										->leftJoin ( 'c.Statuses s' )
										->leftJoin ( 'c.CustomersGroups g' )
										->whereIn( "customer_id", $ids);
		if(!empty($fields)){
			$dq->select($fields);
		}
		
		return $dq->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}
	
	/**
	 * getCustomerbyEmail
	 * Get a customer by email 
	 * @param $email
	 * @return Array
	 */
	public static function getCustomerbyEmail($email) {
		$dq = Doctrine_Query::create ()->from ( 'Customers c' )->where ( "email = ?", $email )->limit ( 1 );
		return $dq->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}
	
	/**
	 * Get a customer by the MD5 email value and MD5 password value
	 * @param $email 
	 * @param $password
	 * @return Array
	 */
	public static function getCustomerbyLogin($email, $password) {
			$dbUser = Doctrine_Query::create ()
								->from ( 'Customers u' )
								->where ( 'MD5(u.email) = ? AND status_id = ?', array ($email, Statuses::id('active', 'customers') ) )
								->limit(1)
								->fetchArray();
								
			if ( $dbUser && isset($dbUser[0]) ) {
				$dbUser = $dbUser[0];
				$dbPass = $dbUser['password'];
				
				if ( strlen($dbPass) > 32 && substr($dbPass,0,1) == '$') {
					$userPassword = crypt($password, $dbPass);
				} else {
					$isMD5 = true;
					$userPassword = md5($password);
				}
				
				if ( $userPassword == $dbPass ) {
					//* if password was crypted in plain MD5, force convertion to crypt
					if ( $isMD5 ) {
						$cryptPassword = crypt($password);
						
						Doctrine_Query::create ()->update ( 'Customers u' )
												 ->set ( 'u.password', '?', $cryptPassword )
												 ->where ( 'MD5(u.email) = ?', $email )
												 ->limit(1)
												 ->execute ();					
					} 
	
					// Auth OK
					return $dbUser;				
				}				
			}
			
			return array();
	}
	
	/**
	 * getFields
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function getFields() {
		return Doctrine::getTable ( 'Customers' )->getColumns ();
	}
	
	/**
	 * getAllInfo
	 * Get a record by ID
	 * @param $id
	 * @return ARRAY Record
	 */
	public static function getAllInfo($id, $fields = "*", $where = "") {
		try {
			$dq = Doctrine_Query::create ()
								->from ( 'Customers c' )
								->leftJoin ( 'c.CompanyTypes cts' )
								->leftJoin ( 'c.Legalforms l' )
								->leftJoin ( 'c.Addresses a' )
								->leftJoin ( 'a.Countries ct' )
								->leftJoin ( 'c.Contacts cn' )
								->leftJoin ( 'c.Statuses s' )
								->leftJoin ( 'c.CustomAttributesValues cav ON cav.external_id = c.customer_id' )
								->leftJoin ( 'cav.CustomAttributes ca' )
								->where ( 'c.customer_id = ?', $id );
			
			if(!empty($fields) && $fields != "*"){
				$dq->select ( $fields );
			}
			
			if (! empty ( $where )) {
				$dq->andWhere ( $where );
			}
			
			$customer = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			
			if (isset ( $customer [0] )) {
				// Add "fullname" value, needed almost everywhere
				if ( isset($customer[0]['company']) && !empty($customer[0]['company']) ) {
					$customer[0]['fullname']        = $customer[0]['company'];
					$customer[0]['full_personname'] = $customer[0]['lastname'].' '.$customer [0]['firstname'];
				} else {
					$customer[0]['fullname'] = $customer[0]['lastname'].' '.$customer [0]['firstname'];	
				}
				
				return $customer [0];
			} else {
				return array ();
			}
		
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	
	}
	
	/**
	 * getEmails
	 * Get all the emails of the active customers
	 * @return Array
	 */
	public static function getEmails() {
		// Only active customers
		$dq = Doctrine_Query::create ()->select ( "customer_id, CONCAT(firstname, ' ', lastname) as fullname, email" )->from ( 'Customers c' )->where ( 'status_id = ?', 12 );
		$customers = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $customers;
	}
	
	/**
	 * find
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id, $fields = "*") {
		$customer = Doctrine_Query::create ()->select ( $fields )
										->from ( 'Customers c' )
										->leftJoin ( 'c.Statuses s ON s.status_id = c.status_id' )
										->leftJoin ( 'c.CustomersDomainsRegistrars cdr' )
										->leftJoin ( 'c.Legalforms l ON c.legalform_id = l.legalform_id' )
										->leftJoin ( 'c.CompanyTypes ct ON c.type_id = ct.type_id' )
										->where ( "customer_id = $id" )
										->limit ( 1 )
										->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		return !empty($customer[0]) ? $customer[0] : array();
	}
	
    
	/**
	 * Get the main email of the customer
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function getEmail($id) {
		$record = Doctrine_Query::create ()->select ( "email" )->from ( 'Customers c' )
									   ->where ( "customer_id = ?", $id )
									   ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		return !empty($record[0]) ? $record[0]['email'] : NULL;
	}
	
    
	/**
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function get_by_customerid($id, $fields = "*") {
		return Doctrine_Query::create ()->select ( $fields )->from ( 'Customers c' )
									   ->where ( "customer_id = ?", $id )
									   ->limit ( 1 )
									   ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * findbyemail
	 * Get a record by the email address
	 * @param $email
	 * @return Doctrine Record
	 */
	public static function findbyemail($email, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Customers c' )->leftJoin ( 'c.Statuses s ON s.status_id = c.status_id' )->addWhere ( "email = ?", $email )->limit ( 1 );
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$customer = $dq->execute ( array (), $retarray );
		return $customer;
	}
	
	
	
	/**
	 * findbyIds
	 * Get a group of records by ID
	 * @param array
	 * @return array
	 */
	public static function findbyIds($fields, $items) {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Customers c' )->whereIn ( "customer_id", $items );
		$customers = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $customers;
	}
	
	/**
	 * setStatus
	 * Set the status of all items selected
	 * @param $items
	 * @return void
	 */
	public static function setNewStatus($items) {
		$request = Zend_Controller_Front::getInstance ()->getRequest ();
		$status = $request->getParams ( 'params' );
		$params = parse_str ( $status ['params'], $output );
		$status = $output ['status'];
		if (is_array ( $items ) && is_numeric ( $status )) {
			foreach ( $items as $index ) {
				if (is_numeric ( $index )) {
					self::setStatus ( $index, $status ); 
				}
			}
			return true;
		}
		return false;
	}	
		
	/**
	 * setStatus
	 * Set a record with a status
	 * @param $id, $status
	 * @return Void
	 */
	public static function setStatus($id, $status) {
		$customer = Doctrine::getTable ( 'Customers' )->find ( $id );
		$customer->status_id = $status;
		return $customer->save ();
	}
	
		
	/**
	 * newsletter_subscription
	 * Set the subscription preference and 
	 * save the email address in the newsletter subscribers table
	 * @param $id, $value
	 * @return Boolean
	 */
	public static function newsletter_subscription($id, $value=true) {
		$customer = Doctrine::getTable ( 'Customers' )->find ( $id );
		$customer->issubscriber = $value;
		if($customer->trySave ()){
			if($value){
				NewslettersSubscribers::customer_optIn($id);
			}else{
				NewslettersSubscribers::customer_optOut($id);
			}
			
			return true;
		}
		return false;
	}
	
	/**
	 * hasDomains
	 * Get a the domains by ID
	 * @param $customerid
	 * @return boolean
	 */
	public static function hasDomains($customerid) {
		$domains = Doctrine::getTable ( 'Domains' )->findOneBy ( 'customer_id', $customerid, Doctrine::HYDRATE_ARRAY );
		if (is_array ( $domains )) {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * getList
	 * Get a list ready for the html select object
	 * @return array
	 */
	public static function getList($empty = false, array $criterias = array()) {
		$items = array ();
		$registry = Zend_Registry::getInstance ();
		$translations = $registry->Zend_Translate;
		
		if ($empty === true) {
			$items [] = $translations->translate ( 'Select ...' );
		}elseif(is_string($empty)){
			$items [] = $translations->translate ( $empty );
		}
		
		$Customers = Doctrine_Query::create ()->from ( 'Customers u' );
		
		if (count ( $criterias ) > 0) {
			foreach ( $criterias as $criteria ) {
				$Customers->addWhere ( $criteria ['where'], $criteria ['params'] );
			}
		}
		
		$Customers->orderBy ( 'lastname, firstname, company' );
		$arrCustomers = $Customers->execute ()->toArray ();
				
		foreach ( $arrCustomers as $c ) {
			$items [$c ['customer_id']] = Shineisp_Commons_Utilities::Capitalize($c ['lastname'] . " " . $c ['firstname'], true);
			if (! empty ( $c ['company'] )) {
				$items [$c ['customer_id']] .= " - " . ucwords($c ['company']);
			}
		}
		return $items;
	}
	
	/**
	 * Get a list of email of all the customers
	 * @return array
	 */
	public static function getEmailList($empty = false) {
		$items = array ();
		$registry = Zend_Registry::getInstance ();
		$translations = $registry->Zend_Translate;
		
		if ($empty) {
			$items [] = $translations->translate ( 'Select ...' );
		}

		$customer = Doctrine_Query::create ()->from ( 'Customers c' )->orderBy ( 'lastname, firstname, company' )->execute (array (), Doctrine_Core::HYDRATE_ARRAY);
		
		foreach ( $customer as $c ) {
			$items [$c ['customer_id']] = Shineisp_Commons_Utilities::Capitalize($c ['emaillastname'] . " (" . $c ['email'] . ")", true);
			if (! empty ( $c ['company'] )) {
				$items [$c ['customer_id']] .= " - " . ucwords($c ['company']);
			}
		}
		
		return $items;
	}
	
	/**
	 * login
	 * Check if the customer exist
	 * @param $email
	 * @param $password
	 * @return boolean
	 */
	public static function login($email, $password) {
		try {
			$dbUser = Doctrine_Query::create ()
								->from ( 'Customers u' )
								->where ( 'email = ? AND status_id = ?', array ($email, Statuses::id('active', 'customers') ) )
								->limit(1)
								->fetchArray();
								
			if ( $dbUser && isset($dbUser[0]) ) {
				$dbUser = $dbUser[0];
				$dbPass = $dbUser['password'];
				Shineisp_Commons_Utilities::log('Login: ' . $dbUser['lastname'] . ' tries to login with ' . $dbUser['email'] . ' and ' . $password . ' as password.' );
				
				if ( strlen($dbPass) > 32 && substr($dbPass,0,1) == '$') {
					$userPassword = crypt($password, $dbPass);
					Shineisp_Commons_Utilities::log('Login: this is the hashed password:' . $userPassword);
					Shineisp_Commons_Utilities::log('Login: this is the database hashed password:' . $dbPass);
				} else {
					$isMD5 = true;
					$userPassword = md5($password);
					Shineisp_Commons_Utilities::log('Login: this is the MD5 password:' . $userPassword);
				}
				
				if ( $userPassword == $dbPass ) {
					//* if password was crypted in plain MD5, force convertion to crypt
					if ( $isMD5 ) {
						$cryptPassword = crypt($password);
						
						Doctrine_Query::create ()->update ( 'Customers u' )
												 ->set ( 'u.password', '?', $cryptPassword )
												 ->where ( 'email = ?', $email )
												 ->limit(1)
												 ->execute ();					
					} 
	                
	                Shineisp_Commons_Utilities::log('Login: Authorization OK');
					// Auth OK
					return $dbUser;				
				}else{
				    Shineisp_Commons_Utilities::log('Login: Authorization KO');
				}				
			}
			
			return array();
		 
 		} catch ( Exception $e ) {
			echo $e->getMessage ();
			die ();
		}
	}
	
	/**
	 * Get the list of best customers
	 * @return ArrayObject
	 */
	public static function Hitparade() {
		$currency = Zend_Registry::getInstance ()->Zend_Currency;
		
		$records = Doctrine_Query::create ()->select ( "i.invoice_id, c.customer_id as id, c.lastname as lastname, c.firstname as firstname, c.company as company, SUM(o.grandtotal) as grandtotal" )
							->from ( 'Invoices i' )
							->leftJoin ( 'i.Customers c' )
							->leftJoin ( 'i.Orders o' )
							->groupBy('o.customer_id')
							->orderBy ( 'c.lastname' )
							->orderBy ( 'SUM(o.grandtotal) desc' )
							->limit(20)
							->execute ( null, Doctrine::HYDRATE_ARRAY );
	
		$data = array();
		
		foreach ($records as $record){
			unset($record['invoice_id']);
			$record['grandtotal'] = $currency->toCurrency($record['grandtotal'], array('currency' => Settings::findbyParam('currency')));
			$data[] = $record;
		}
		return $data;
	}
	
	/**
	 * Summary of all the customers stautus
	 * @return array
	 */
	public static function summary() {
		$chart = "";

		// Get the customer summary values
		$records = Doctrine_Query::create ()
									->select ( "customer_id, count(*) as items, s.status as status" )
									->from ( 'Customers c' )
									->leftJoin ( 'c.Statuses s' )
									->where("s.section = 'customers'")
									->groupBy('s.status')
									->execute(array (), Doctrine_Core::HYDRATE_ARRAY);

		// Strip the customer_id field
		if(!empty($records)){
			foreach($records as $key => $value) {
			  	array_shift($value);
			  	$newarray[] = $value;
			  	$chartLabels[] = $value['status'];
			  	$chartValues[] = $value['items'];
			}
			// Chart link
			$chart = "https://chart.googleapis.com/chart?chs=250x100&chd=t:".implode(",", $chartValues)."&cht=p3&chl=".implode("|", $chartLabels);
		}
		
		$record_group2 = Doctrine_Query::create ()
									->select ( "customer_id, count(*) as total" )
									->from ( 'Customers c' )
									->execute(array (), Doctrine_Core::HYDRATE_ARRAY);
		
		$newarray[] = array('items' => $record_group2[0]['total'], 'status' => "Total");
		
		return array('data' => $newarray, 'chart' => $chart);
	}
	
	
	######################################### BULK ACTIONS ############################################
	
	
	/**
	 * massdelete
	 * delete the customer selected 
	 * @param array
	 * @return Boolean
	 */
	public static function bulk_delete($customers) {
		
		$retval = Doctrine_Query::create ()->delete ()->from ( 'Customers c' )->whereIn ( 'c.customer_id', $customers )->execute ();
		foreach ( $customers as $customerid ) {
			CustomersDomainsRegistrars::del($customerid);
			Orders::DeleteByCustomerID($customerid);
			Shineisp_Commons_Utilities::delTree ( PUBLIC_PATH . "/documents/orders/$customerid" ); // Delete the orders files
		}
		return $retval;
	}
		
	/**
	 * export the content in a pdf file
	 * @param array $items
	 */
	public function bulk_export($items) {
		$isp = Isp::getActiveISP();
		$pdf = new Shineisp_Commons_PdfList();
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		// Get the records from the customer table
		$customers = self::get_customers($items);
		
		// Create the PDF header
		$grid['headers']['title'] = $translator->translate('Customers List');
		$grid['headers']['subtitle'] = $translator->translate('List of all the customers selected');
		$grid['footer']['text'] = $isp['company'] . " - " . $isp['website'];
		 
		if(!empty($customers[0]))

			// Create the columns of the grid
			$grid ['columns'] [] = array ("value" => $translator->translate('Company'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Firstname'), 'size' => 100);
			$grid ['columns'] [] = array ("value" => $translator->translate('Lastname'), 'size' => 80);
			$grid ['columns'] [] = array ("value" => $translator->translate('Email'));
			$grid ['columns'] [] = array ("value" => $translator->translate('City'), 'size' => 100);
			$grid ['columns'] [] = array ("value" => $translator->translate('Area'), 'size' => 80);
			$grid ['columns'] [] = array ("value" => $translator->translate('Status'), 'size' => 80);

			// Getting the records values and delete the first column the customer_id field.
			foreach ($customers as $customer){
				$values = array_values($customer);
				array_shift($values);
				$grid ['records'] [] = $values;
			}
				
			// Create the PDF
			die($pdf->create($grid));
		
		return false;	
	}
	
	/**
	 * Add the user in the newsletter
	 * @param array $items
	 */
	public function bulk_add_to_newsletter($items) {
		foreach ($items as $item) {
			NewslettersSubscribers::customer_optIn($item);
		}
		return true;
	}
	
	/**
	 * Send the welcome email to the customer selected
	 * and reset the password
	 * @param array $items
	 */
	public function bulk_reset_password($items) {
		foreach ($items as $item) {
			self::welcome_mail($item);
		}
		return true;
	}
	
	/**
	 * Set the status of the records
	 * @param array $items Items selected
	 * @param array $parameters Custom paramenters
	 */
	public function bulk_set_status($items, $parameters) {
		if(!empty($parameters['status'])){
			foreach ($items as $item) {
				self::setStatus($item, $parameters['status']);
			}
		}
		return true;
	}

	/**
	 * export the content in a excel file
	 * @param array $items
	 */
	public function bulk_xml($items) {
	
		if(empty($items)){
			return false;
		}
	
		// Get the records from the customer table
		$data = self::get_customers($items);
		
		$xml = new SimpleXMLElement('<shineisp></shineisp>');
		$customers = $xml->addChild('customers');
		
		foreach ($data as $item){
			$customer = $customers->addChild('customer');
			$customer->addAttribute('id', $item['customer_id']);
			$customer->addChild('company', htmlentities($item['company']));
			$customer->addChild('firstname',$item['firstname']);
			$customer->addChild('lastname',$item['lastname']);
			$customer->addChild('sex',$item['sex']);
			$customer->addChild('email',$item['email']);
			$customer->addChild('password',$item['password']);
			$customer->addChild('birthdate',$item['birthdate']);
			$customer->addChild('birthplace',$item['birthplace']);
			$customer->addChild('birthdistrict',$item['birthdistrict']);
			$customer->addChild('birthcountry',$item['birthcountry']);
			$customer->addChild('birthnationality',$item['birthnationality']);
			$customer->addChild('taxpayernumber',$item['taxpayernumber']);
			$customer->addChild('vat',$item['vat']);
			$customer->addChild('birthnationality',$item['birthnationality']);
				
			$ctype = $customer->addChild('companytype',$item['CompanyTypes']['name']);
			$ctype->addAttribute('type_id', $item['type_id']);
				
			$legalform = $customer->addChild('companytype',$item['Legalforms']['name']);
			$legalform->addAttribute('legalform_id', $item['legalform_id']);
				
			$status = $customer->addChild('companytype',$item['Statuses']['status']);
			$status->addAttribute('status_id', $item['status_id']);
				
			$cgroup = $customer->addChild('companytype',$item['CustomersGroups']['name']);
			$cgroup->addAttribute('group_id', $item['group_id']);
				
			$customer->addChild('note',"<![CDATA[".htmlentities($item['note'])."]]>");
				
			$customer->addChild('language',$item['language']);
			$customer->addChild('issubscriber',$item['issubscriber']);
			$customer->addChild('created_at',$item['created_at']);
			$customer->addChild('updated_at',$item['updated_at']);
			$customer->addChild('taxfree',$item['taxfree']);
				
			$addresses = $customer->addChild('addresses');
				
			foreach ($item['Addresses'] as $addr){
				$address = $addresses->addChild('address');
				$address->addAttribute('address_id', $addr['address_id']);
	
				$address->addChild('address', $addr['address']);
				$address->addChild('city', $addr['city']);
				$address->addChild('code', $addr['code']);
				$country = $address->addChild('country', $addr['Countries']['name']);
				$country->addAttribute('country_id', $addr['country_id']);
				$address->addChild('area', $addr['area']);
				$address->addChild('latitude', $addr['latitude']);
				$address->addChild('longitude', $addr['longitude']);
			}
				
			$contacts = $customer->addChild('contacts');
				
			foreach ($item['Contacts'] as $cnt){
				$contact = $contacts->addChild('contact');
				$contact->addAttribute('contact_id', $cnt['contact_id']);
	
				$mycnt = $contact->addChild('contact', $cnt['contact']);
				$mycnt->addAttribute('type_id', $cnt['type_id']);
				$mycnt->addAttribute('label', $cnt['ContactsTypes']['name']);
			}
			

			$orders = $customer->addChild('orders');
			
			foreach ($item['Orders'] as $odr){
				$order = $orders->addChild('order');
				$order->addAttribute('order_id', $odr['order_id']);
				
				$order->addChild('order_date', $odr['order_date']);
				$order->addChild('total', $odr['total']);
				$order->addChild('cost', $odr['cost']);
				$order->addChild('vat', $odr['vat']);
				$order->addChild('grandtotal', $odr['grandtotal']);
				
				$details = $order->addChild('details');
				foreach ($odr['OrdersItems'] as $dtl){
					$detail = $details->addChild('detail');
					$detail->addAttribute('detail_id', $dtl['detail_id']);
					$detail->addAttribute('status_id', $dtl['status_id']);
					$detail->addAttribute('product_id', $dtl['product_id']);
					
					$detail->addChild('date_start', $dtl['date_start']);
					$detail->addChild('date_end', $dtl['date_end']);
					$detail->addChild('quantity', $dtl['quantity']);
					$detail->addChild('description', "<![CDATA[".htmlentities($dtl['description'])."]]>");
					$detail->addChild('cost', $dtl['cost']);
					$detail->addChild('price', $dtl['price']);
					$detail->addChild('setupfee', $dtl['setupfee']);
					$detail->addChild('status_id', $dtl['status_id']);
				}
			}
		}
	
		$xml->saveXML(PUBLIC_PATH . "/tmp/" . date('Ymdhis') . __CLASS__ . '.xml');
		die(json_encode(array('url' => "/tmp/" . date('Ymdhis') . __CLASS__ . ".xml")));
	
	}
	
	/**
	 * export the content in a excel file
	 * @param array $items
	 */
	public function bulk_excel($items) {
	
		if(empty($items)){
			return false;
		}
	
		$objPHPExcel = new PHPExcel();
		$company = Isp::getActiveISP();
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
	
		$objPHPExcel->getProperties()->setCreator($company['company']);
		$objPHPExcel->getProperties()->setLastModifiedBy($company['manager']);
		$objPHPExcel->getProperties()->setTitle("Office 2007 XLSX __CLASS__ Document");
		$objPHPExcel->getProperties()->setSubject("Office 2007 XLSX __CLASS__ Document");
	
		$objPHPExcel->setActiveSheetIndex(0);
	
		// Get the records from the customer table
		$data = self::get_customers($items);
	
		// Create the PDF header
		$objPHPExcel->getActiveSheet()->setTitle($translator->translate('Customer List'));
		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(0, 1, strtoupper($translator->translate('Customer List')));
	
		if(!empty($data[0])){
			$row = 4;
			$column = 0;
				
			// Fields header title
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column, 3, $translator->translate('Id'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Company'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Firstname'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Lastname'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Sex'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Email'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Password'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Birthdate'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Birthplace'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Birthdistrict'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Birthcountry'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Birth Nationality'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Tax Payer Number'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('VAT'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Company Type'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Legalform'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Note'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Status'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Group'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Language'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Newsletter'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Created at'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Updated at'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Taxfree'));

			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Address'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('City'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Code'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Country'));
			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, 3, $translator->translate('Area'));
			
			$column=0;
	
			// Get the main information of the client
			foreach ($data as $item){
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column, $row, $item['customer_id']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['company']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['firstname']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['lastname']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['sex']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['email']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['password']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['birthdate']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['birthplace']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['birthdistrict']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['birthcountry']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['birthnationality']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['taxpayernumber']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['vat']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['CompanyTypes']['name']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['Legalforms']['name']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['note']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['Statuses']['status']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['CustomersGroups']['name']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['language']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['issubscriber']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['created_at']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['updated_at']);
				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $item['taxfree']);
				
				// get all the addresses
				foreach ($item['Addresses'] as $address){
					
					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $address['address']);
					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $address['city']);
					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $address['code']);
					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $address['Countries']['name']);
					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $address['area']);
					break;
				}
	
				// get all the contacts
				foreach ($item['Contacts'] as $contact){
					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column, 3, $translator->translate($contact['ContactsTypes']['name']));
					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($column++, $row, $contact['contact']);
					break;
				}
				$row++;
				$column = 0;
			}
		}
	
		// Create the XLS
		$objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
		$objWriter->save(PUBLIC_PATH . "/tmp/" . __CLASS__ . '.xlsx');
	
		die(json_encode(array('url' => "/tmp/" . __CLASS__ . ".xlsx")));
	}
}