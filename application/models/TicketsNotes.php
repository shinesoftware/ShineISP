<?php

/**
 * TicketsNotes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TicketsNotes extends BaseTicketsNotes
{
	/**
	 * getAllInfo
	 * @param integer $noteid
	 */
	public static function getAllInfo($id) {
		$record = Doctrine_Query::create ()
				->from ( 'TicketsNotes tn' )
				->leftJoin ( 'tn.Tickets t' )
				->leftJoin ( 't.Customers c' )
				->leftJoin ( 't.Statuses s' )
				->where( "tn.note_id = ?", $id )
				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY  );
		return $record;
	}
	
	/**
	 * Count the replies messages of the customers
	 * 
	 * @param integer $ticketid
	 */
	public static function countReplies($ticketid) {
		$record = Doctrine_Query::create ()->select('count(*) as total')
				->from ( 'TicketsNotes tn' )
				->where( "tn.ticket_id = ?", $ticketid )
				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY  );
		return $record[0]['total'];
	}
	
	/**
	 * Delete the replies messages of the customers
	 * 
	 * @param integer $ticketid
	 */
	public static function deleteNote($noteid) {
		return Doctrine::getTable ( 'TicketsNotes' )->find ( $noteid )->delete();
	}
	
	/**
	 * Rate the ticket note
	 * @param integer $id
	 * @param integer $stars
	 */
	public static function Vote($id, $stars){
		
		if(!empty($stars) && is_numeric($stars)){
			$Note = Doctrine::getTable ( 'TicketsNotes' )->find ( $id );
			$Note->vote = $stars;
			$Note->save ();
			
			Tickets::updateTickectVote($id);
			return true;
		}
		return false;
	}
	

	
	/**
	 * getNote
	 * Find a note
	 * @return array
	 */
	public static function getItemsNote($string) {
		$items = array ();
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
	
		$dq = Doctrine_Query::create ()->select ( "tn.ticket_id, t.subject as subject, CONCAT(c.firstname, ' ', c.lastname) as fullname" )
				->from ( 'TicketsNotes tn' )
				->leftJoin ( 'tn.Tickets t' )
				->leftJoin ( 't.Customers c' )
				->where('tn.note like ?', "%$string%");
		
		$retval = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	
		foreach ( $retval as $c ) {
			$items [$c ['ticket_id']] = $c ['subject'] . " (".$c ['fullname'].")";
		}
		return $items;
	}	
	
	
	
	
	/**
	 * Save the ticket 
	 * 
	 * @param integer $ticketid
	 * @param array $params
	 */
	public static function saveNew($ticketid, array $params){
		
		$note = new TicketsNotes ();
		if(!is_numeric($ticketid)){
			return false;
		}
		
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		$ticket = Tickets::find($ticketid);
		$t = Tickets::getAllInfo ( $ticketid, 'customer_id, subject, date_open, date_close', true );
		
		// Get the fastlink attached
		$link_exist = Fastlinks::findlinks ( $ticketid, $t [0]['customer_id'], 'tickets' );
		if (count ( $link_exist ) > 0) {
			$fastlink = $link_exist [0] ['code'];
		}
		
		$subject = ! empty ( $t [0] ['subject'] ) ? $t [0] ['subject'] : $translator->translate ( 'Generic Issue' );
		
		$date_open = $t [0] ['date_open'];
		$date_close = $t [0] ['date_close'];
		$note->date_post = date ( 'Y-m-d H:i:s' );
		$note->note = nl2br($params ['note']);
		$note->ticket_id = $ticketid;
		
		if (! empty ( $params ['status'] )) {
			Tickets::setStatus ( $ticketid, $params ['status'] );
		}
		
		if($note->trySave()){
			$ticket->date_updated = date ( 'Y-m-d H:i:s' );
			$ticket->save();
		}
		
		$id = $note->getIncremented ();
		
		// Save the upload file
		self::UploadDocument($ticketid, $t [0]['customer_id']);
			
		Tickets::sendMessageNotes($id);
		
	}
	
 	/**
     * UploadDocument
     * the extensions allowed are JPG, GIF, PNG
     */
    public static function UploadDocument($id, $customerid){
    	try{
    		
	    	$attachment = new Zend_File_Transfer_Adapter_Http();
	    	
			$files = $attachment->getFileInfo();
			
			// Create the directory
			@mkdir ( PUBLIC_PATH . "/documents/customers/$customerid/tickets/$id/", 0777, true );
			
			// Set the destination directory
			$attachment->setDestination ( PUBLIC_PATH . "/documents/customers/$customerid/tickets/$id/" );
			
			if ($attachment->receive()) {
				return Files::saveit($files['attachments']['name'], "/documents/customers/$customerid/tickets/$id/", 'tickets', $id);
			}	
			
    	}catch (Exception $e){
			echo $e->getMessage();
			die;	    		
    	}
    }	
}