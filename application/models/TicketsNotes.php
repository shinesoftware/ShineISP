<?php

/**
 * TicketsNotes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TicketsNotes extends BaseTicketsNotes
{
	
	/**
	 * find
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id) {
		return Doctrine::getTable ( 'TicketsNotes' )->findOneBy ( 'note_id', $id );
	}
	
	/**
	 * getAllInfo
	 * @param integer $noteid
	 */
	public static function getAllInfo($id) {
		$record = Doctrine_Query::create ()
				->from ( 'TicketsNotes tn' )
				->leftJoin ( 'tn.Tickets t' )
				->leftJoin ( 't.Customers c' )
				->leftJoin ( 't.Statuses s' )
				->where( "tn.note_id = ?", $id )
				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY  );
		return $record;
	}
	
	/**
	 * Count the replies messages of the customers
	 * 
	 * @param integer $ticketid
	 */
	public static function countReplies($ticketid) {
		$record = Doctrine_Query::create ()->select('count(*) as total')
				->from ( 'TicketsNotes tn' )
				->where( "tn.ticket_id = ?", $ticketid )
				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY  );
		return $record[0]['total'];
	}
	
	/**
	 * Delete the replies messages of the customers
	 * 
	 * @param integer $ticketid
	 */
	public static function deleteNote($noteid) {
		return Doctrine::getTable ( 'TicketsNotes' )->find ( $noteid )->delete();
	}
	
	/**
	 * Rate the ticket note
	 * @param integer $id
	 * @param integer $stars
	 */
	public static function Vote($id, $stars){
		
		if(!empty($stars) && is_numeric($stars)){
			$Note = Doctrine::getTable ( 'TicketsNotes' )->find ( $id );
			$Note->vote = $stars;
			$Note->save ();
			
			Tickets::updateTickectVote($id);
			return true;
		}
		return false;
	}
	

	
	/**
	 * getNote
	 * Find a note
	 * @return array
	 */
	public static function getItemsNote($string) {
		$items = array ();
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
	
		$dq = Doctrine_Query::create ()->select ( "tn.ticket_id, t.subject as subject, CONCAT(c.firstname, ' ', c.lastname) as fullname" )
				->from ( 'TicketsNotes tn' )
				->leftJoin ( 'tn.Tickets t' )
				->leftJoin ( 't.Customers c' )
				->where('tn.note like ?', "%$string%");
		
		$retval = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	
		foreach ( $retval as $c ) {
			$items [$c ['ticket_id']] = $c ['subject'] . " (".$c ['fullname'].")";
		}
		return $items;
	}	
	
	/**
	 * Save the ticket note 
	 * 
	 * @param integer $ticketid
	 * @param array $params
	 */
	public static function saveIt($tid, $date, $note, $status = null, $isAdmin = false, $noteid = null){
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		if(!is_numeric($tid)){
			return false;
		}
		
		if(is_numeric($noteid)){
			$ticketnote = self::find($noteid);
		}else{
			$ticketnote = new TicketsNotes ();
		}
		
		// Get and Check the ticket note
		$ticket = Tickets::find($tid);
		
		if($ticket && !empty($note)){
			
			$ticketnote->date_post = !empty($date) ? $date : $date ( 'Y-m-d H:i:s' );
			$ticketnote->note = $note;
			$ticketnote->admin = $isAdmin;
			$ticketnote->ticket_id = $tid;
			
			// Save the note
			if($ticketnote->trySave()){
				
				// update the ticket
				if(!empty($status) && is_numeric($status)){
					$ticket->status_id = $status;
				}
				$ticket->date_updated = date ( 'Y-m-d H:i:s' );
				$ticket->save();
			}
			
			$noteid = is_numeric($noteid) ? $noteid : $ticketnote->getIncremented ();
			
			// Save the upload file
			self::UploadDocument($tid, $ticket->get('customer_id'));
				
			Tickets::sendMessageNotes($noteid);
			
			return $ticketnote;
		}
		
		return false;
	}
	
	
 	/**
     * UploadDocument
     * the extensions allowed are JPG, GIF, PNG
     */
    public static function UploadDocument($id, $customerid){
    	try{
    		
	    	$attachment = new Zend_File_Transfer_Adapter_Http();
	    	
			$files = $attachment->getFileInfo();
			
			// Create the directory
			@mkdir ( PUBLIC_PATH . "/documents/customers/$customerid/tickets/$id/", 0777, true );
			
			// Set the destination directory
			$attachment->setDestination ( PUBLIC_PATH . "/documents/customers/$customerid/tickets/$id/" );
			
			if ($attachment->receive()) {
				return Files::saveit($files['attachments']['name'], "/documents/customers/$customerid/tickets/$id/", 'tickets', $id);
			}	
			
    	}catch (Exception $e){
			echo $e->getMessage();
			die;	    		
    	}
    }	
}