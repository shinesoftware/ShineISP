<?php

/**
 * Domains
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Domains extends BaseDomains {
	
	/**
	 * grid
	 * create the configuration of the grid
	 */
	public static function grid($rowNum = 10) {
		
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'd.domain_id', 'alias' => 'domain_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'd.domain_id', 'alias' => 'domain_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Domain' ), 'field' => 'd.domain', 'alias' => 'domain', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Tld' ), 'field' => 'ws.tld', 'alias' => 'tld', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Autorenew' ), 'field' => 'd.autorenew', 'alias' => 'autorenew', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Creation date' ), 'field' => 'creation_date', 'alias' => 'creation_date', 'sortable' => true, 'searchable' => true, 'type' => 'date' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Expiring date' ), 'field' => 'expiring_date', 'alias' => 'expiring_date', 'sortable' => true, 'searchable' => true, 'type' => 'date' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Days left' ), 'field' => 'daysleft', 'alias' => 'daysleft', 'sortable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Lastname' ), 'field' => 'c.lastname', 'alias' => 'lastname', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Registrar' ), 'field' => 'r.name', 'alias' => 'registrar', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Status' ), 'field' => 's.status', 'alias' => 'status', 'sortable' => true, 'type' => 'index', 'searchable' => true, 'filterdata' => Statuses::getList('domains') );
		
		$config ['datagrid'] ['fields'] =  "d.domain_id, 
											d.domain as domain, 
											d.autorenew as autorenew, 
											DATE_FORMAT(creation_date, '%d/%m/%Y') as creation_date, 
											DATE_FORMAT(expiring_date, '%d/%m/%Y') as expiring_date, 
											DATEDIFF(expiring_date, CURRENT_DATE) as daysleft, 
											r.name as registrar, 
											ws.tld as tld, 
											s.status as status, 
											c.lastname as lastname";
		
        $dq     = Doctrine_Query::create ()
                     ->select ( $config ['datagrid'] ['fields'] )
                     ->from ( 'Domains d' )
                     ->leftJoin ( 'd.DomainsTlds dt' )
                     ->leftJoin ( 'dt.WhoisServers ws' )
                     ->leftJoin ( 'd.TagsConnections tc' )
                     ->leftJoin ( 'd.Customers c' )
                     ->leftJoin ( 'd.OrdersItems oi' )
                     ->leftJoin ( 'd.Registrars r' )
                     ->leftJoin ( 'd.Statuses s' )
                     ->orderBy ( 'd.domain' )
                     ->addWhere( "c.isp_id = ?", Isp::getCurrentId() );
                      
                             
		$config ['datagrid'] ['dqrecordset'] = $dq;
		
		$config ['datagrid'] ['index'] = "domain_id";
		
		// Autorenew function											
		$massactions['bulk_set_autorenew&status=1'] = "Enable Autorenew";
		$massactions['bulk_set_autorenew&status=0'] = "Disable Autorenew";
		$massactions['bulk_delete'] = 'Mass Delete';
		$massactions['bulk_export'] = 'Export Domains List';
		$config ['datagrid'] ['massactions']['common'] = $massactions;
													
		$statuses = Statuses::getList('domains');
		
		if(!empty($statuses))
			$customacts = array();
			foreach ($statuses as $key => $value) {
				$customacts['bulk_set_status&status=' . $key ] = "Set as $value";
			}
			$config ['datagrid'] ['massactions']['statuses'] = $customacts;
			
		
		$actions = Registrars::getActions (1);
		if(!empty($actions))
			$customacts = array();
			foreach ($actions as $key => $value) {
				$customacts['bulk_registrar_tasks&task=' . $key ] = "Registrar Task: $value";
			}
			$config ['datagrid'] ['massactions']['registrar'] = $customacts;
				
		return $config;
	}
	
/**
	 * findAll
	 * Get records the domains from the DB
	 * @param $currentPage
	 * @param $rowNum
	 * @param $sort
	 * @param $where
	 * @return array
	 */
 	public static function findAll($fields = "*", $currentPage = 1, $rowNum = 2, array $sort = array(), array $where = array()) {
			
		$module = Zend_Controller_Front::getInstance ()->getRequest ()->getModuleName ();
		$controller = Zend_Controller_Front::getInstance ()->getRequest ()->getControllerName ();
		
		// Defining the url sort
		$uri = isset ( $sort [1] ) ? "/sort/$sort[1]" : "";
		
		$dq = Doctrine_Query::create ()
		             ->select ( $fields )
		             ->from ( 'Domains d' )
		             ->leftJoin ( 'd.DomainsTlds dt' )
		             ->leftJoin ( 'dt.WhoisServers ws' )
		             ->leftJoin ( 'd.TagsConnections tc' )
		             ->leftJoin ( 'd.Customers c' )
		             ->leftJoin ( 'c.Customers r' )
		             ->leftJoin ( 'd.OrdersItems oi' )
		             ->leftJoin ( 'd.Statuses s' )
		             ->orderBy ( 'd.domain' )
                     ->addWhere( "c.isp_id = ?", Isp::getCurrentId() );
		
		$pagerLayout = new Doctrine_Pager_Layout ( new Doctrine_Pager ( $dq, $currentPage, $rowNum ), new Doctrine_Pager_Range_Sliding ( array ('chunk' => 10 ) ), "/$module/$controller/list/page/{%page_number}" . $uri );
		
		// Get the pager object
		$pager = $pagerLayout->getPager ();
		
		// Set the Order criteria
		if (isset ( $sort [0] )) {
			$pager->getQuery ()->orderBy ( $sort [0] );
		}
		
		if (isset ( $where ) && is_array ( $where )) {
			foreach ( $where as $filters ) {
				
				if (isset ( $filters [0] ) && is_array($filters [0])) {
					foreach ( $filters as $filter ) {
						$method = $filter ['method'];
						$value = $filter ['value'];
						$criteria = $filter ['criteria'];
						$pager->getQuery ()->$method ( $criteria, $value );
					}
				} else {
					$method = $filters ['method'];
					$value = $filters ['value'];
					$criteria = $filters ['criteria'];
					$pager->getQuery ()->$method ( $criteria, $value );
				}
			}
		}

		
		$pagerLayout->setTemplate ( '<a href="{%url}">{%page}</a> ' );
		$pagerLayout->setSelectedTemplate ( '<a class="active" href="{%url}">{%page}</a> ' );
		
		$domains = $pagerLayout->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		$pagination = $pagerLayout->display ( null, true );
		
		return array ('records' => $domains, 'pagination' => $pagination, 'pager' => $pager, 'recordcount' => $dq->count () );
	
	}

	/**
	 * updateDomains
	 * Update the domains information
	 * @param $items
	 * @return void
	 */
	public static function updateDomains($items) {
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		$mex = "";
		
		if (is_array ( $items )) {
			try {
//				foreach ( $items as $domain ) {
//					$tmp = self::updateDomainInfo ( $domain );
//					
//					if (isset ( $tmp ['status'] ) && $tmp ['status'] == "error") {
//						$mex .= $tmp ['domain'] . " - " . $tmp ['mex'] . "<br>";
//					}
//				}
//				
				if (empty ( $mex )) {
					$mex = $translator->translate ( "The domains selected have been registered." );
				}
				
				die ( json_encode ( array ('mex' => $mex ) ) );
			} catch ( Exception $e ) {
				die ( json_encode ( array ('mex' => $e->getMessage () ) ) );
			}
		}
		return false;
	}
	
	/**
	 * setStatus
	 * Set the status of all items selected
	 * @param $items
	 * @return void
	 */
	public static function setNewStatus($items) {
		$request = Zend_Controller_Front::getInstance ()->getRequest ();
		$status = $request->getParams ( 'params' );
		$params = parse_str ( $status ['params'], $output );
		$status = $output ['status'];
		if (is_array ( $items ) && is_numeric ( $status )) {
			foreach ( $items as $index ) {
				if (is_numeric ( $index )) {
					self::setStatus ( $index, $status ); 
				}
			}
			return true;
		}
		return false;
	}	
	
	
	/**
	 * dnsGrid
	 * Get the dns zone information.
	 * @return array
	 */
	public static function dnsGrid() {
		$request = Zend_Controller_Front::getInstance ()->getRequest ();
		if (isset ( $request->id ) && is_numeric ( $request->id )) {
			$zones = new Dns_Zones ( );
			$records = $zones->findAllbyDomain ( $request->id, 'subdomain, zt.zone, target', true );
			if (isset ( $records [0] )) {
				return array ('records' => $records, 'delete' => array ('controller' => 'domains', 'action' => 'deletednszone' ) );
			}
		}
	}
		

	/**
	 * setdnszone
	 * Set the DNS records using the server information written on the DB 
	 * @return void
	 */
	public static function setdnszone($items) {
		try {
			
			$ispid = Isp::getActiveISPID();
			if (is_array ( $items )) {
				foreach ( $items as $domain_id ) {
					if (is_numeric ( $domain_id )) {
						$domain = self::find ( $domain_id, null, true );
						if (is_array ( $domain )) {
							$domainame = $domain [0] ['domain'] . "." . strtolower ( $domain [0] ['tld'] );
							DomainsTasks::AddTask($domainame, 'updatednszone');
						} else {
							return false;
						}
					}
				}
				return true;
			}
			return false;
		} catch ( SoapFault $e ) {
			$this->_helper->redirector ( 'edit', 'domains', 'admin', array ('id' => $domain_id, 'mex' => $e->getMessage (), 'status' => 'error' ) );
		}
	}


	/**
	 * setAutorenew
	 * Set the domain autorenew status
	 * @param integer $domainId
	 * @param boolean $value
	 */
	public static function setAutorenew($domainId, $value=true) {
	    $domains    = self::find($domainId);
        if( empty($domains)  ){
            return false;
        }
        
		return Doctrine_Query::create ()
						->update ( 'Domains d' )
						->set ( 'd.autorenew', '?', $value )
						->where ( "domain_id = ?", $domainId )
						->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}

	/**
	 * setAuthInfo
	 * Set the authinfocode code of the domain 
	 * @param integer $domainId
	 * @param string $authinfocode
	 * @param boolean 
	 */
	public static function setAuthInfo($domainId, $authinfocode) {
        $domains    = self::find($domainId);
        if( empty($domains)  ){
            return false;
        }
		
		return Doctrine_Query::create ()
						->update ( 'Domains d' )
						->set ( 'd.authinfocode', '?', $authinfocode )
						->where ( "domain_id = ?", $domainId )
						->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}

	/**
	 * updateDomain
	 * Update the domain with more information like date of creation etc...
	 * @param $domain_id
	 * @param $domaininfo
	 * @param $customer
	 * @return [boolean, Doctrine_Record]
	 */
	public static function updateDomain($domain_id, $domaininfo) {
        $domains    = self::find($domain_id);
        if( empty($domains)  ){
            return false;
        }	    
        
		// Save domain information inside the db
		if (! empty ( $domaininfo ['creation'] )) {
			
			$domain = Doctrine::getTable ( 'Domains' )->find ( $domain_id );
			
			$domain->creation_date = $domaininfo ['creation'];
			$domain->modification_date = $domaininfo ['modification'];
			$domain->expiring_date = $domaininfo ['expiration'];
			$domain->authinfocode = $domaininfo ['authinfocode'];

			if ($domain->trySave ()) {
				return $domain;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	/*
	 * Create all the domains included within an order 
	 */
	public static function CreateDomainsbyOrderID($orderid) {
		$domains = array();
		
		if(is_numeric($orderid)){
			
			// Get the order information
			$order = Orders::getAllInfo ( $orderid, "o.*, oi.*", true );
			
			// Get the order items
			if (!empty($order[0] ['OrdersItems'])) {
				
				// Get all the order products
				$products = $order[0] ['OrdersItems'];
				
				if (is_array ( $products ) && count ( $products ) > 0) {
					
					// For each product in order
					foreach ( $products as $product ) {
						
						// If it is a domain product
						if (is_numeric($product ['tld_id'])) {
							
							// Get the additional parameters in the order item record
							$parameters = ! empty ( $product ['parameters'] ) ? json_decode ( $product ['parameters'], true ) : array ();
							
							// If the parameters are present go on...
							if (count ( $parameters ) > 0) {

								// Get the Authcode for the domains that need the transfer action  
								$authcode = !empty($parameters['authcode']) ? $parameters['authcode'] : "";
							
								// Create the domain found in the order
								$domainID = self::Create ( $parameters ['domain'], $product ['tld_id'], $order [0]['customer_id'], $product ['detail_id'], 6, $authcode );
								
								// Attach the domain to the order
								OrdersItemsDomains::addDomain($orderid, $domainID);

								// Prepare the result domain ids list
								$domains[] = $domainID;
							}
						}
					}
				}
			}
		}
		return $domains;
	}

	/*
	 * create a domain
	 * $statusid = 6 // Processing
	 * @return integer
	 */
	public static function Create($domain, $tld_id, $customerid, $orderitemid, $statusid="", $authcode=""){
		$thedomain = new Domains();
		
		if(!is_numeric($statusid)){
			$statusid = Statuses::id("processing", "domains");
		}
		
		list($domain, $tld) = explode ( '.', $domain );
		
		$retval = self::findByDomainName($domain, $tld, null, true);
		
		$date_end = Shineisp_Commons_Utilities::add_date ( date ( 'd-m-Y' ), null, 12 ); 
		$tldInfo = DomainsTlds::getbyID($tld_id);
		
		if(count($retval) == 0){
			$thedomain->domain = $domain;
			$thedomain->tld = $tldInfo['WhoisServers']['tld'];
			$thedomain->tld_id = $tldInfo['tld_id'];
			$thedomain->customer_id = $customerid;
			$thedomain->orderitem_id = $orderitemid;
			$thedomain->status_id = $statusid;
			$thedomain->registrars_id = Isp::getActiveISPID();
			$thedomain->creation_date = date('Y-m-d');
			$thedomain->expiring_date = Shineisp_Commons_Utilities::formatDateIn($date_end);  
			$thedomain->modification_date = date('Y-m-d');
			$thedomain->authinfocode = $authcode;
			$thedomain->autorenew = true;
			$thedomain->save();
			return $thedomain->getIncremented();	
		}else{
			return $retval[0]['domain_id'];
		}
	}	
	
	/**
	 * getDomainIDbyName
	 * Get the domain id starting from the domain name
	 * @param unknown_type $domain
	 */
	public static function getDomainIDbyName($domainname){
		
		// Get the domain and tld extension from the domain name
		$arrdomain = Shineisp_Commons_Utilities::getTld($domainname);
		
		if(!empty($arrdomain[0]) && !empty($arrdomain[1])){
			$domain =  $arrdomain[0]; 
			$tld = $arrdomain[1]; 
		}else{
			throw new Exception('It was not possible get the tld extension from the domain name', "666");
		}

		 // Get the code of the tld domain
		 $tld = DomainsTlds::getbyTld($tld);
		 if(empty($tld)){
		 	return false;
		 }
		 
		 $record = Doctrine_Query::create ()
		 					->select ( "domain_id")
		 					->from('Domains d')
		 					->leftJoin ( 'd.Customers c' )
		 					->where('domain = ?', $domain)
		 					->andWhere('tld_id = ?', $tld['tld_id'])
                            ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
		 					->execute(null, Doctrine::HYDRATE_ARRAY);
		 					
 					if(!empty($record[0]['domain_id'])){
 						return $record[0]['domain_id'];
 					}else{
 						return false;
 					}
	}	
	
	/**
	 * getRegistrarsIDbyName
	 * Get the domain id starting from the domain name
	 * @param unknown_type $domain
	 */
	public static function getRegistrarsIDbyName($domainname){
		 
		 // Get the domain and tld extension from the domain name
		$arrdomain = Shineisp_Commons_Utilities::getTld($domainname);
		
		if(!empty($arrdomain[0]) && !empty($arrdomain[1])){
			$domain =  $arrdomain[0]; 
			$tld = $arrdomain[1]; 
		}else{
			throw new Exception('It was not possible get the tld extension from the domain name', "666");
		}
		 
		$record = Doctrine_Query::create ()
		 					->select ( "domain_id, registrars_id")
		 					->from('Domains d')
		 					->leftJoin ( 'd.Customers c' )
		 					->where('domain = ?', $domain)
		 					->andWhere('tld = ?', $tld)
                            ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
		 					->execute(null, Doctrine::HYDRATE_ARRAY);
		 					
 					if(!empty($record[0]['registrars_id'])){
 						return $record[0]['registrars_id'];
 					}else{
 						return false;
 					}
	}	
	
	/**
     * getExpiringDomainsByDays
     * Get the list of all the expiring domains  
     * @param $days
     * @param $status [default: 4 is active]
     * @param $autorenew [0, 1]
     * @return array()
     */
    public static function getExpiringDomainsByDays($days=7, $status = "", $autorenew=null) {
    	
        if(!is_numeric($status)){
			$status = Statuses::id("active", "domains");
		}
		    	
        $dq = Doctrine_Query::create ()->select ( "domain_id, 
											        CONCAT(domain, '.', ws.tld) as domain, 
											        d.autorenew as renew, 
											        oi.parameters as parameters, 
											        d.expiring_date as expiringdate, 
											        d.customer_id as customer_id, 
											        Concat(c.firstname, ' ', c.lastname, ' ', c.company) as fullname, 
											        c.email as email, 
											        c.language_id as language_id, 
											        c.parent_id as reseller,
											        DATEDIFF(d.expiring_date, CURRENT_DATE) as days
        									" )
                                           ->from ( 'Domains d' )
                                           ->leftJoin ( 'd.Customers c' )
                                           ->leftJoin ( 'd.OrdersItems oi' )
                                           ->leftJoin ( 'd.DomainsTlds dt' )
                                           ->leftJoin ( 'dt.WhoisServers ws' )
                                           ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
                                           ->orderBy ( 'd.expiring_date asc, d.customer_id' );
        if(is_numeric($days)){
        	$dq->andWhere ( 'DATEDIFF(d.expiring_date, CURRENT_DATE) = ?', $days );
        }
        
        if(is_numeric($status)){
        	$dq->andWhere ( 'd.status_id = ?', $status ); // status 4 is active. Check the database statuses table
        }
        
        if(is_numeric($autorenew)){
        	$dq->andWhere ( 'd.autorenew = ?', $autorenew);
        }
        
        $auth = Zend_Auth::getInstance ();
        if( $auth->hasIdentity () ) {
            $logged_user= $auth->getIdentity ();
            $dq->whereIn( "c.isp_id", $logged_user['isp_id']);
        }        
                                           
        $records = $dq->execute ( null, Doctrine::HYDRATE_ARRAY );

        for ($i=0; $i< count($records); $i++){
        	$records[$i]['oldorders'] = OrdersItemsDomains::findOrdersByDomainID($records[$i]['domain_id']);
        }
       
        return $records;
    }
	
	
	/**
     * getExpiringDomainsByRange
     * Get the list of all the expiring domains by a days range
     * @param integer $from 
     * @param integer $to 
     * @param $status [default: 4 is active]
     * @param $autorenew [0, 1]
     * @return array()
     */
    public static function getExpiringDomainsByRange($from, $to, $status = "", $autorenew=null) {
    	
    	if(!is_numeric($status)){
			$status = Statuses::id("active", "domains");
		}
    	
        $dq = Doctrine_Query::create ()->select ( "domain_id, 
											        CONCAT(domain, '.', ws.tld) as domain, 
											        oi.detail_id as detail_id, 
											        d.autorenew as renew, 
											        DATE_FORMAT(d.expiring_date, '%d/%m/%Y') as expiringdate,
											        d.customer_id as customer_id, 
											        Concat(c.firstname, ' ', c.lastname, ' ', c.company) as fullname, 
											        c.email as email, 
											        c.language_id as language_id, 
											        c.parent_id as reseller,
											        DATEDIFF(d.expiring_date, CURRENT_DATE) as days" )
                                           ->from ( 'Domains d' )
                                           ->leftJoin ( 'd.Customers c' )
                                           ->leftJoin ( 'd.OrdersItems oi' )
                                           ->leftJoin ( 'd.DomainsTlds dt' )
                                           ->leftJoin ( 'dt.WhoisServers ws' )
                                           ->orderBy ( 'd.expiring_date asc, d.customer_id' )
                                           ->where ( 'DATEDIFF(d.expiring_date, CURRENT_DATE) >= ? and DATEDIFF(d.expiring_date, CURRENT_DATE) <= ?', array($from, $to) )
                                           ->addWhere( "c.isp_id = ?", Isp::getCurrentId() );
        
        if(is_numeric($status)){
        	$dq->andWhere ( 'd.status_id = ?', $status ); // status 4 is active. Check the database statuses table
        }
        
        if(is_numeric($autorenew)){
        	$dq->andWhere ( 'd.autorenew = ?', $autorenew);
        }
                                           
        return $dq->execute ( null, Doctrine::HYDRATE_ARRAY );
    }
	
	/**
     * getExpiringDomains
     * Get the list of the domain next the expiration date
     * @param $customerID
     * @return Void
     */
    public static function getExpiringDomains($customerID=null, $from=null, $to=null, $limit=null) {
		
    	if ( empty($from) || !is_numeric($from) ) {
			// Try to read from DB
			$from = Settings::findbyParam('domains_show_before_expire_days');
		}
		
		if ( empty($to) || !is_numeric($to) ) {
			// Try to read from DB
			$to = Settings::findbyParam('domains_show_after_expire_days');
		}

		$from = is_numeric($from) ? intval($from)     : 31;
		$to   = is_numeric($to)   ? intval($to) * -1  : -2; // force a negative value
			
		$fields = "d.domain_id, CONCAT(d.domain, '.', d.tld) as domains, 
		       DATE_FORMAT(d.expiring_date, '%d/%m/%Y') as expiringdate, 
		       DATEDIFF(expiring_date, CURRENT_DATE) as days,
		       IF(d.autorenew = 1, 'YES', 'NO') as renew";
		
		$dq = Doctrine_Query::create ()
		                     ->select ( $fields )
		                     ->from ( 'Domains d' )
		                     ->leftjoin ( 'd.OrdersItems oi' )
		                     ->leftjoin ( 'd.Statuses s' )
                             ->leftJoin ( 'd.Customers c' )
		                     ->where ( 'DATEDIFF(expiring_date, CURRENT_DATE) <= ' . $from )
		                     ->addWhere ( 'DATEDIFF(expiring_date, CURRENT_DATE) >= ' . $to )
                             ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
		                     ->orderBy ( 'd.expiring_date asc' );
		
		if(is_numeric($customerID)){
			$dq->addWhere ( 'customer_id = ?', $customerID );
		}
		
		if(is_numeric($limit)){
			$dq->limit($limit);
		}
		
		$result = $dq->execute ( null, Doctrine::HYDRATE_ARRAY );
				
		return $result;
    }
	
	/**
	 * setStatus
	 * Set a record with a status
	 * @param $id, $status
	 * @return Void
	 */
	public static function setStatus($id, $status) {
		$dq = Doctrine_Query::create ()->update ( 'Domains d' )->set ( 'd.status_id', '?', $status )->where ( "domain_id = ?", $id );
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
     * TldSummary
     * Summary of all domains per customer
     * @param integer $status_id
     * @return array
     */
	public static function domains_per_customers($status_id=4) {
		try {
			$dq = Doctrine_Query::create ()
			->select ( "d.customer_id, count(*) as total, CONCAT(c.lastname, ' ', c.firstname, ' ', c.company) as Fullname" )
			->from ( 'Domains d' )
			->where('status_id = ?', $status_id)
			->leftJoin ( 'd.Customers c' )
            ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
			->groupBy ( 'c.customer_id' )
			->orderBy ( 'count(*) desc' );
			
			return $dq->execute ( null, Doctrine::HYDRATE_ARRAY );
		
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}
	
	/**
	 * setExpirationDate
	 * Set a domain with a new expiration date
	 * @param $id, $newdate
	 * @return Void
	 */
	public static function setExpirationDate($id, $newdate) {
		$dq = Doctrine_Query::create ()->update ( 'Domains d' )->set ( 'd.expiring_date', '?', $newdate )->where ( "domain_id = ?", $id );
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * findbyUserId
	 * Get a record by ID
	 * @param $userid
	 * @return Array
	 */
	public static function findbyUserId($userid, $fields = "*", $orderby = "d.domain asc") {
		$dq = Doctrine_Query::create ()->select ( $fields )
		->from ( 'Domains d' )
		->leftJoin ( 'd.DomainsTlds dt' )
		->leftJoin ( 'dt.WhoisServers ws' )
		->leftJoin ( 'd.Customers c' )
		->leftJoin ( 'd.Statuses s' )
		->where ( "d.customer_id = ? OR c.parent_id = ?", array($userid, $userid) )
        ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
		->orderBy ( $orderby );
		
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * getSummary
	 * Get the summary of the tld registered
	 * 
	 * @return Array
	 */
	public static function getSummary($customer_id = null) {
		// Only Active domain
		$dq = Doctrine_Query::create ()
					->select ( "Count(*) as total, 
								tld, 
								(Count(0) * p.registration_cost) as costs, 
								(Count(*) * p.registration_price) as earnings" )
					->from ( 'Domains d' )
					->leftJoin ( 'd.DomainsTlds p' )
                    ->leftJoin ( 'd.Customers c' )
					->where ( 'd.status_id = ?', Statuses::id("active", "domains") )
					->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
					->addGroupBy ( 'tld' )
					->orderBy ( 'Count(*) desc' );
		
		if (is_numeric ( $customer_id )) {
			$dq->andWhere ( 'customer_id = ?', $customer_id );
		}
		$domains = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $domains;
	}
	
	/**
	 * isOwner
	 * Check if the owner of the domain is correct
	 * @param integer $domainID
	 * @param integer $CustomerID
	 */
	public static function isOwner($domainID, $CustomerID) {
        
		$record = Doctrine_Query::create ()
					->select ( "Count(*) as total")
					->from ( 'Domains d' )
                    ->leftJoin ( 'd.Customers c' )
					->where ( 'd.domain_id = ?', $domainID )
					->addWhere ( 'd.customer_id = ?', $CustomerID )
					->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
					->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		return ($record[0]['total'] > 0) ? true : false;
	}
	
    /**
     * isAvailable
     * Check the domain if available
     * @return boolean
     */
    public static function isAvailable($domain) {
    	if(!empty($domain)){
    		list($name, $tld) = explode(".", $domain);
    		$tldInfo = DomainsTlds::getbyTld($tld);
    		if(!empty($tldInfo['Registrars'])){
    			$registrant_class = $tldInfo['Registrars']['class'];
    			$reg = new $registrant_class ( );
				if($reg->checkDomain($domain)){
					return true;
				}else{
					return false;
				}
    		}
    	}
        return false;
    }
	
	/**
	 * getSummaryPerMonth
	 * Get the summary of the tld registered per month
	 * @return Array
	 */
	public static function getSummaryPerMonth($customer_id = null) {
		
		$dq = Doctrine_Query::create ()
					->select ( "Count(*) as total, Month(expiring_date) as month_number, Monthname(expiring_date) as month" )
					->from ( 'Domains d' )
                    ->leftJoin ( 'd.Customers c' )
					->where ( 'expiring_date is not null' )
                    ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
					->andWhere ( 'status_id = ?', Statuses::id("active", "domains") )
					->addGroupBy ( 'MonthName(expiring_date)' )
					->orderBy ( 'Month(expiring_date)' );
				

		if (is_numeric ( $customer_id )) {
			$dq->andWhere ( 'd.customer_id = ?', $customer_id );
		}
		
		$domains = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $domains;
	}
	
	/**
	 * getAutorenewSummaryPerMonth
	 * Get the summary of the tld where the autorenew has been set as true
	 * @return Array
	 */
	public static function getAutorenewSummaryPerMonth($customer_id = null) {

		$dq = Doctrine_Query::create ()
					->select ( "d.domain_id, Count(*) as total, Month(expiring_date) as monthid, Monthname(expiring_date) as month" )
					->from ( 'Domains d' )
					->leftJoin ( 'd.Customers c' )
					->where ( 'expiring_date is not null' )
					->andWhere ( 'd.autorenew = ?', true)
                    ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
					->addGroupBy ( 'MonthName(expiring_date)' )
					->orderBy ( 'Month(expiring_date)' );
							
		if (is_numeric ( $customer_id )) {
			$dq->andWhere ( 'd.customer_id = ?', $customer_id );
		}
		
		$domains = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $domains;
	}
	
	/**
	 * Get a group of records by ID
	 * @param string $fields
	 * @param array $items
	 * @param integer $locale
	 * @return array
	 */
	public static function get_domains($items, $fields = "*", $orderby="domain", $language_id=null) {
		if ( $language_id === null ) {
			$Session = new Zend_Session_Namespace ( 'Admin' );
			$language_id = $Session->langid;
		}		
		return Doctrine_Query::create ()->select ( $fields )
										->from ( 'Domains d' )
										->leftJoin ( 'd.DomainsTlds dt' )
										->leftJoin ( 'dt.WhoisServers ws' )
										->leftJoin ( 'd.Customers c' )
										->leftJoin ( 'd.Products p' )
										->leftJoin ( 'd.Statuses s' )
										->leftJoin ( "p.ProductsData pd WITH pd.language_id = ".intval($language_id) )
										->whereIn ( "d.domain_id", $items )
                                        ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
										->orderBy($orderby)
										->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * Get all the active domains
	 * @return array
	 */
	public static function get_domains_active() {
		
		return Doctrine_Query::create ()->select ( "domain_id, dt.tld_id as tldid, CONCAT(domain, '.', ws.tld) as domain" )
										->from ( 'Domains d' )
										->leftJoin ( 'd.DomainsTlds dt' )
										->leftJoin ( 'dt.WhoisServers ws' )
										->leftJoin ( 'd.Customers c' )
										->leftJoin ( 'd.Products p' )
										->leftJoin ( 'd.Statuses s' )
										->leftJoin ( "p.ProductsData pd WITH pd.language_id = 1" )
										->whereIn ( "d.status_id", Statuses::id('active', 'Domains') )
                                        ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
										->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * Check the dns of the active domains
	 * @return array
	 */
	public static function check_dns() {
		$external_domains = array();
		
		// Get all the active domains
		$domains = self::get_domains_active();
		
		// Get the webserver information
		$webserver = Servers::getWebserver();
		
		// For each domain do ...
		foreach ($domains as $domain){
			
			// Get the DNS information about the domain
			$records = dns_get_record($domain['domain'], DNS_A + DNS_NS);
			
			// For each DNS records found
			foreach ($records as $record){
				if(!empty($record['type']) && $record['type'] == "A"){
					if($record['ip'] != $webserver['ip']){
						$external_domains[] = array_merge($domain, $record);
					}
				}
			}
		}
		Zend_Debug::dump($external_domains);
		return $external_domains;
	}
	
	/**
	 * Get the domain name by id
	 * @param $id
	 * @return string
	 */
	public static function getDomainName($id) {
		try {
			$domainame = "";
			$dq = Doctrine_Query::create ()
										->select('d.domain as name, ws.tld as tld')
										->from ( 'Domains d' )
										->leftJoin ( 'd.DomainsTlds dt' )
										->leftJoin ( 'dt.WhoisServers ws' )
                                        ->leftJoin ( 'd.Customers c' )
										->where ( "domain_id = ?", $id )
                                        ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
										->limit ( 1 );
				
			$record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY  );
			
			if(!empty($record)){
				$domainame = $record[0]['name'] . "." . $record[0]['tld'];
			}
			
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
		return $domainame;
	}
	
	/**
	 * getAllInfo
	 * Get all data from domain ID
	 * @param $id
	 * @return Doctrine Record / Array
	 */
	public static function getAllInfo($id, $customer_id = "", $fields = "*", $retarray = false, $language_id = null) {
		if ( $language_id === null ) {
			$Session = new Zend_Session_Namespace ( 'Admin' );
			$language_id = $Session->langid;
		}		
		try {
			$dq = Doctrine_Query::create ()
			     ->from ( 'Domains d' )
			     ->leftJoin ( 'd.Customers c' )
			     ->leftJoin ( 'd.DomainsTlds dt' )
			     ->leftJoin ( 'dt.WhoisServers ws' )
			     ->leftJoin ( 'd.TagsConnections tgc' )
			     ->leftJoin ( 'tgc.Tags tg' )
			     ->leftJoin ( 'd.Products p' )
			     ->leftJoin ( "p.ProductsData pd WITH pd.language_id = ".intval($language_id) )
			     ->leftJoin ( 'p.Taxes t' )
			     ->leftJoin ( 'd.OrdersItems oi' )
			     ->leftJoin ( 'd.Statuses s' )
			     ->leftJoin ( 'd.Registrars r' )
			     ->leftJoin ( 'c.Legalforms l' )
			     ->leftJoin ( 'c.Statuses st' )
			     ->where ( "domain_id = $id" )
                 ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
			     ->limit ( 1 );
			
			if($fields != "*"){
				$dq->select ( $fields );
			}
			
			if ($customer_id) {
				$dq->addWhere ( "c.customer_id = ? OR c.parent_id = ?", array($customer_id, $customer_id) );
			}
			
			$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
			$domain = $dq->execute ( array (), $retarray );
			
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
		return $domain;
	}
	
	
	/**
	 * saveDomainZones
	 * Save the Zone DNS in the database in order to avoid to request every time the information
	 * by the SOAP service.
	 * @param $zones
	 * @param $domainame
	 * @param $domain_id
	 * @return unknown_type
	 */
	public static function saveDomainZones($zones, $domainame, $domain_id) {
		Doctrine::getTable ( 'Dns_Zones' )->findBy ( 'domain_id', $domain_id )->delete ();
		$DnsZones = new Doctrine_Collection ( 'Dns_Zones' );
		if (! is_string ( $DnsZones )) {
			$i = 0;
			foreach ( $zones as $zone ) {
				$zonetype = Doctrine::getTable ( 'Dns_Zones_Types' )->findBy ( 'zone', $zone ['fieldtype'], Doctrine::HYDRATE_ARRAY );
				$DnsZones [$i]->domain_id = $domain_id;
				$DnsZones [$i]->subdomain = $zone ['subdomain'];
				$DnsZones [$i]->type_id = ! empty ( $zonetype [0] ['type_id'] ) ? $zonetype [0] ['type_id'] : null;
				$DnsZones [$i]->target = $zone ['target'];
				$DnsZones [$i]->updating_date = date ( 'Y-m-d H:i:s' );
				$i ++;
			}
			$DnsZones->save ();
		}
	}
	
	
	/**
	 * Services
	 * Get all the services attached to the domain.
	 * @return array
	 */
	public static function Services($domainID) {
		$items = array ();
		if (isset ( $domainID ) && is_numeric ( $domainID )) {
			$services = OrdersItemsDomains::find_by_domain_id ( $domainID, "oid.relationship_id,oi.detail_id, p.product_id, pd.name, DATE_FORMAT(oi.date_start, '%d/%m/%Y') as date_start, DATE_FORMAT(oi.date_end, '%d/%m/%Y') as date_end", true );
			if (isset ( $services [0] )) {
				$i = 0;
				foreach ( $services as $service ) {
					$items [$i] ['service_id'] = $service ['OrdersItems'] ['detail_id'];
					$items [$i] ['fromdate'] = $service ['OrdersItems'] ['date_start'];
					$items [$i] ['todate'] = $service ['OrdersItems'] ['date_end'];
					$items [$i] ['service'] = $service ['OrdersItems'] ['Products'] ['ProductsData'] [0] ['name'];
					$i ++;
				}
				return $items; 
			}
		}
	}
	
	/**
	 * Orders
	 * Get all the orders where the domain is attached.
	 * @return array
	 */
	public static function Orders($domainID) {
		$items = array ();
		if (isset ( $domainID) && is_numeric ( $domainID)) {
			$orders = OrdersItemsDomains::findOrdersByDomainID ( $domainID, "oi.description as description, s.status as status, oid.relationship_id, oi.order_id as orderid, DATE_FORMAT(o.order_date, '%d/%m/%Y') as orderdate", true );
			if (isset ( $orders [0] )) {
				$i = 0;
				foreach ( $orders as $order ) {
					$items [$i] ['id'] = $order ['orderid'];
					$items [$i] ['order'] = $order ['orderdate'];
					$items [$i] ['status'] = $order ['status'];
					$items [$i] ['description'] = $order ['description'];
					$i ++;
				}
				return $items; 
			}
		}
	}	

	/**
	 * ownerGrid
	 * Get the customer/owner information.
	 * @return array
	 */
	public static function ownerGrid($domain_id) {
		if (isset ( $domain_id ) && is_numeric ( $domain_id )) {
			$domain = self::find ( $domain_id, '*', true );
			if (! empty ( $domain [0] ['customer_id'] )) {
				$customer = Customers::get_by_customerid( $domain [0] ['customer_id'], 'company, firstname, lastname, email' );
			}
			if (isset ( $customer [0] )) {
				return array ('records' => $customer, 'editpage' => 'customers' );
			}
		}
	}	
	
	/*
	 * saveDnsZones
	 * Save the dns zone record posted
	 */
	public static function saveDnsZones($domainid, $data) {
		$zone = new Dns_Zones ( );
		if (! empty ( $data ['target'] ) && is_numeric($domainid)) {
			$zone->subdomain = $data ['subdomain'];
			$zone->target = $data ['target'];
			$zone->type_id = $data ['zone'];
			$zone->domain_id = $domainid;
			$zone->save ();
			return true;
		}
		return false;
	}

	
	/**
	 * saveCustomer
	 * Save the owner of the domain when we download the information using the Soap service
	 * @param $domaininfo
	 * @param $owner
	 * @return [boolean, Doctrine_Record]
	 */
	public static function saveCustomer($domaininfo, $owner) {
		
		// Check the existence of the record
		$arrCustomer = CustomersDomainsRegistrars::getAllInfo ( $domaininfo ['nichandle'], "customer_id as customerid" );
		
		if (! empty ( $arrCustomer ) && count ( $arrCustomer ) > 0) {
			$customer = Doctrine::getTable ( 'Customers' )->find ( $arrCustomer ['customerid'] );
		} else {
			$customer = new Customers ( );
		}
		
		// Add the Customer
		$customer->firstname = $owner ['firstname'];
		$customer->lastname = $owner ['lastname'];
		$customer->email = $owner ['email'];
		$customer->vat = $owner ['vat'];
		$customer->company = $owner ['organisation'];
		$customer->legalform_id = ! empty ( $owner ['legalform'] ) ? Legalforms::getIDbyName ( $owner ['legalform'] ) : null;
		$customer->getLast ()->toArray ();
		if ($customer->trySave ()) {
			return $customer;
		} else {
			return false;
		}
	}

	
	/**
	 * Get the domain name using its id
	 * @param $id
	 * @return string
	 */
	public static function getName($id) {
		$data = Doctrine_Query::create ()
		                      ->from ( 'Domains d' )
                              ->leftJoin ( 'd.Customers c' )
		                      ->leftJoin ( 'd.DomainsTlds tlds' )
		                      ->leftJoin ( 'tlds.WhoisServers ws' )
		                      ->where ( "d.domain_id = ?", $id )
                              ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
		                      ->limit ( 1 )
		                      ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		if(!empty($data[0] ['DomainsTlds']['WhoisServers']['tld'])){
			return $data[0]['domain'] . "." .  $data[0] ['DomainsTlds']['WhoisServers']['tld'];
		}
		
		return null;
	}

	
	/**
	 * find
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id, $fields="") {
		$dq = Doctrine_Query::create ()
		                      ->from ( 'Domains d' )
		                      ->leftJoin ( 'd.DomainsTlds tlds' )
		                      ->leftJoin ( 'tlds.WhoisServers ws' )
		                      ->leftJoin ( 'd.Customers c' )
		                      ->leftJoin ( 'd.CustomersDomainsRegistrars cdr' )
		                      ->leftJoin ( 'd.Statuses s' )
		                      ->leftJoin ( 'd.OrdersItems oi' )
		                      ->where ( "d.domain_id = ?", $id )
                              ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
		                      ->limit ( 1 );
		
		if(!empty($fields)){
			$dq->select ( $fields );
		}                      
        
		$domain = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $domain;
	}
	
	/**
	 * findProduct
	 * Find the product information by the id of the domain 
	 * @param integer $id
	 * @param string $fields
	 */
	public static function findProduct($id, $fields = "*") {
		$product = Doctrine_Query::create ()
							  ->select ( $fields )
		                      ->from ( 'Domains d' )
                              ->leftJoin ( 'd.Customers c' )
		                      ->leftJoin ( 'd.Products p' )
		                      ->where ( "d.domain_id = ?", $id )
                              ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
		                      ->limit ( 1 )
		                      ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		return $product;
	}
	
	
	/**
	 * findbydomainname
	 * Get a record by domain name
	 * @param $domain_name, $tld, $fields="*", $retarray=false
	 * @return Doctrine Record
	 */
	public static function findByDomainName($domain_name, $tld, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Domains d' )
										->leftJoin ( 'd.Customers c' )
										->leftJoin ( 'd.DomainsTlds dt' )
										->leftJoin ( 'd.CustomersDomainsRegistrars cdr' )
										->leftJoin ( 'dt.WhoisServers ws' )
										->where ( "d.domain = ? and ws.tld = ?", array ($domain_name, $tld ) )
								        ->addWhere( "c.isp_id = ?", Isp::getCurrentId() );
		
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$domain = $dq->execute ( array (), $retarray );
		
		return $domain;
	}
	
	/**
	 * findByLikeDomainName
	 * Get a list of records by domain name
	 * @param $domain_name, $fields="*", $retarray=false
	 * @return Doctrine Record
	 */
	public static function findByLikeDomainName($domain_name, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )
									   ->from ( 'Domains d' )
                                       ->leftJoin ( 'd.Customers c' )
									   ->leftJoin ( 'd.DomainsTlds dt' )
									   ->leftJoin ( 'dt.WhoisServers ws' )
									   ->where ( "domain like ?", '%' . $domain_name . '%' )
                                       ->addWhere( "c.isp_id = ?", Isp::getCurrentId() );
									   
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$domain = $dq->execute ( array (), $retarray );
		return $domain;
	}
	
	/**
	 * Get all the domains records for the select html object 
	 * 
	 * 
	 * @param $empty
	 * @param $customer_id [optional]
	 * @return Array
	 */
	public static function getList($empty = false, $customer_id="") {
		$items = array ();
		$registry = Shineisp_Registry::getInstance ();
        
		$dq = Doctrine_Query::create ()->from ( 'Domains d' )
										->leftJoin('d.DomainsTlds dt')
										->leftJoin('dt.WhoisServers ws')
                                        ->leftJoin ( 'd.Customers c' )
                                        ->where( "c.isp_id = ?", Isp::getCurrentId() );

        if (is_numeric ( $customer_id )) {
        	$dq->where ( 'customer_id = ?', $customer_id );
        }
		
        $dq->orderBy ( 'd.domain' );
		$records = $dq->execute ( array (), Doctrine::HYDRATE_ARRAY );
		if ($empty) {
			$items [] = "";
		}
		
		foreach ( $records as $c ) {
			$items [$c ['domain_id']] = $c ['domain'] . "." . $c ['DomainsTlds']['WhoisServers']['tld'];
		}
		
		return $items;
	}
	
	
	/**
	 * Delete all the domains by customer_id
	 * @param $customerid
	 * @return boolean
	 */
	public static function delete_by_customerid($customerid) {
		if(is_numeric($customerid)){
			return Doctrine_Query::create ()->delete('Domains')->where('customer_id = ?', $customerid)->execute();
		}
		return false;
	}
	
	/**
	 * Delete the domains by its id
	 * @param $customerid
	 * @return boolean
	 */
	public static function delete_by_id($domain_id) {
		if(is_numeric($domain_id)){
		    $item = self::find($domain_id);
            if( empty($item) ) {
                return false;
            }
            
			return Doctrine_Query::create ()->delete('Domains')->where('domain_id = ?', $domain_id)->execute();
		}
		return false;
	}
	
	/**
	 * Get all the domains not included in a order items
	 * 
	 * 
	 * @param $detail_id
	 * @return array
	 */
	public static function getFreeOrderDomainsList($detail_id) {
		$items = array ();
		try {
			
			$DomainsInOrders = OrdersItemsDomains::getList ( $detail_id );
			if (count ( $DomainsInOrders ) > 0) {
				$DomainsInOrders = array_keys ( $DomainsInOrders );
			}
			
			$dq = Doctrine_Query::create ()->select ( 'd.domain_id, d.domain as domain, ws.tld as tld' )
											->from ( 'Domains d' )
											->leftJoin('d.DomainsTlds dt')
											->leftJoin('dt.WhoisServers ws')
											->leftJoin ( 'd.OrdersItemsDomains oid ' )
                                            ->leftJoin ( 'd.Customers c' )
											->whereIn ( 'd.domain_id', $DomainsInOrders, true )
                                            ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
											->orderBy ( 'ws.tld, d.domain' );
			$domains = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			
			foreach ( $domains as $domain ) {
				$items [$domain ['domain_id']] = $domain ['domain'] . "." . $domain ['tld'];
			}
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
		
		return $items;
	}
	
	

	/**
	 * Send the email as renew confirm. 
	 * 
	 * 
	 * @param $domain_id
	 * @return void
	 */	
	public static function sendRenewConfirm($domain_id){
		if(is_numeric($domain_id)){
			$domain = self::getAllInfo($domain_id, null, "domain_id, customer_id, CONCAT(c.firstname, ' ', c.lastname) as fullname, c.language_id as language_id, c.email as email, CONCAT(d.domain, '.', d.tld) as domain", true);
			
			if(!empty($domain[0])){
				Shineisp_Commons_Utilities::sendEmailTemplate($domain[0] ['email'], 'domain_renewed', array(
					':shineisp:' => $domain
				), null, null, null, null, $domain['language_id']);
			}
		}
	}

	/**
	 * sendCreateDomainConfirm
	 * Send the email as renew confirm. 
	 * @param $domain_id
	 * @return void
	 */	
	public static function sendCreateConfirm($domain_id){
		if(is_numeric($domain_id)){
			$domain = self::getAllInfo($domain_id, null, "domain_id, customer_id, CONCAT(c.firstname, ' ', c.lastname) as fullname, c.language_id as language_id, c.email as email, CONCAT(d.domain, '.', d.tld) as domain", true);
			
			if(!empty($domain[0])){
				Shineisp_Commons_Utilities::sendEmailTemplate($domain[0] ['email'], 'domain_created', array(
					':shineisp:' => $domain
				), null, null, null, null, $customer['language_id']);
			}
		}
	}
	

	/*
	 * tldSummaryPerMonth
	 * Full list of tld expiring month by month
	 */
	public static function tldSummaryPerMonth() {
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		$str = "";
		$summary = self::getSummaryPerMonth ();
		
		if (isset ( $summary [0] )) {
			
			foreach ( $summary as $item ) {
				$totals [] = $item ['total'];
				$months [] = substr ( $item ['month'], 0, 3 );
			}
			
			$totals = implode ( ",", $totals );
			$months = implode ( "|", $months );
			
			usort ( $summary, array ('Domains', "cmp" ) );
			$maxtotalval = end ( $summary );
			$str = "http://chart.apis.google.com/chart?
							cht=bvs
							&chtt=" . $translator->translate ( 'Domain Summary per Month' ) . "
							&chts=4d89f9,18
							&chs=500x300
							&chd=t:" . $totals . "
							&chxt=x&chxl=0:|" . $months . "
							&chco=4d89f9,c6d9fd
							&chds=0," . $maxtotalval ['total'] . "
							&chm=N,000000,0,-1,13
							&chbh=a";
		}
		return $str;
	}
	

	/*
     * earningsSummary
     * Earnings for each Tld
     */
	public static function earningsSummary() {
		$max = 0;
		$total = 0;
		$currency = Shineisp_Registry::getInstance ()->Zend_Currency;
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		$str = "";
		$summary = Domains::getSummary ();
		if (isset ( $summary [0] )) {
			foreach ( $summary as $item ) {
				$tlds [] = $item ['tld'];
				$earnings [] = $item ['earnings'] - $item ['costs'];
				$total += $item ['earnings'] - $item ['costs'];
			}
			
			$max = max ( $earnings );
			$tlds = implode ( "|", $tlds );
			$earnings = implode ( ",", $earnings );
			$label = $translator->translate ( 'Earning Summary' ) . " - Tot. " . $currency->toCurrency($total, array('currency' => Settings::findbyParam('currency')));
			$lblearnings = $translator->translate ( 'Earnings' );
			$str = "http://chart.apis.google.com/chart?
							cht=bvs
							&chtt=$label
							&chts=4d89f9,18
							&chs=500x300
							&chd=t:" . $earnings . "
							&chxt=x
							&chxl=0:|" . strtoupper ( $tlds ) . "
							&chco=4d89f9
							&chbh=r,.1
							&chds=0," . $max . "
							&chm=N*cEUR*,000000,0,,12,,c|N*cEUR*,000000,1,,12,,c|N,ffffff,2,,12,,c";
		}
		return $str;
	}	
	
	/*
	 * cmp
	 * Sorting function
	 */
	static function cmp($a, $b) {
		if ($a ["total"] == $b ["total"]) {
			return 0;
		}
		return ($a ["total"] < $b ["total"]) ? - 1 : 1;
	}
	
	/**
	 * Summary of all the domain stautus
	 * @return array
	 */
	public static function summary() {
		$chart = "";
		
		$dq = Doctrine_Query::create ()
				->select ( "domain_id, count(*) as items, s.status as status" )
				->from ( 'Domains d' )
				->leftJoin ( 'd.Statuses s' )
                ->leftJoin ( 'd.Customers c' )
				->where("s.section = 'domains'")
                ->addWhere( "c.isp_id = ?", Isp::getCurrentId() )
				->groupBy('s.status');
        
        $records    = $dq->execute(array (), Doctrine_Core::HYDRATE_ARRAY);
	
		// Strip the customer_id field
		if(!empty($records)){
			foreach($records as $key => $value) {
			  	array_shift($value);
			  	$newarray[]       = $value;
			  	$chartLabels[]    = $value['status'];
			  	$chartValues[]    = $value['items'];
			}
			// Chart link
			$chart = "https://chart.googleapis.com/chart?chs=250x100&chd=t:".implode(",", $chartValues)."&cht=p3&chl=".implode("|", $chartLabels);
		}
		
		$dq = Doctrine_Query::create ()
				->select ( "domain_id, count(*) as items" )
				->from ( 'Domains d' )
                ->leftJoin ( 'd.Customers c' )
                ->addWhere( "c.isp_id = ?", Isp::getCurrentId() );
                                    
        
        $record_group2  =  $dq->execute(array (), Doctrine_Core::HYDRATE_ARRAY);
		
		$newarray[] = array('items' => $record_group2[0]['items'], 'status' => "Total");
		
		return array('data' => $newarray, 'chart' => $chart);
	}	
	
	/**
	 * Check the domain availability
	 * @param $name
	 * @param $tldid
	 * @return boolean
	 */
	public static function check_availability($name, $tldid) {
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		$dchecker = new Shineisp_Commons_DomainChecker();
		
		if(!empty($name)){
			$record = DomainsTlds::getAllInfo($tldid);
			
			if(!empty($record)){
				if(!empty($record['name'])){
					$domain = $name . "." . $record['name'];
					if (Shineisp_Commons_Utilities::is_valid_domain_name ( $domain )) {
						
						if($dchecker->checkDomainAvailability($domain)){
							return true;
						}else {
							return false;
						}
					}
				}else{
					throw new Exception($translator->_('TLD name have been not set in the administration panel yet'));
				}
				throw new Exception($translator->_('Domain name is not correct: %s', $domain));
			}
			throw new Exception($translator->translate ("TLD $tldid has been not found!")); 
		}
		throw new Exception($translator->translate ('Domain name is empty!')); 
	}

	
	######################################### BULK ACTIONS ############################################
	
	
	/**
	 * delete the domains selected 
	 * @param array
	 * @return Boolean
	 */
	public function bulk_delete($items) {
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		if (is_array ( $items )) {
			try {
				$retval = Doctrine_Query::create ()->delete ()->from ( 'Domains d' )->whereIn ( 'd.domain_id', $items )->execute ();
				if($retval){
					die ( json_encode ( array ('mex' => $translator->translate ( "All the items have been deleted" ) ) ) );
				}else{
					die ( json_encode ( array ('mex' => $translator->translate ( "There was a problem during the record delete process." ) ) ) );
				}
			} catch ( Exception $e ) {
				die ( json_encode ( array ('mex' => $e->getMessage () ) ) );
			}
		}
		return false;
	}
		
	/**
	 * export the content in a pdf file
	 * @param array $items
	 */
	public function bulk_export($items) {
		$isp = Isp::getActiveISP();
		$pdf = new Shineisp_Commons_PdfList();
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		// Get the records from the domains table
		$domains = self::get_domains($items, "d.domain_id, 
											  CONCAT(d.domain, '.', d.tld) as domain, 
											  DATE_FORMAT(d.creation_date, '%d/%m/%Y') as creation_date, 
											  DATE_FORMAT(d.expiring_date, '%d/%m/%Y') as expiring_date, , 
											  DATEDIFF(expiring_date, CURRENT_DATE) as days,
                       						  IF(d.autorenew = 1, 'YES', 'NO') as renew,
											  s.status as status", "d.expiring_date, d.domain");
		
		// Create the PDF header
		$grid['headers']['title'] = $translator->translate('Domains List');
		$grid['headers']['subtitle'] = $translator->_("List of the domains updated at %s and sorted by the expiring date and domain name", date('d/m/Y H:i:s'));
		$grid['footer']['text'] = $isp['company'] . " - " . $isp['website'];
		 
		if(!empty($domains[0]))

			// Create the columns of the grid
			$grid ['columns'] [] = array ("value" => $translator->translate('Domain'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Creation Date'), 'size' => 80);
			$grid ['columns'] [] = array ("value" => $translator->translate('Expiring Date'), 'size' => 80);
			$grid ['columns'] [] = array ("value" => $translator->translate('Days'), 'size' => 80);
			$grid ['columns'] [] = array ("value" => $translator->translate('Autorenew'), 'size' => 80);
			$grid ['columns'] [] = array ("value" => $translator->translate('Status'), 'size' => 80);

			// Getting the records values and delete the first column the customer_id field.
			foreach ($domains as $domain){
				$values = array_values($domain);
				array_shift($values);
				$grid ['records'] [] = $values;
			}
				
			// Create the PDF
			die($pdf->create($grid));
		
		return false;	
	}


	/**
	 * Set the status of the records
	 * @param array $items Items selected
	 * @param array $parameters Custom paramenters
	 */
	public function bulk_set_status($items, $parameters) {
		if(!empty($parameters['status'])){
			foreach ($items as $item) {
				self::setStatus($item, $parameters['status']);
			}
		}
		return true;
	}

	/**
	 * Set the autorenew of the domains
	 * @param array $items Items selected
	 * @param array $parameters Custom paramenters
	 */
	public function bulk_set_autorenew($items, $parameters) {
		if(is_numeric($parameters['status'])){
			foreach ($items as $item) {
				self::setAutorenew($item, !empty($parameters['status']) ? TRUE : FALSE);
			}
		}
		return true;
	}

	/**
	 * Bulk registrar task request
	 * @param array $items Items selected
	 * @param array $parameters Custom paramenters
	 */
	public function bulk_registrar_tasks($items, $parameters) {
		$errors = array();
		
		if(!empty($parameters['task'])){
			$domains = self::get_domains($items, "d.domain_id, CONCAT(d.domain, '.', ws.tld) as name, d.registrars_id as registrar", "d.domain");
			
			foreach ($domains as $domain) {
				if(!empty($domain['name'])){
					if(!empty($domain['registrar'])){
						DomainsTasks::AddTask($domain['name'], $parameters['task']);
					}else{
						$errors[] = "Registrar service not set for: " . $domain['name'];
					}
				}
			}
		}
		
		if(count($errors) > 0){
			die ( json_encode ( array ('mex' => implode("<br/>", $errors) ) ) );
		}
		return true;
	}
	
}