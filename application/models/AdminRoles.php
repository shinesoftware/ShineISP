<?php

/**
 * AdminRoles
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AdminRoles extends BaseAdminRoles
{
	
	
	/**
	 * grid
	 * create the configuration of the grid
	 */
	public static function grid($rowNum = 10) {
	
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
	
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'r.role_id', 'alias' => 'role_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'r.role_id', 'alias' => 'role_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Role Name' ), 'field' => 'r.name', 'alias' => 'name', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		
		$config ['datagrid'] ['fields'] = "role_id, name";
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )->from ( 'AdminRoles r' );
	
		$config ['datagrid'] ['rownum'] = $rowNum;
	
		$config ['datagrid'] ['basepath'] = "/admin/roles/";
		$config ['datagrid'] ['index'] = "role_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
	
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/roles/edit/id/%d";
	
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/roles/delete/id/%d";
		return $config;
	}
	
	/**
	 * find
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )
		->from ( 'AdminRoles p' )
		->where ( "p.role_id = ?", $id )
		->limit ( 1 );
	
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$record = $dq->execute ( array (), $retarray );
		return $record;
	}
	
	/**
	 * Save the permission
	 * @param $id
	 */
	public static function SaveAll($data, $id=null) {
		if(!empty($data) && is_array($data)){
			
			if(is_numeric($id)){
				$role = Doctrine::getTable ( 'AdminRoles' )->find($id);
			}else{
				$role = new AdminRoles();
			}
			
			// Save the role label
			if(!empty($data['name'])){
				$role['name'] = Shineisp_Commons_UrlRewrites::format($data['name']);
				$role->save();
			}
			
			// Set the new Role ID to the users selected
			if(!empty($data['users'])){
				foreach ($data['users'] as $user){
					AdminUser::setUserRoleID($user, $id);
				}
			}
			
			if(!empty($data['resources'])){

				// Explode the string into an array
				$resources = explode("/", $data['resources']);
				
				// Clear old permissions
				AdminPermissions::clearPermissionByRoleID($id);
				
				// Add the new permissions
				foreach ($resources as $resource ){
					list($module, $controller) = explode(':', $resource);
					AdminPermissions::addPermission($id, $module, $controller);
				}
			}
			
			return $role;
		}
		return false;
	}
	
	/**
	 * delete
	 * Delete a record by ID
	 * @param $id
	 */
	public static function deleteItem($id) {
		Doctrine::getTable ( 'AdminRoles' )->findOneBy ( 'role_id', $id )->delete();
	}
	
	/**
	 * Get all the roles for a specific user
	 * @param string $email
	 */
	public static function getRolesbyEmail($email){
		 $record = Doctrine_Query::create ()->from ( 'AdminRoles r' )
        								->leftJoin ( 'r.AdminUser u' )
        								->leftJoin ( 'r.AdminPermissions p' )
        								->leftJoin ( 'p.AdminResources s' )
        								->where ( 'u.email = ?', $email)
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 return $record;
	}
	
	/**
	 * Get all the resources for a specific user
	 * @param integer $userid
	 */
	public static function getResourcesbyUserID($user_id){
		$resources = array();
		$records = Doctrine_Query::create ()->from ( 'AdminRoles r' )
        								->leftJoin ( 'r.AdminUser u' )
        								->leftJoin ( 'r.AdminPermissions p' )
        								->leftJoin ( 'p.AdminResources s' )
        								->where ( 'u.user_id = ?', $user_id)
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		 if(!empty($records)){
			 foreach ($records[0]['AdminPermissions'] as $record){
			 	$resources[$record['AdminResources']['name']] = $record['AdminResources']['resource_id'];
			 }
		 }
		 return $resources;
	}
	
	/**
	 * Get the user role
	 * @param integer $userid
	 */
	public static function getUserRole($user_id){
		 $record = Doctrine_Query::create ()->select('r.*')
		 								->from ( 'AdminRoles r' )
        								->leftJoin ( 'r.AdminUser u' )
        								->where ( 'u.user_id = ?', $user_id)
        								->limit(1)
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 return !empty($record[0]) ? $record[0] : NULL;
	}
	
	/**
	 * Check if the user is an administrator
	 * @param integer $userid
	 */
	public static function isAdministrator($user_id){
		 $record = Doctrine_Query::create ()->select('count(*) as total')
		 								->from ( 'AdminRoles r' )
        								->leftJoin ( 'r.AdminUser u' )
        								->where ( 'u.user_id = ?', $user_id)
        								->andWhere ( 'r.role_id = ?', 1)
        								->limit(1)
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 return $record[0]['total'];
	}
	
	/**
	 * Get all the roles
	 */
	public static function getRoles(){
		 $records = Doctrine_Query::create ()->from ( 'AdminRoles r' )
		 								->orderBy('role_id desc')
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 return $records;
	}
	
	/**
	 * Get role by name
	 */
	public static function getRoleByName($rolename){
		 $records = Doctrine_Query::create ()->from ( 'AdminRoles r' )
		 								->where('r.name = ?', $rolename)
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 return $records;
	}
	
	/**
	 * Get role id by name
	 */
	public static function getIdRoleByName($rolename){
		 $records = Doctrine_Query::create ()->select('r.role_id')->from ( 'AdminRoles r' )
		 								->where('r.name = ?', $rolename)
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 return !empty($records[0]) ? $records[0]['role_id'] : null;
	}
	
	/**
	 * Get all the roles
	 */
	public static function getList(){
		$data = array();
		$records = Doctrine_Query::create ()->from ( 'AdminRoles r' )
		 								->orderBy('role_id desc')
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 foreach ($records as $record){
			$data[$record['role_id']] = ucfirst($record['name']);
		}
		
		return $data;
	}
	
	/**
	 * Get all the roles, resources and permissions
	 */
	public static function getAll(){
		 $record = Doctrine_Query::create ()->from ( 'AdminRoles r' )
        								->leftJoin ( 'r.AdminPermissions p' )
        								->leftJoin ( 'p.AdminResources s' )
        								->execute(array(), Doctrine::HYDRATE_ARRAY);
		  
		 return $record;
	}
	
}