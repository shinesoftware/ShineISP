<?php

/**
 * Payments
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Payments extends BasePayments
{
    /**
     * find
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function find($id, $fields = "*", $retarray = false) {
        $dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Payments p' )
        ->where ( "p.payment_id = $id" )->limit ( 1 );
        
        $retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
        $record = $dq->execute ( array (), $retarray );
        return $record;
    }
    
    /**
     * getAllPaymentsbyMonthYear
     * Get all the payment by year
     * @param $year
     * @return Array
     */
    public static function getAllPaymentsbyMonthYear($month, $year) {
        $record = Doctrine_Query::create ()
        				->select('payment_id, 
        						  CONCAT(c.firstname, " ", c.lastname) as fullname,
        						  b.name as bank, 
        						  i.number as invoice, 
        						  order_id as orderid, 
        						  DATE_FORMAT(paymentdate, "%d/%m/%Y") as date, 
        						  o.total as total,
        						  o.vat as vat,
        						  o.grandtotal as grandtotal')
                        ->from ( 'Payments p' )
                        ->leftJoin ( 'p.Orders o' )
                        ->leftJoin ( 'o.Customers c' )
                        ->leftJoin ( 'o.Invoices i' )
                        ->leftJoin ( 'p.Banks b' )
                        ->where('YEAR(o.order_date) = ?', $year)
                        ->andWhere('MONTH(o.order_date) = ?', $month)
                        ->andWhere('o.invoice_id is not null') // Invoiced
                        ->andWhere('o.status_id = ?', Statuses::id("complete", "orders")) // Complete
                        ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        
        return $record;
    }
        
    /**
     * Get a record by ID
     * 
     * 
     * @param $order_id
     * @param $fields
     * @param $retarray
     * @return Doctrine Record
     */
    public static function findbyorderid($order_id, $fields = "*", $retarray = false) {
        $dq = Doctrine_Query::create ()
                        ->from ( 'Payments p' )
                        ->leftJoin ( 'p.Banks b' )
                        ->where ( "p.order_id = ?", $order_id );
                        //->limit ( 1 );
        
        if($fields != "*"){
        	$dq->select ( $fields );
        }
        
        $retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
        $record = $dq->execute ( array (), $retarray );
        return $record;
    }
    
    /**
     * addpayment
     * Add a payment information to a order
     * @param integer $orderid
     * @param string $transactionid
     * @param integer $bankid
     * @param boolean $status
     * @param float $amount
     */
    public static function addpayment($orderid, $transactionid, $bankid, $status, $amount){
    	$paymentdata = self::findbyorderid ( $orderid, null, true );
    	
    	if (count ( $paymentdata ) == 0) {
			$payment = new Payments ();
		} else {
			$payment = Doctrine::getTable ( 'Payments' )->find ( $paymentdata [0] ['payment_id'] );
		}
		
    	// Set the payment data
		$payment->paymentdate = date ( 'Y-m-d H:i:s' );
		$payment->order_id = $orderid;
		$payment->customer_id = Orders::getCustomer ( $orderid );
		$payment->bank_id = $bankid;
		$payment->reference = $transactionid;
		$payment->confirmed = $status ? 1 : 0;
		$payment->income = $amount;
		
		return $payment->trySave ();
	}
	
	/**
	 * confirm
	 * Confirm a payment
	 * @param integer $orderid
	 */
	public static function confirm($orderid, $confirm = 1) {
		try {
			
			Doctrine_Query::create ()->update ( 'Payments p' )
									->set ( 'p.confirmed', '1' )
									->where('p.order_id = ?', $orderid)
									->execute ();
			return true;
		} catch ( Exception $e ) {
			return false;
		}
	}
    
}