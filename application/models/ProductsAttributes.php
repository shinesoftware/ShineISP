<?php

/**
 * ProductsAttributes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProductsAttributes extends BaseProductsAttributes {
	
	/**
	 * grid
	 * create the configuration of the grid
	 */
	public static function grid($rowNum = 10, $locale = null) {
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		if ( $locale === null ) {
			$Session = new Zend_Session_Namespace ( 'Admin' );
			$locale = $Session->langid;
		}
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'pa.attribute_id', 'alias' => 'attribute_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'pa.attribute_id', 'alias' => 'attribute_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Code' ), 'field' => 'code', 'alias' => 'code', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Label' ), 'field' => 'pad.label', 'alias' => 'label', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => Isp::getPanel() . " " . $translator->translate ( 'System Attributes' ), 'field' => 'pa.system_var', 'alias' => 'system_var', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Default' ), 'field' => 'pa.defaultvalue', 'alias' => 'default', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Position' ), 'field' => 'pa.position', 'alias' => 'position', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Visible on Frontend' ), 'field' => 'pa.is_visible_on_front', 'alias' => 'visible', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Groups' ), 'type' => 'arraydata', 'index' => 'attribute_id', 'alias' => 'dummy', 'run' => array('ProductsAttributes'=>'getGroups') );
		
		$config ['datagrid'] ['fields'] = "attribute_id, code, pad.label as label, pa.system_var as system_var, pa.is_visible_on_front as visible, pa.position as position, pa.defaultvalue as default";
		
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()
																->select ( $config ['datagrid'] ['fields'] )
																->from ( 'ProductsAttributes pa' )
																->leftJoin('pa.ProductsAttributesData pad WITH pad.language_id = ' . $locale);
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		
		$config ['datagrid'] ['basepath'] = "/admin/productsattributes/";
		$config ['datagrid'] ['index'] = "attribute_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/productsattributes/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/productsattributes/delete/id/%d";
		
		$config ['datagrid'] ['massactions']['common'] = array ('massdelete' => 'Mass Delete' );
		
		return $config;
	}
	
	/*
	 * find
	 * Find an item by its id
	 */
	public static function find($id) {
		return Doctrine::getTable ( 'ProductsAttributes' )->find ( $id );
	}
	
	/*
	 * getAttributebyGroupId
	 * Get all items by its group id
	 */
	public static function getAttributebyGroupId($id) {
		return Doctrine::getTable ( 'ProductsAttributes' )->find ( $id );
	}
	
	/*
	 * delete
	 * Find an item by its id and then delete it
	 */
	public static function deleteAttribute($id) {
		return Doctrine::getTable ( 'ProductsAttributes' )->find ( $id )->delete();
	}
	
	/*
	 * getAttributebyCode
	 * Find an item by its code
	 */
	public static function getAttributebyCode($code) {
		return Doctrine::getTable ( 'ProductsAttributes' )->findby ('code', $code )->toArray();
	}
	
	/*
	 * getAttributebyProductID
	 * Find all the attributes of a product
	 */
	public static function getAttributebyProductID($productid, $language_id = 1, $onProductListing=false) {
		$dq = Doctrine_Query::create ()
			->from ( 'ProductsAttributes pa' )
			->leftJoin('pa.ProductsAttributesData pad WITH pad.language_id = ' . $language_id)
			->leftJoin('pa.ProductsAttributesIndexes pai')
			->where('pai.product_id = ?', $productid);
		
		if($onProductListing){
			$dq->andWhere('on_product_listing = ?', true);
		}
			
		$records = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $records;
	}
	
	/*
	 * DeleteItems
	 * Delete a group of records
	 */
	public static function DeleteItems($items) {
		Doctrine_Query::create ()->delete ()->from ( 'ProductsAttributes pa' )->whereIn ( 'pa.attribute_id', $items )->execute ();
	}
	
	/**
	 * getAllInfo
	 * Get a record by ID
	 * @param $id
	 * @return ARRAY Record
	 */
	public static function getAllInfo($id, $fields = "*", $language_id = 1) {
		try {
			$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'ProductsAttributes pa' )
			->leftJoin('pa.ProductsAttributesData pad WITH pad.language_id = ' . $language_id)
			->where ( 'pa.attribute_id = ?', $id );
			$hp = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			
			if (isset ( $hp [0] )) {
				return $hp [0];
			} else {
				return array ();
			}
		
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	
	}
	
	/**
	 * massdelete
	 * delete the attributes selected 
	 * @param array
	 * @return Boolean
	 */
	public static function massdelete($items) {
		$retval = Doctrine_Query::create ()->delete ()->from ( 'ProductsAttributes' )->whereIn ( 'attribute_id', $items )->execute ();
		return $retval;
	}	
	
	/**
	 * getAttributes
	 * Get all the attributes
	 * @param $id
	 * @return ARRAY Record
	 */
	public static function getAttributes($locale = null) {
		if ( $locale === null ) {
			$Session = new Zend_Session_Namespace ( 'Admin' );
			$locale = $Session->langid;
		}
		
		try {
			$records = array();
			$items = Doctrine_Query::create ()->select ( 'attribute_id, pad.label as label, code' )
			->from ( 'ProductsAttributes pa' )
			->leftJoin( 'pa.ProductsAttributesData pad WITH pad.language_id = ' . $locale )
			->orderBy('pad.label')
			->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );

			foreach ( $items as $c ) {
				$records [$c ['attribute_id']] = $c['label'] . " - (" . $c ['code'] . ")";
			}
			
			return $records;
			
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	
	}
	
	/**
	 * Get all the System Attributes values of a product
	 * 
	 * 
	 * @param $productId
	 * @return ArrayObject
	 */
	public static function getSysAttributes($productId) {
		try {
			$records = array();
			
			$items = Doctrine_Query::create ()->select ( 'pa.attribute_id, pa.code as code, pai.value as value' )
			->from ( 'ProductsAttributes pa' )
			->leftJoin( 'pa.ProductsAttributesIndexes pai' )
			->where('pai.product_id = ?', $productId)
			->andWhere('pa.system = ?', 1)
			->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );

			foreach ( $items as $c ) {
				$records [$c ['code']] = $c['value'];
			}
			
			return $records;
			
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	
	}
	
	/**
	 * Add a new product attribute
	 * 
	 * @param integer $id [empty to create a new record]
	 * @param string $code
	 * @param string $label
	 * @param string $type
	 * @param integer $language_id
	 * @param integer $position
	 * @param boolean $active
	 * @param string $prefix
	 * @param string $suffix
	 * @param string $description
	 * @param boolean $is_visible_on_front
	 * @param boolean $is_system_var
	 * @param string $system_var
	 * @param string $defaultvalue
	 * @param boolean $is_required
	 * @param boolean $is_comparable
	 * @param boolean $on_product_listing
	 */
	public static function addNew($id=NULL, $code, $label, $type, $language_id=1, $position=0, $active=1, 
								  $prefix=NULL, $suffix=NULL, $description=NULL,
								  $is_visible_on_front=1, $is_system_var=0, $system_var=NULL, 
								  $defaultvalue=NULL, $is_required=0, $is_comparable=0, $on_product_listing=0) {
								  	
		$productsattributes = new ProductsAttributes();
		// Set the new values
		if (is_numeric ( $id )) {
			$productsattributes = Doctrine::getTable ( 'ProductsAttributes' )->find ( $id );
		}
		
		// format the attribute code
		$code = Shineisp_Commons_Utilities::format($code );
		
		// Check if the code has been already used before
		$thecode = self::getAttributebyCode($code);
		
		// If the record is in Update mode
		if (is_numeric ( $id )) {
			if(!empty($thecode) && count($thecode)>1){
				return false;
			}
		}else{ // If the record is new
			if(!empty($thecode) && count($thecode)>0){
				return false;
			}
		}
		
		$productsattributes['code'] = $code;
		$productsattributes['position'] = $position;
		$productsattributes['is_visible_on_front'] = $is_visible_on_front;
		$productsattributes['active'] = $active;
		$productsattributes['system'] = $is_system_var;
		$productsattributes['system_var'] = $system_var;
		$productsattributes['defaultvalue'] = $defaultvalue;
		$productsattributes['type'] = $type;
		$productsattributes['is_required'] = $is_required;
		$productsattributes['is_comparable'] = $is_comparable;
		$productsattributes['on_product_listing'] = $on_product_listing;
				
		$productsattributes->save ();
		
		$productsattributesdata = Doctrine::getTable('ProductsAttributesData')
										->createQuery('pad')
										->where('pad.attribute_id = ?', $productsattributes['attribute_id'])
										->andWhere('pad.language_id = ?', $language_id)
										->fetchOne();
		
		if(empty($productsattributesdata)){
			$productsattributesdata = new ProductsAttributesData();
		}
		
		$productsattributesdata['attribute_id'] = $productsattributes['attribute_id'];
		$productsattributesdata['language_id'] =  $language_id;
		$productsattributesdata['label'] = $label;
		$productsattributesdata['prefix'] = $prefix;
		$productsattributesdata['suffix'] = $suffix;
		$productsattributesdata['description'] = $description;
		$productsattributesdata->save();
		
		return $productsattributes['attribute_id'];
			
	}

	/**
	 * Get the list of the attributes group
	 * 
	 *  
	 * @param integer $index
	 */
	public static function getGroups($index){
		$items = array();
		$groups = ProductsAttributesGroups::getGroups($index);
		foreach ($groups as $group) {
			if(!empty($group['ProductsAttributesGroups']['name'])){
				$items[] = "<a href='/admin/productsattributesgroups/edit/id/".$group['group_id']."'>" . $group['ProductsAttributesGroups']['name'] . "</a>";
			}
		}
		return implode(", ", $items);
	}
	

	######################################### BULK ACTIONS ############################################
	
	
	/**
	 * massdelete
	 * delete the tickets selected 
	 * @param array
	 * @return Boolean
	 */
	public static function bulk_delete($items) {
		if(!empty($items)){
			return self::massdelete($items);
		}
		return false;
	}	
}