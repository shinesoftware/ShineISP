<?php

/**
 * AdminUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AdminUser extends BaseAdminUser
{
	
	/**
	 * grid
	 * create the configuration of the grid
	 */
	public static function grid($rowNum = 10) {
		$Session = new Zend_Session_Namespace ( 'Default' );
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
	
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'u.user_id', 'alias' => 'user_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'u.user_id', 'alias' => 'user_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Firstname' ), 'field' => 'u.firstname', 'alias' => 'firstname', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Lastname' ), 'field' => 'u.lastname', 'alias' => 'lastname', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'E-Mail' ), 'field' => 'u.email', 'alias' => 'email', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Role' ), 'field' => 'r.name', 'alias' => 'role', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['fields'] = "u.user_id, u.firstname, u.lastname, u.email, r.name as role";
		$config ['datagrid'] ['rownum'] = $rowNum;
	
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )
		->from ( 'AdminUser u' )->leftJoin ( 'u.AdminRoles r' );
	
	
		$config ['datagrid'] ['basepath'] = "/admin/profile/";
		$config ['datagrid'] ['index'] = "user_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
	
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/profile/edit/id/%d";
	
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/profile/delete/id/%d";
		$config ['datagrid'] ['massactions'] = array ('massdelete' => 'Mass Delete');
		return $config;
	}
	
	/**
	 * ACL Login
	 *
	 * @param string $email
	 * @param string $password
	 * @return Zend_Auth_Result | boolean
	 */
	public static function fastlogin($email, $password, $rememberMe=false){
	
		if(!empty($email) && !empty($password)){
			$adapter = new Shineisp_Auth_Adapter_Doctrine(Doctrine_Manager::connection()->getTable("AdminUser"), "email", "password");
			
			$adapter->setCredential($password);
			$adapter->setIdentity($email);
			
			if ($rememberMe) {
				// remember the session for 604800s = 7 days
				Zend_Session::rememberMe(604800);
			} else {
				// do not remember the session
				Zend_Session::forgetMe();
			}
				
			$auth = Zend_Auth::getInstance();
				
			$auth->setStorage(new Zend_Auth_Storage_Session('admin'));
			return $auth->authenticate($adapter);
				
		}else{
			return false;
		}
	}
	
	/**
	 * delete
	 * Delete a record by ID
	 * @param $id
	 */
	public static function deleteUser($id) {
		Doctrine::getTable ( 'AdminUser' )->findOneBy ( 'user_id', $id )->delete ();
	}
	
	
	/**
	 * Get all data starting from the wikiID
	 *
	 *
	 * @param $id
	 * @return Doctrine Record / Array
	 */
	public static function getAllInfo($id) {
	
		if(!is_numeric($id)){
			return array();
		}
	
		$records = Doctrine_Query::create ()->from ( 'AdminUser u' )
							->leftJoin ( 'u.AdminRoles r' )
							->leftJoin ( 'r.AdminPermissions p' )
							->leftJoin ( 'p.AdminResources s' )
							->where ( 'u.user_id = ?', $id)
							->execute(array(), Doctrine::HYDRATE_ARRAY);
	
		return !empty($records[0]) ? $records[0] : array();
	}
	
	/**
	 * Find all the AdminUser occurences
	 *
	 */
	public static function findAll() {
		return Doctrine::getTable ( 'AdminUser' )->findAll ();
	}
	
	/**
	 * Get a AdminUser record resource
	 *
	 * @param integer $id
	 * @return Doctrine_Record
	 */
	public static function find($id) {
		return Doctrine::getTable ( 'AdminUser' )->findOneBy ( 'user_id', $id );
	}
	
	/**
	 * Get the list of the AdminUser saved
	 *
	 * @return ArrayObject
	 */
	public static function getList() {
		$items = array ();
		$arrTypes = Doctrine::getTable ( 'AdminUser' )->findAll ();
		foreach ( $arrTypes->getData () as $c ) {
			$items [$c ['user_id']] = $c ['lastname'] . " " . $c['firstname'];
		}
		return $items;
	}
	
	/**
	 * Get the list of the AdminUser in a specific role
	 *
	 * @return ArrayObject
	 */
	public static function getUserbyRoleID($roleId) {
		$items = array ();
		
		if(is_numeric($roleId)){
			$records = Doctrine_Query::create ()->from ( 'AdminUser u' )->where('role_id = ?', $roleId)->execute(array(), Doctrine::HYDRATE_ARRAY);;
			
			foreach ( $records as $record ) {
				$items [$record ['user_id']] = $record ['lastname'] . " " . $record['firstname'];
			}
		}
		return $items;
	}
	
	/**
	 * return the first Admin User
	 *
	 *
	 * @return array
	 */
	public static function getFirstAdminUser() {
		$q = Doctrine_Query::create ()->from ( 'AdminUser u' )->limit ( 1 );
		$AdminUser = $q->execute (null, Doctrine::HYDRATE_ARRAY);
		return isset ( $AdminUser [0] ) ? $AdminUser [0] : array();
	}
	
	/**
	 * return the active AdminUser identifier
	 *
	 *
	 * @return integer or false
	 */
	public static function getActiveAdminUserID() {
		$q = Doctrine_Query::create ()->select('user_id as id')->from ( 'AdminUser' )->where ( 'active=?', 1 );
		$AdminUser = $q->execute ()->toArray ();
		return isset ( $AdminUser [0]['id'] ) ? $AdminUser [0]['id'] : false;
	}
	
	/**
	 * Set the role at the user
	 * @param integer $userID
	 * @param integer $roleID
	 */
	public static function setUserRoleID($userID, $roleID){
		if(is_numeric($userID) && is_numeric($roleID)){
			return Doctrine_Query::create()
			->update('AdminUser')
			->set('role_id', '?', $roleID)
			->set('changed', '?', date('Y-m-d H:i:s'))
			->where('user_id = ?', $userID)
			->execute();
		}
		return false;
	}
	
	/**
	 * Save all the AdminUser data
	 *
	 * @return string
	 */
	public static function saveAll($data, $id="") {
	
		if(is_numeric($id)){
			$AdminUser = self::find($id);
		}else{
			$AdminUser = new AdminUser();
			$AdminUser->created = date('Y-m-d H:i:s');
		}
		
		$AdminUser->firstname = $data ['firstname'];
		$AdminUser->lastname = $data ['lastname'];
		$AdminUser->email = $data ['email'];
		$AdminUser->role_id = $data ['role_id'];
		$AdminUser->isp_id = $data ['isp_id'];
		$AdminUser->changed = date('Y-m-d H:i:s');
	
		if (! empty ( $data ['password'] )) {
			//$AdminUser->password = md5($data ['password']);
			$AdminUser->password = crypt($data ['password']);
		}
	
		$AdminUser->save ();
		$user_id = $AdminUser['user_id'];
		
		return $AdminUser;
	}
	
	/**
	 * Add a new user or update the existing one
	 * 
	 * @return string
	 */
	public static function addUser($firstname, $lastname, $email, $password, $ispid, $roleid=1) {
	
		$user = self::getUserByEmail($email);
		
		if(is_numeric($user['user_id'])){
			$AdminUser = self::find($user['user_id']);
		}else{
			$AdminUser = new AdminUser();
			$AdminUser->created = date('Y-m-d H:i:s');
		}
		
		$AdminUser->firstname = !empty($firstname) ? $firstname : NULL;
		$AdminUser->lastname = !empty($lastname) ? $lastname : NULL;
		$AdminUser->email = !empty($email) ? $email : NULL;
		$AdminUser->role_id = !empty($roleid) ? $roleid : NULL;
		$AdminUser->isp_id = !empty($ispid) ? $ispid : NULL;
		$AdminUser->changed = date('Y-m-d H:i:s');
	
		if (! empty ( $password )) {
			//$AdminUser->password = md5($password);
			$AdminUser->password = crypt($password);
		}
	
		$AdminUser->save ();
		$user_id = $AdminUser['user_id'];
		
		return $AdminUser;
	}
	
	/**
	 * Get the user by Email
	 * @param string $email
	 */
	public static function getUserByEmail($email){
		$record = Doctrine_Query::create ()->from ( 'AdminUser u' )
							->where ( 'u.email = ?', $email)
							->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		return !empty($record[0]) ? $record[0] : NULL;
	} 
	
	/**
	 * Get the user from ACL
	 * @param unknown_type $userid
	 */
	public static function getUser($userid){
		$record = Doctrine_Query::create ()->from ( 'AdminUser u' )
							->leftJoin ( 'u.AdminRoles r' )
							->leftJoin ( 'r.AdminPermissions p' )
							->leftJoin ( 'p.AdminResources s' )
							->where ( 'u.user_id = ?', $userid)
							->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		return !empty($record[0]) ? $record[0] : NULL;
	} 
	
	/**
	 * Update the lognum
	 * @param string $email
	 */
	public static function updateLog($email){
		return Doctrine_Query::create ()->update ( 'AdminUser' )
										->set ( 'lognum', 'lognum + 1' )
										->where ( 'email = ?', $email )
										->execute ();
	} 

	/**
	 * Check the user credencials
	 * @param string $email
	 * @param string $password
	 */
	public static function checkCredencials($email, $password){
		$isMD5  = false;
		
		// Get the user
		$dbUser = Doctrine_Query::create ()->from ( 'AdminUser u' )
											->leftJoin ( 'u.AdminRoles r' )
											->leftJoin ( 'r.AdminPermissions p' )
											->leftJoin ( 'p.AdminResources s' )
											->where ( 'u.email = ?', $email)
											->limit(1)
											->fetchArray();
											
		if ( $dbUser && isset($dbUser[0]) ) {
			$dbUser = $dbUser[0];
			$dbPass = $dbUser['password'];
			
			if ( strlen($dbPass) > 32 && substr($dbPass,0,1) == '$') {
				$userPassword = crypt($password, $dbPass);
			} else {
				$isMD5 = true;
				$userPassword = md5($password);
			}
			
			if ( $userPassword == $dbPass ) {
				//* if password was crypted in plain MD5, force convertion to crypt
				if ( $isMD5 ) {
					$cryptPassword = crypt($password);
					
					Doctrine_Query::create ()->update ( 'AdminUser u' )
											 ->set ( 'u.password', '?', $cryptPassword )
											 ->where ( 'email = ?', $email )
											 ->limit(1)
											 ->execute ();					
				} 

				// Auth OK
				return $dbUser;				
			}
			
			return false;
		}else{
			return NULL;
		}
	}

	/**
	 * Check the user credencials by the MD5 email
	 * @param string $email
	 */
	public static function checkMD5CredencialsByIspEmail($md5email){

		// Check if the user exists!
		$record = Doctrine_Query::create ()->select('u.*, r.*, p.*, s.*')->from ( 'AdminUser u' )
											->leftJoin ( 'u.Isp i' )
											->leftJoin ( 'u.AdminRoles r' )
											->leftJoin ( 'r.AdminPermissions p' )
											->leftJoin ( 'p.AdminResources s' )
											->where ( 'MD5(i.email) = ?', $md5email)
											->execute(array(), Doctrine::HYDRATE_ARRAY);
				
		if($record){
			return !empty($record[0]) ? $record[0] : FALSE;
		}else{
			return NULL;
		}
	}
	
	
	/**
	 * DEPRECATED
	 * Check the user credencials by the MD5 email
	 * @param string $email
	 */
	public static function checkMD5OperatorCredencialsByPassCode($md5pass){
	
		// Check if the user exists!
		$record = Doctrine_Query::create ()->select('u.*, r.*, p.*, s.*')
											->from ( 'AdminUser u' )
											->leftJoin ( 'u.Isp i' )
											->leftJoin ( 'u.AdminRoles r' )
											->leftJoin ( 'r.AdminPermissions p' )
											->leftJoin ( 'p.AdminResources s' )
											->where ( 'CONCAT(MD5(u.email), u.password) = ?', $md5pass)
											->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		if($record){
			return !empty($record[0]) ? $record[0] : FALSE;
		}else{
			return NULL;
		}
	}	

	public static function checkOperatorCredencialsBySecretKey($secretKey){
		// Remove salt from hashed string
		$string = Shineisp_Commons_Hasher::unhash_string($secretKey);
		
		// Check if the user exists!
		$record = Doctrine_Query::create ()->select('u.*, r.*, p.*, s.*')
											->from ( 'AdminUser u' )
											->leftJoin ( 'u.Isp i' )
											->leftJoin ( 'u.AdminRoles r' )
											->leftJoin ( 'r.AdminPermissions p' )
											->leftJoin ( 'p.AdminResources s' )
											->where ( 'SHA1(u.email) = ?', $string)
											->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		if($record){
			return !empty($record[0]) ? $record[0] : FALSE;
		}else{
			return NULL;
		}
	}	

	
	/**
	 * DEPRECATED!!
	 * Check the user credencials by the MD5 email
	 * @param string $email
	 */
	public static function checkMD5IspCredencialsByPassCode($md5pass){
		
		die();
	
		// Check if the user exists!
		$record = Doctrine_Query::create ()->select('u.*, r.*, p.*, s.*')
											->from ( 'AdminUser u' )
											->leftJoin ( 'u.Isp i' )
											->leftJoin ( 'u.AdminRoles r' )
											->leftJoin ( 'r.AdminPermissions p' )
											->leftJoin ( 'p.AdminResources s' )
											->where ( 'CONCAT(MD5(i.email), i.password) = ?', $md5pass)
											->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		if($record){
			return !empty($record[0]) ? $record[0] : FALSE;
		}else{
			return NULL;
		}
	}	

	/**
	 * Check the user credencials by the secret key
	 * @param string $email
	 */
	public static function checkIspCredencialsBySecretKey($secretKey){
		
		// Remove salt from hashed string
		$string = Shineisp_Commons_Hasher::unhash_string($secretKey);
		
		// Check if the user exists!
		$record = Doctrine_Query::create ()->select('u.*, r.*, p.*, s.*')
											->from ( 'AdminUser u' )
											->leftJoin ( 'u.Isp i' )
											->leftJoin ( 'u.AdminRoles r' )
											->leftJoin ( 'r.AdminPermissions p' )
											->leftJoin ( 'p.AdminResources s' )
											->where ( 'SHA1(i.email) = ?', $string)
											->limit(1)
											->execute(array(), Doctrine::HYDRATE_ARRAY);
		
		if($record){
			return !empty($record[0]) ? $record[0] : FALSE;
		}else{
			return NULL;
		}
	}	



	/**
	 * Reset the user admin password
	 * @param string $userId
	 */
	public static function resetPassword($userId){
		
		if(!is_numeric($userId)){
			return false;
		}
		
		$newpassword = Shineisp_Commons_Utilities::GenerateRandomString();
		
		Doctrine_Query::create ()
							->update ( 'AdminUser u' )
							->set ( 'u.password', '?', crypt($newpassword) )
							->where ( "user_id = ?", $userId )
							->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
							
		return $newpassword;
	}
	
	/**
	 * delete the pages selected
	 * @param array
	 * @return Boolean
	 */
	public static function massdelete($items) {
		$retval = Doctrine_Query::create ()->delete ()->from ( 'AdminUser' )->whereIn ( 'user_id', $items )->execute ();
		return $retval;
	}
	
	######################################### BULK ACTIONS ############################################
	
	/**
	 * massdelete
	* delete the pages selected
	* @param array
	* @return Boolean
	*/
	public static function bulk_delete($items) {
		if(!empty($items)){
			return self::massdelete($items);
		}
		return false;
	}	
}