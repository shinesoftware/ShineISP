<?php

/**
 * Orders
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Orders extends BaseOrders {
	
	static protected $order = NULL;
	
	public static function grid($rowNum = 10) {
		
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$columns [] = array ('label' => null, 'field' => 'o.order_id', 'alias' => 'order_id', 'type' => 'selectall' );
		$columns [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'o.order_id', 'alias' => 'order_id', 'type' => 'integer', 'sortable' => true, 'attributes' => array ('width' => 70 ), 'searchable' => true );
		$columns [] = array ('label' => $translator->translate ( 'Invoice' ), 'field' => 'i.number', 'alias' => 'invoice', 'type' => 'integer', 'sortable' => true, 'attributes' => array ('width' => 70 ), 'searchable' => true );
		$columns [] = array ('label' => $translator->translate ( 'Date' ), 'field' => 'o.order_date', 'alias' => 'orderdate', 'type' => 'date', 'sortable' => true, 'attributes' => array ('width' => 70 ), 'searchable' => true );
		
		$columns [] = array ('label' => $translator->translate ( 'Company' ), 'field' => "CONCAT(c.firstname, ' ', c.lastname, ' ', c.company)", 'alias' => 'customer', 'sortable' => true, 'searchable' => true, 'type' => 'string');
		$columns [] = array ('label' => $translator->translate ( 'Reseller' ), 'field' => "CONCAT(r.company, ' ', r.firstname,' ', r.lastname)", 'alias' => 'reseller', 'sortable' => true, 'searchable' => true, 'type' => 'string');
		
		$columns [] = array ('label' => $translator->translate ( 'Grand Total' ), 'field' => 'o.grandtotal', 'alias' => 'grandtotal', 'sortable' => true, 'type' => 'float' );
		$columns [] = array ('label' => $translator->translate ( 'Renewal' ), 'field' => 'o.is_renewal', 'alias' => 'is_renewal', 'sortable' => true, 'type' => 'index', 'searchable' => true, 'filterdata' => array( '0'=>'No', '1'=>'Yes', ));
		$columns [] = array ('label' => $translator->translate ( 'Statuses' ), 'field' => 's.status', 'alias' => 'status', 'sortable' => true, 'searchable' => true);
		
		
		$config ['datagrid'] ['columns'] = $columns;
		$config ['datagrid'] ['fields'] = "o.order_id,
                                              DATE_FORMAT(o.order_date, '%d/%m/%Y') as orderdate, 
                                              o.is_renewal as is_renewal,
                                              o.grandtotal as grandtotal,
                                              i.number as invoice,
                                              CONCAT(c.firstname, ' ', c.lastname, ' ', c.company) as customer,
                                              CONCAT(r.company, ' ', r.firstname,' ', r.lastname) as reseller,
                                              s.status as status";
		
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )
																		->from ( 'Orders o' )
																		->leftJoin ( 'o.Customers c' )
																		->leftJoin ( 'c.Customers r' )
																		->leftJoin ( 'o.Invoices i' )
																		->leftJoin ( 'o.OrdersItems oi' )
																		->leftJoin ( 'oi.Products p' )
																		->leftJoin ( 'o.Statuses s' )
																		->orderBy ( 'order_date desc' );
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		$config ['datagrid'] ['basepath'] = "/admin/orders/";
		$config ['datagrid'] ['index'] = "order_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/orders/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/orders/delete/id/%d";
		$config ['datagrid'] ['massactions'] = array ('bulk_delete'=>'Mass Delete', 
													  'bulk_export'=>'Export List');
		return $config;
	}
	
	/**
	 * delete the customer selected 
	 * @param array
	 * @return Boolean
	 */
	public static function massdelete($orders) {
		$retval = Doctrine_Query::create ()->delete ()->from ( 'Orders o' )->whereIn ( 'o.order_id', $orders )->execute ();
		return $retval;
	}
	
	/**
	 * Set a new status of all items selected
	 * @param $items
	 * @return void
	 */
	public static function setNewStatus($items) {
		$request = Zend_Controller_Front::getInstance ()->getRequest ();
		if(!empty($request)){
			$status = $request->getParams ( 'params' );
			$params = parse_str ( $status ['params'], $output );
			$status = $output ['status'];
			if (is_array ( $items ) && is_numeric ( $status )) {
				foreach ( $items as $index ) {
					if (is_numeric ( $index )) {
						self::set_status ( $index, $status );
					}
				}
				return true;
			}
		}
		return false;
	}
	
	/**
	 * setStatus
	 * Set a record with a status
	 * @param $id, $status
	 * @return Void
	 */
	public static function set_status($id, $status) {
		return Doctrine_Query::create ()->update ( 'Orders o' )
									->set ( 'o.status_id', $status )
									->where('o.order_id = ?', $id)
									->execute ();
	}
	
	/**
	 * setStatus
	 * Set a record with a status
	 * @param $id, $status
	 * @return Void
	 */
	public static function setInvoice($id, $invoiceID) {
		try {
			$q = Doctrine_Query::create ()->update ( 'Orders' )->set ( 'invoice_id', $invoiceID )->where ( 'order_id = ' . $id );
			return $q->execute ();
		} catch ( Exception $e ) {
			echo $e->getMessage ();
			die ();
		}
	}
	
	
	/**
	 * findAll
	 * Get records the orders from the DB
	 * @param $currentPage
	 * @param $rowNum
	 * @param $sort
	 * @param $where
	 * @return array
	 */
	public static function findAll($fields = "*", $currentPage = 1, $rowNum = 2, array $sort = array(), array $where = array()) {
		
		$module = Zend_Controller_Front::getInstance ()->getRequest ()->getModuleName ();
		$controller = Zend_Controller_Front::getInstance ()->getRequest ()->getControllerName ();
		
		// Defining the url sort
		$uri = isset ( $sort [1] ) ? "/sort/$sort[1]" : "";
		$dq = Doctrine_Query::create ()->select ( $fields )
										->from ( 'Orders o' )
										->leftJoin ( 'o.Customers c' )
										->leftJoin ( 'c.Customers r' )
										->leftJoin ( 'o.Invoices i' )
										->leftJoin ( 'o.OrdersItems oi' )
										->leftJoin ( 'oi.Products p' )
										->leftJoin ( 'o.Statuses s' )
										->orderBy ( 'order_date desc' );
		
		$pagerLayout = new Doctrine_Pager_Layout ( new Doctrine_Pager ( $dq, $currentPage, $rowNum ), new Doctrine_Pager_Range_Sliding ( array ('chunk' => 10 ) ), "/$module/$controller/list/page/{%page_number}" . $uri );
		
		// Get the pager object
		$pager = $pagerLayout->getPager ();
		
		// Set the Order criteria
		if (isset ( $sort [0] )) {
			$pager->getQuery ()->orderBy ( $sort [0] );
		}
		
		if (isset ( $where ) && is_array ( $where )) {
			foreach ( $where as $filters ) {
				if (isset ( $filters [0] ) && is_array ( $filters [0] )) {
					foreach ( $filters as $filter ) {
						$method = $filter ['method'];
						$value = $filter ['value'];
						$criteria = $filter ['criteria'];
						$pager->getQuery ()->$method ( $criteria, $value );
					}
				} else {
					$method = $filters ['method'];
					$value = $filters ['value'];
					$criteria = $filters ['criteria'];
					$pager->getQuery ()->$method ( $criteria, $value );
				}
			}
		}
		
		$pagerLayout->setTemplate ( '<a href="{%url}">{%page}</a> ' );
		$pagerLayout->setSelectedTemplate ( '<a class="active" href="{%url}">{%page}</a> ' );
		
		$orders = $pagerLayout->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		$pagination = $pagerLayout->display ( null, true );
		return array ('records' => $orders, 'pagination' => $pagination, 'pager' => $pager, 'recordcount' => $dq->count () );
	
	}	
	
	
	/**
	 * Get all the orders by customer_id and parent_id
	 * @param $id
	 * @return Void
	 */
	public static function getOrdersByCustomerID($id, $fields="*") {
		try {
			return Doctrine_Query::create ()->select ( $fields )
										->from ( 'Orders o' )
										->leftJoin ( 'o.Customers c' )
										->leftJoin ( 'c.Customers r' )
										->leftJoin ( 'o.Invoices i' )
										->leftJoin ( 'o.OrdersItems oi' )
										->leftJoin ( 'oi.Products p' )
										->leftJoin ( 'o.Statuses s' )
										->where('c.customer_id = ? OR r.customer_id = ?', array($id, $id))
										->orderBy ( 'order_date desc' )
										->execute (array (), Doctrine_Core::HYDRATE_ARRAY);
		} catch ( Exception $e ) {
			echo $e->getMessage ();
			die ();
		}
	}
	
	/**
	 * Upload document files
	 */
	public static function UploadDocument($id, $customerid){
		try{
	
			$attachment = new Zend_File_Transfer_Adapter_Http();
	
			$files = $attachment->getFileInfo();
				
			// Create the directory
			@mkdir ( PUBLIC_PATH . "/documents/customers/$customerid/orders/$id/", 0777, true );
				
			// Set the destination directory
			$attachment->setDestination ( PUBLIC_PATH . "/documents/customers/$customerid/orders/$id/" );
				
			if ($attachment->receive()) {
				return Files::saveit($files['attachments']['name'], "/documents/customers/$customerid/orders/$id/", 'orders', $id);
			}
				
		}catch (Exception $e){
			echo $e->getMessage();
			die;
		}
	}
	
	/**
	 * saveAll
	 * Save all the data in the database
	 * @param array $params
	 * @param integer $id
	 */
	public static function saveAll($params, $id="") {
		$orders = new Orders();
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		try{
			// Set the new values
			if (is_numeric ( $id )) {
				$orders = Doctrine::getTable ( 'Orders' )->find ( $id );
			}
			
			if(!empty($params) && is_array($params)){
				
				$params ['date_start'] = ! empty ( $params ['date_start'] ) ? $params ['date_start'] : new Zend_Date();
				$params ['order_date'] = ! empty ( $params ['order_date'] ) ? $params ['order_date'] : new Zend_Date();
				
				$orders->order_date = Shineisp_Commons_Utilities::formatDateIn ( $params ['order_date'] );
				$orders->customer_id = $params ['customer_id'];
				$orders->isp_id = $params ['isp_id'];
				$orders->invoice_id = ! empty ( $params ['invoice_id'] ) ? $params ['invoice_id'] : null;
				$orders->note = $params ['note'];
				$orders->status_id = $params ['status_id'];
				$orders->is_renewal = $params ['is_renewal'] == 1 ? 1 : 0;
				$orders->expiring_date = Shineisp_Commons_Utilities::formatDateIn ($params ['expiring_date']);
				$orders->vat = $params ['vat'];
				$orders->total = $params ['total'];
				$orders->grandtotal = $params ['total'] + $params ['vat']; 
				
				// Save the data
				$orders->save ();
				$id = is_numeric ( $id ) ? $id : $orders->getIncremented ();
				
				// Add a fastlink to a order
				$link_exist = Fastlinks::findlinks ( $id, 'orders' );
				$link = new Fastlinks ();
				
				if (count ( $link_exist ) == 0) {
					$link->controller = "orders";
					$link->action = "edit";
					$link->params = json_encode ( array ('id' => $id ) );
					$link->customer_id = $params ['customer_id'];
					$link->sqltable = "orders";
					$link->id = $id;
					$link->code = Shineisp_Commons_Utilities::GenerateRandomString ();
				} else {
					$link = Doctrine::getTable ( 'Fastlinks' )->find ( $link_exist [0] ['fastlink_id'] );
					$link->code = $params ['fastlink'];
				}
				$link->save ();
				
				// Save the message note and send an alert
				if (! empty ( $params ['message'] )) {
					$order = self::getAllInfo ( $id, null, true );
					$link = Fastlinks::findlinks ( $id, $params ['customer_id'], 'orders' );
					$isp = Isp::getActiveISP ();
					
					$retval = Shineisp_Commons_Utilities::getEmailTemplate ( 'order_message' );
					if ($retval) {
						$subject = $retval ['subject'];
						$body = $retval ['template'];
						
						// Save the message
						Messages::addMessage($params ['message'], $order [0] ['Customers'] ['customer_id'], null, $id, null, $isp['isp_id']);
						$isp = Isp::getActiveISP();

						// Create the array with all the placeholders 
						$placeholders['fullname'] = $order [0] ['Customers'] ['firstname'] . " " . $order [0] ['Customers'] ['lastname'];
						$placeholders['url'] = "http://" . $_SERVER ['HTTP_HOST'] . "/index/link/id/" . $link [0] ['code'];
						$placeholders['orderid'] = sprintf ( "%03s", $id ) . " - " . Shineisp_Commons_Utilities::formatDateOut ( $order [0] ['order_date'] );
						$placeholders['messagetype'] = $translator->translate('Order Details');
						$placeholders['message'] = $params ['message'];
					
						// Send a message to the customer
						Messages::sendMessage ( "order_message", Contacts::getEmails($order [0] ['Customers'] ['customer_id']), $placeholders);

						// Change the URL for the administrator
						$placeholders['url'] = "http://" . $_SERVER ['HTTP_HOST'] . "/admin/login/link/id/" . $link [0] ['code'] . "/keypass/" . md5($isp['email']) . $isp['password'];
						
						// Send a message to the administrator
						Messages::sendMessage ( "order_message_admin", $isp['email'], $placeholders);
						
					}
				
				}
				
				// Saving the domain 
				if (! empty ( $params ['domains_selected'] )) {
					self::SaveDomainsDetails ( $params, $id );
				} else {

					if (! empty ( $params ['products'] )) {
						$date_end = null;
						
						// Get the product information
						$product = Products::getAllInfo($params ['products']);
						
						// Manage the details of the order
						if(!empty($params ['billingcycle_id'])){
							$months = BillingCycle::getMonthsNumber ( $params ['billingcycle_id'] );

							// Add months to the starting date 
							if ($months > 0) {
								$params ['date_end'] = Shineisp_Commons_Utilities::add_date ( $params ['date_start'], null, $months );
							}
						}
						
						// Format the dates before to save them in the database
						$params ['date_end'] = Shineisp_Commons_Utilities::formatDateIn ( $params ['date_end'] );
						$params ['date_start'] = Shineisp_Commons_Utilities::formatDateIn ( $params ['date_start'] );

						$details = new OrdersItems ();
						$details->order_id = $id;
						$details->quantity = $params ['quantity'];
						$details->cost = Products::getCost($params ['products']);
						$details->price = $params ['price'];
						$details->date_start = $params ['date_start'];
						$details->date_end = $params ['date_end'];
						$details->billing_cycle_id = !empty($params ['billingcycle_id']) ? $params ['billingcycle_id'] : null;
						$details->product_id = $params ['products'];
						$details->description = $params ['description'];
						$details->status_id = $params ['status_id'];
						
						if ($product['type'] =="hosting"){
							// Get all the product attributes
							$attrs = ProductsAttributes::getAttributebyProductID($params ['products']);

							// Create the system attributes parameters
							foreach ($attrs as $attr) {
								if($attr['system'] && !empty($attr['ProductsAttributesIndexes'][0]['value'])){
									$hostingplan[$attr['code']] = $attr['ProductsAttributesIndexes'][0]['value'];
								}
							}
							$details->parameters = json_encode ( $hostingplan );
						}
						
						$details->save ();
						$detail_id = $details->getIncremented ();
						
						// Attaching of the service a particular domain. It's not a mandatory field because the services and the products can be bought also without a domain 
						if (is_numeric ( $params ['referdomain'] ) && $params ['referdomain'] > 0) {
							$ordersitemsdomains = new OrdersItemsDomains ();
							$ordersitemsdomains->domain_id = $params ['referdomain'];
							$ordersitemsdomains->order_id = $id;
							$ordersitemsdomains->orderitem_id = $detail_id;
							$ordersitemsdomains->save ();
						}
					}
				}
				
				// Update the totals of the order selected
				$total = self::updateTotalsOrder ( $id );
				
				if (! empty ( $params ['paymentdate'] )) {
					//$payment_exist = Payments::findbyorderid ( $id, null, true );
					//if (count ( $payment_exist ) == 0) {
						$payment = new Payments ();
					//} else {
					//	$payment = Doctrine::getTable ( 'Payments' )->find ( $payment_exist [0] ['payment_id'] );
					//}
					$payment->paymentdate = Shineisp_Commons_Utilities::formatDateIn ( $params ['paymentdate'] );
					$payment->order_id = $id;
					$payment->bank_id = $params ['bank_id'];
					$payment->customer_id = $params ['customer_id'];
					$payment->description = $params ['payment_description'];
					$payment->reference = $params ['reference'];
					$payment->confirmed = $params ['confirmed'];
					//$payment->income = $total;
					$payment->income = $params['income'];
					$payment->save ();
				}
				
				OrdersItems::setNewStatus ( $id, $params ['status_id'] );
				self::updateTotalsOrder ( $id );
				
				return $id;
			}
		
		} catch ( Exception $e ) {
			return false;
		}
		
		return false;
	}

	private function SaveDomainsDetails($params, $orderid) {
		$i = 0;
		try {
			if (is_array ( $params )) {
				
				$months = BillingCycle::getMonthsNumber ( $params ['billingcycle_id'] );
				$date_end = Shineisp_Commons_Utilities::add_date ( $params ['date_start'], null, $months );
				
				foreach ( $params ['domains_selected'] as $domain_id ) {
					
					$domain = Domains::getAllInfo($domain_id, null, "*", true);
					
					// Get the price of the product selected
					$products = $domain[0]['DomainsTlds'];
					
					// Domain name
					$domain = $domain [0] ['domain'] . "." . $domain [0] ['DomainsTlds'] ['WhoisServers']['tld'];
					
					// Adding the domain in the order selected
					$details = new OrdersItems ();
					$details->order_id = $orderid;
					$details->quantity = $params ['quantity'];
					$details->price = $products ['registration_price'];
					$details->cost = $products ['registration_cost'];
					$details->date_start = Shineisp_Commons_Utilities::formatDateIn ( $params ['date_start'] );
					$details->date_end = $date_end;
					$details->billing_cycle_id = $params ['billingcycle_id'];
					$details->tld_id = $products ['tld_id'];
					$details->description = $domain;
					
					// Register the domain paramenter registration
					$details->parameters = json_encode ( array ('domain' => $domain, 'action' => 'registerDomain', 'tldid' => $products ['tld_id']));
					
					$details->save ();
					$orderitem_id = $details->getIncremented ();
					unset ( $details );
					
					// Set the domain properties
					$domain = Doctrine::getTable ( 'Domains' )->find ( $domain_id );
					$domain->orderitem_id = $orderitem_id;
					$domain->customer_id = $params ['customer_id'];
					$domain->save ();
					unset ( $domain );
					unset ( $products );
					$i ++;
				
				}
			}
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}
		
	
	/*
	 * cloneOrder
	 * Clone a order using its id
	 */
	public static function cloneOrder($idorder, $note = "", $sendemail=false) {
		
		if (! is_numeric ( $idorder )) {
			return false;
		}
		
		$oldOrder = self::find ( $idorder )->toArray ();
		$oldOrderDetails = OrdersItems::getAllDetails ( $idorder, null, true );
		
		$order = new Orders ();
		
		try {
			$order->customer_id = $oldOrder ['customer_id'];
			$order->isp_id = $oldOrder ['isp_id'];
			$order->order_date = date ( 'Y-m-d H:i:s' );
			$order->status_id = 9; // To be pay
			$order->total = $oldOrder ['total'];
			$order->vat = $oldOrder ['vat'];
			$order->grandtotal = $oldOrder ['grandtotal'];
			$order->note = $note;
			$order->save ();
			$id = $order->getIncremented ();
			
			foreach ( $oldOrderDetails as $details ) {
				
				$orderitem = new OrdersItems ();
				$date_end = Shineisp_Commons_Utilities::add_date ( date ( 'd-m-Y' ), null, BillingCycle::getMonthsNumber ( $details ['billing_cycle_id'] ) ); // Fixed Renew
				$isDomain = Products::CheckIfProductIsTLDDomain ( $details ['product_id'] );
				
				if ($details['Products']['type'] == "domain") {
					$orderitem->parameters = json_encode ( array ('domain' => $oldOrderDetails [0] ['description'], 'action' => 'renewDomain' ) );
				}
				
				$date_end = Shineisp_Commons_Utilities::add_date ( date ( $oldOrderDetails [0] ['date_end'] ), null, BillingCycle::getMonthsNumber ( $oldOrderDetails [0] ['billing_cycle_id'] ) * $oldOrderDetails [0] ['quantity'] );
				$orderitem->date_start = $oldOrderDetails [0] ['date_end']; // The new order will have the date_end as date_start
				$orderitem->date_end = $date_end;

				$orderitem->order_id = $id;
				$orderitem->product_id = $details ['product_id'];
				$orderitem->billing_cycle_id = $details ['billing_cycle_id'];
				$orderitem->autorenew = $details ['autorenew'];
				$orderitem->description = $details ['description'];
				$orderitem->quantity = $details ['quantity'];
				$orderitem->price = $details ['price'];
				$orderitem->cost = $details ['cost'];
				$orderitem->status_id = Statuses::id("processing", "orders"); // Processing status set
				$orderitem->save ();
				$detailid = $orderitem->getIncremented ();
				
				// If the product type is a service we have to add a record in the Orders_items_domains table
				// in order to join the domain with the service/order item
				if (! $isDomain) {
					$oldOID = OrdersItemsDomains::findIDsByOrderItemID ( $details ['detail_id'], 'domain_id', true );
					if (! empty ( $oldOID [0] ['domain_id'] ) && is_numeric ( $oldOID [0] ['domain_id'] )) {
						$ordersitemsdomains = new OrdersItemsDomains ();
						$ordersitemsdomains->domain_id = $oldOID [0] ['domain_id'];
						$ordersitemsdomains->order_id = $id;
						$ordersitemsdomains->orderitem_id = $detailid;
						$ordersitemsdomains->save ();
						Domains::setStatus ( $oldOID [0] ['domain_id'], Statuses::id("processing", "domains") ); // Set the domains status as processing
						Domains::setExpirationDate ( $oldOID [0] ['domain_id'], $date_end ); // Set the new expiration date
					}
				}
				unset ( $orderitem );
			}
			
			// Update Order
			self::updateTotalsOrder($id);
			
			// Send the email confirmation
			if($sendemail){
				self::sendOrder($id);
			}
			
			return $id;
		
		} catch ( Exception $e ) {
			echo $e->getMessage ();
			die ();
		}
		return true;
	}
	
	/*
	 * checkAutorenewProducts
	 * Check if within the list of products exist at least one service/domain set as Autorenewable.
	 * @return boolean
	 */
	private function checkAutorenewProducts($products) {
		foreach ( $products as $product ) {
			if($product['renew']){
				return true;
			}	
		}
		return false;
	}
	
	/**
	 * renewOrder
	 * Renew of Order 
	 * @return orderid integer
	 */
	public static function renewOrder($customer_id, $products) {
		$order = new Orders ();
		$isp = Isp::getActiveISP ();
		$i = 0;
		$total = 0;
		$vat = 0;
		
		if (! self::checkAutorenewProducts ( $products )) {
			return false;
		}
		
		if (is_numeric ( $customer_id )) {
			if (count ( $products ) > 0) {
				
				$order->customer_id = $customer_id;
				$order->isp_id = $isp ['isp_id'];
				$order->is_renewal = true;
				$order->order_date = date ( 'Y-m-d' );
				$order->status_id = Statuses::id("tobepaid", "orders"); // To be pay
				$order->save ();
				$orderid = $order->getIncremented ();
				
				// Add a fastlink to a order
				$link_exist = Fastlinks::findlinks ( $orderid, $customer_id, 'orders' );
				if (count ( $link_exist ) == 0) {
					$link = new Fastlinks ();
					$link->controller = "orders";
					$link->action = "edit";
					$link->params = json_encode ( array ('id' => $orderid ) );
					$link->customer_id = $customer_id;
					$link->sqltable = "orders";
					$link->id = $orderid;
					$link->code = Shineisp_Commons_Utilities::GenerateRandomString ();
					$link->save ();
				}
				
				
				if (count ( $products ) > 0) {
					foreach ( $products as $product ) {
						$orderitem = new OrdersItems ();
						
						if (is_numeric ( $product ['oldorderitemid'] )) {
							// Find the details of the old order item details
							$oldOrderDetails = OrdersItems::find ( $product ['oldorderitemid'], null, true );
							
							// Check if the last order is present in the db and check if the product must be renewed
							if (!empty ( $oldOrderDetails [0] ) && $product['renew']) {
								
								// Set the new order details fields
								$orderitem->order_id = $orderid;
								$orderitem->product_id = $oldOrderDetails [0] ['product_id'];
								$orderitem->billing_cycle_id = $oldOrderDetails [0] ['billing_cycle_id'];
								
								if ($product ['type'] == "service") {
									// Get the number of the months to be sum to the expiration date of the service
									$date_end = Shineisp_Commons_Utilities::add_date ( date ( $oldOrderDetails [0] ['date_end'] ), null, BillingCycle::getMonthsNumber ( $oldOrderDetails [0] ['billing_cycle_id'] ) * $oldOrderDetails [0] ['quantity'] );
									
									$orderitem->date_start = $oldOrderDetails [0] ['date_end']; // The new order will have the date_end as date_start
									$orderitem->date_end = $date_end;
								
								} elseif ($product ['type'] == "domain") {
									// Get the number of the months to be sum to the expiration date of the domain
									$parameters = json_decode($oldOrderDetails [0] ['parameters'], true);
									
									$date_end = Shineisp_Commons_Utilities::add_date ( date ( $product ['expiring_date'] ), null, BillingCycle::getMonthsNumber ( $oldOrderDetails [0] ['billing_cycle_id'] ) * $oldOrderDetails [0] ['quantity'] );
									$orderitem->date_start = $product ['expiring_date']; // The new order will have the date_end as date_start
									$orderitem->tld_id = !empty($parameters['tldid']) ? $parameters['tldid'] : NULL;
									$orderitem->date_end = $date_end;
									$orderitem->parameters = json_encode ( array ('domain' => trim($parameters['domain']), 'action' => 'renewDomain', 'tldid' => $parameters['tldid'] ) );
								}
								
								$orderitem->autorenew = $oldOrderDetails [0] ['autorenew'];
								$orderitem->description = $oldOrderDetails [0] ['description'];
								$orderitem->quantity = $oldOrderDetails [0] ['quantity'];
								$orderitem->status_id = Statuses::id("tobepaid", "orders"); // To be payed status set
								$orderitem->price = $oldOrderDetails [0] ['price'];
								$orderitem->cost = $oldOrderDetails [0] ['cost'];
								
								$orderitem->save ();
								$orderitemid = $orderitem->getIncremented ();
								
								// sum of all the products prices 
								$total = $total + ($oldOrderDetails [0] ['price'] * $oldOrderDetails [0] ['quantity']);
								
								// Check if the product has some tax to be added
								$tax = Taxes::getTaxbyProductID ( $oldOrderDetails [0] ['product_id'] );
								if (isset ( $tax ['percentage'] ) && $tax ['percentage'] > 0) {
									$vat = $vat + (($oldOrderDetails [0] ['price'] * $oldOrderDetails [0] ['quantity']) * $tax ['percentage']) / 100;
								}
								
								// If the product type is a service we have to add a record in the Orders_items_domains table
								// in order to join the service with the reference domain 
								if ($product ['type'] == "service") {
									$oldOID = OrdersItemsDomains::findIDsByOrderItemID ( $product ['oldorderitemid'], null, true );
									if (isset ( $oldOID [0] )) { // Some services are not linked to a domain
										$ordersitemsdomains = new OrdersItemsDomains ();
										$ordersitemsdomains->domain_id = $oldOID [0] ['domain_id'];
										$ordersitemsdomains->order_id = $orderid;
										$ordersitemsdomains->orderitem_id = $orderitemid;
										$ordersitemsdomains->save ();
									}
								}
								$i ++;
							}
						}
					}
					
					// If there are items to be save ...
					if ($i > 0) {
						// Update Order
						self::updateTotalsOrder($orderid);
					}
					
					return $orderid;
				
				}
			}
		}
	}
	
	/**
	 * Create an order using only one product 
	 * @param $product
	 * @param $type [domain, service]
	 * @param $iddomgen [id of the domain or the id of the generic product]
	 * @param $customer_id
	 * @param $amount
	 * @param $note
	 * @return void
	 */
	public static function createOrderForSingleProduct(array $product, $type, $iddomgen, $customer_id, $amount, $note = "") {
		$order = new Orders ();
		try {
			$tax = Taxes::getTaxbyProductID ( $product ['id'] );
			if (is_numeric ( $amount ) && $amount > 0) {
				// Creating a new Order.
				$order->customer_id = $customer_id;
				$order->isp_id = Isp::getActiveISP ();
				$order->order_date = date ( 'Y-m-d' );
				$order->note = $note;
				$order->status_id = Statuses::id("processing", "orders"); // Processing
				

				if (isset ( $tax ['percentage'] ) && $tax ['percentage'] > 0) {
					$order->total = $amount / ((100 + $tax ['percentage']) / 100);
					$order->vat = $amount - $order->total;
					$order->grandtotal = $amount;
				} else {
					$order->total = $amount;
					$order->vat = 0;
					$order->grandtotal = $amount;
				}
				
				$order->save ();
				$id = $order->getIncremented ();
				
				// Attaching the order item to the order previously created. 
				$orderitem = new OrdersItems ();
				$date_end = Shineisp_Commons_Utilities::add_date ( date ( 'd-m-Y' ), null, 12 ); // Fixed Renew
				

				$orderitem->order_id = $id;
				$orderitem->product_id = $product ['id'];
				$orderitem->billing_cycle_id = 1;
				$orderitem->date_start = date ( 'Y-m-d' );
				$orderitem->date_end = $date_end;
				$orderitem->autorenew = true;
				$orderitem->description = $product ['name'];
				$orderitem->cost = $product ['cost'];
				$orderitem->quantity = 1;
				if (isset ( $tax ['percentage'] ) && $tax ['percentage'] > 0) {
					$orderitem->price = $amount / ((100 + $tax ['percentage']) / 100);
				} else {
					$orderitem->price = $amount;
				}
				$orderitem->status_id = Statuses::id("processing", "orders"); // Processing status set
				$orderitem->save ();
				$detailid = $orderitem->getIncremented ();
				
				// If the product type is not a domain we have to add a record in the Orders_items_domains table
				// in order to join the domain with the order detail
				if ($type != "domain") {
					$ordersitemsdomains = new OrdersItemsDomains ();
					$ordersitemsdomains->domain_id = $iddomgen;
					$ordersitemsdomains->order_id = $id;
					$ordersitemsdomains->orderitem_id = $detailid;
					$ordersitemsdomains->save ();
					
					Domains::setStatus ( $iddomgen, Statuses::id("processing", "domains") ); // Set the domains status as processing
					Domains::setExpirationDate ( $iddomgen, $date_end ); // Set the new expiration date
				}
				return $id;
			}
		} catch ( Exception $e ) {
			echo $e->getMessage ();
			die ();
		}
	}
	
	
	/**
	 * Create and Retrieve the OrderID
	 * @param integer $id
	 * @return Orders 
	 */
	public static function create($customerId, $statusId = "", $note = ""){
		
		$ISPid = Isp::getActiveISPID ();
		
		if(is_numeric($customerId)){
			$order = new Orders ();
			$order['customer_id'] = $customerId;
			$order['order_date'] = date ( 'Y-m-d H:i:s' );
			$order['expiring_date'] = date ( 'Y-m-j' , strtotime ( '30 days' , strtotime ( $order['order_date'] ) ));
			$order['isp_id'] = Isp::getActiveISPID ();
			$order['status_id'] = is_numeric($statusId) ? $statusId : Statuses::id("tobepaid", "orders");
			
			// Save the data
			$order->save();
			
			// Assign the order var to the static var
			self::$order = $order;
			
			// Create the fastlink for the order
			Fastlinks::CreateFastlink('orders', 'edit', json_encode ( array ('id' => $order['order_id'] ) ), 'orders', $order['order_id'], $customerId);
			
			// Add a message within the order
			Messages::addMessage($note, $customerId, null, $order['order_id']);
			
			// Return the order object var
			return self::$order;
			
		}else{
			throw new Exception('Customer ID has been not found', 1001);
		}
		
		return null;
	}
	
	/**
	 * Add a domain into an order
	 * 
	 * 
	 * @param integer $orderID
	 * @param integer $domain
	 * @param integer $tldID
	 */
	public static function addOrderItem($orderid, $description="", $qta=1, $billingid=3, $price=0, $cost=0, $setupfee=0, array $params=array()){
		$item = new OrdersItems();
		
		if(!empty($orderid)){
			
			$item['order_id'] = $orderid;
			$item['tld_id'] = !empty($params['tldid']) ? $params['tldid'] : null;
			$item['product_id'] = !empty($params['productid']) ? $params['productid'] : null;
			$item['status_id'] = Statuses::id("tobepaid", "orders");
			$item['date_start'] = date ( 'Y-m-d H:i:s' );
				
			// Manages all the products that have no recursion payment
			$item['description'] = $description;
			$item['billing_cycle_id'] = $billingid; 
			$item['quantity'] = $qta;
			$item['price'] = $price;
			
			// Count of the day until the expiring
			$months = BillingCycle::getMonthsNumber ( $billingid );
			if($months > 0){
				$totmonths = intval ( $qta * $months );
				
				// Calculate the total of the months 
				$date_end = Shineisp_Commons_Utilities::add_date ( date ( 'd-m-Y H:i:s' ), null, $totmonths );
				
				if($months >= 12){
					$qty = $months / 12;
				}else{
					$qty = 1;
				}
				
				$item['price'] = $price * $qty; 
				$item['date_end'] = Shineisp_Commons_Utilities::formatDateIn($date_end);
			}else{
				$item['date_end'] = null;
			}
			
			$item['parameters'] = json_encode ($params);
			$item['cost'] = $cost;
			$item['setupfee'] = $setupfee;
		
			$item->save();
			
			self::updateTotalsOrder($orderid);
			
			return $item;
		}
		
		return null;
		
	}
	
	
	/**
	 * Add an item in the order 
	 * @param integer $productId
	 * @param integer $qta
	 * @param integer $billing [default 3 = Annual]
	 * @param string $description
	 * @param array $options
	 * @return array $item
	 */
	public static function addItem($productId, $qta = 1, $billing = 3, $trancheID = null, $description = null, array $options = array()) {
		
		// Check if the variable has been set correctly
		if(is_numeric($productId)){
		
			// Get the product information
			$product = Products::getAllInfo($productId);
			
			if(!empty($product)){
				if(empty(self::$order)){
					throw new Exception('The order has not been created yet', 1000);
				}
				
				$order = self::$order;
				$item = new OrdersItems();
				
				$item['order_id'] = $order['order_id'];
				$item['status_id'] = Statuses::id("tobepaid", "orders");
				$item['product_id'] = $productId;
				$item['date_start'] = date ( 'Y-m-d H:i:s' );
					
				// Manages all the products that have no recursion payment
				$item['description'] = $product ['name'];
				$item['billing_cycle_id'] = $billing; 
				$item['quantity'] = $qta;
				$item['price'] = $product['price_1'];
				
				// Count of the day until the expiring
				$months = BillingCycle::getMonthsNumber ( $billing );
				if($months > 0){
					$totmonths = intval ( $qta * $months );
					
					// Calculate the total of the months 
					$date_end = Shineisp_Commons_Utilities::add_date ( date ( 'd-m-Y H:i:s' ), null, $totmonths );
					
					if($months >= 12){
						$qty = $months / 12;
					}else{
						$qty = 1;
					}
					
					$item['price'] = $product['price_1'] * $qty; 
					$item['date_end'] = Shineisp_Commons_Utilities::formatDateIn($date_end);
				}else{
					$item['date_end'] = null;
				}
				
				// IMPORTANT //
				// TODO: This condition is temporary: $product ['type'] != "domain" 

				// Check if the product is a recurring product
				if (!empty($trancheID) && is_numeric($trancheID) && $product ['type'] != "domain") {   
					
					// Count of the day until the expiring
					$tranche = ProductsTranches::getTranchebyId ( $trancheID );
					
					// Set the price of the product with the billing tranche value
					$item['price'] = $tranche ['price'] * $tranche['BillingCycle']['months'];
				}
				
				// Check if the product is a domain
				if ($product ['type'] == "domain") {
					$item['parameters'] = json_encode ( array ('domain' => $options['domain'], 'action' => $options['action'], 'authcode' => !empty($options['authcode']) ? $options['authcode'] : null) );
					
				}elseif($product ['type'] == "hosting"){
					
					// Get all the product attributes
					$attrs = ProductsAttributes::getAttributebyProductID($productId);
					
					foreach ($attrs as $attr) {
						if($attr['system'] && !empty($attr['ProductsAttributesIndexes'][0]['value'])){
							$hostingplan[$attr['code']] = $attr['ProductsAttributesIndexes'][0]['value'];
						}
					}
					$item['parameters'] = json_encode ( $hostingplan );
				}	
				
				$item['cost'] = $product ['cost'];
				$item['setupfee'] = $product ['setupfee'];
				$item['description'] = !empty($description) ? $description : $product['name'];
				
				$item->save();
				
				// Update the totals
				if(!empty($order['order_id'])){
					self::updateTotalsOrder($order['order_id']);
				}
				
				return $item;
			}
		}
		
		return null;
	}
	
	/**
	 * Create an order with many products
	 * 
	 *  
	 * @param $product
	 * @return integer $orderID
	 */
	public static function createOrderWithMultiProducts(array $products, $customer_id, $type = "domain") {
		$order = new Orders ();
		try {
			$ISPid = Isp::getActiveISPID ();
			
			// Creating a new Order.
			$order->customer_id = $customer_id;
			$order->isp_id = $ISPid;
			$order->order_date = date ( 'Y-m-d' );
			$order->status_id = Statuses::id("tobepaid", "orders"); // To pay
			$order->save ();
			
			$id = $order->getIncremented ();
			
			// Add a fastlink to a order
			$link_exist = Fastlinks::findlinks ( $id, $customer_id, 'orders' );
			if (count ( $link_exist ) == 0) {
				$link = new Fastlinks ();
				$link->controller = "orders";
				$link->action = "edit";
				$link->params = json_encode ( array ('id' => $id ) );
				$link->customer_id = $customer_id;
				$link->sqltable = "orders";
				$link->id = $id;
				$link->code = Shineisp_Commons_Utilities::GenerateRandomString ();
				$link->save ();
			}
			
			foreach ( $products as $product ) {
				
				$product = Domains::getAllInfo ( $product, null, null, true );
				
				// Attaching the order item to the order previously created. 
				$orderitem = new OrdersItems ();
				$date_end = Shineisp_Commons_Utilities::add_date ( date ( 'd-m-Y' ), null,  365 ); // Fixed Renew

				$orderitem->order_id = $id;
				$orderitem->product_id = $product [0] ['Products'] ['product_id'];
				$orderitem->billing_cycle_id = 1;
				$orderitem->date_start = date ( 'Y-m-d H:i:s' );
				$orderitem->date_end = $date_end;
				$orderitem->autorenew = true;
				$orderitem->description = $product [0] ['domain'] . "." . $product [0] ['tld'];
				$orderitem->quantity = 1;
				
				$tax = Taxes::getTaxbyProductID ( $product [0] ['Products'] ['product_id'] );
				
				$orderitem->price = $product [0] ['Products'] ['price_1'];
				$orderitem->cost = $product [0] ['Products'] ['cost'];
				
				$orderitem->status_id = Statuses::id("processing", "orders"); // Processing status set
				$orderitem->save ();
				$detailid = $orderitem->getIncremented ();
				
				// Set the domains status as processing
				Domains::setStatus ( $product [0] ['domain_id'], 6 );
			}
			
			// Update the total of the order
			self::updateTotalsOrder ( $id );
			return $id;
		
		} catch ( Exception $e ) {
			echo $e->getMessage ();
			die ();
		}
	}
	
	/**
	 * isInvoiced
	 * Check if the order has been invoiced
	 * @param boolean
	 */
	public static function isInvoiced($orderid) {
		$record = Doctrine_Query::create ()->select ( 'o.order_id, o.invoice_id' )
						->from ( 'Orders o' )
						->where ( "order_id = ?", $orderid )
						->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		return !empty($record[0]['invoice_id']) ? $record[0]['invoice_id'] : false;
	}
	
	/*
	 * Complete 
	 * this function complete the order
	 * set the payment, create the domain tasks, and set the status of the new domains
	 */
	public static function Complete($orderid, $sendemail=false) {
		
		if(!empty($orderid) && is_numeric($orderid) && !self::isInvoiced($orderid)){
			
			// Check if the order contains domains, if yes it creates the domains and the registration/transfer tasks
			$domains = self::getDomainsFromOrder ( $orderid );
			
			if (count ( $domains ) > 0) {
				
				// Create the domain name in the database
				$domainIDs = Domains::CreateDomainsbyOrderID ( $orderid );
				
				// Prepare the domain tasks
				foreach ( $domains as $data ) {
					$domainsdata [] = array ('domain' => $data ['domain'], 'action' => $data ['action'], 'registrar_id' => $data ['registrar_id'] );
				}
				
				// Save the tasks to do by cronjob
				if (! empty ( $domainsdata )) {
					// Add the domains found in the task table action in order to execute the register/transfer procedure
					DomainsTasks::AddTasks ( $domainsdata );
				} 
			}
			
			// Add the panel action tasks
			$hostingplans = self::get_hostingplans_from_order($orderid);
			foreach ( $hostingplans as $data ) {
				PanelsActions::AddTask($data['customer_id'], $data['orderitem_id'], "fullProfile", $data['parameters']);
			}
			
			// Set the status of the orders and the status of the items within the order just created
			self::set_status ( $orderid, Statuses::id("complete", "orders") ); // Complete
			OrdersItems::setNewStatus ( $orderid, Statuses::id("complete", "orders") ); // Complete
			
			// Create the invoice
			$invoiceid = Invoices::Create ( $orderid );
			
			if($sendemail){
				Invoices::sendInvoice ( $invoiceid );
			}
			
			// log
			Shineisp_Commons_Utilities::logs ( "Order completed: $orderid", "orders.log" );
			
			return $orderid;
		}
		
		return false;		
	}
	
	/*
	 * CreateDomainTasks
	 * create the tasks for each domain within a order
	 * Add the domains found in the task table action in order to execute the register/transfer procedure
	 */
	public static function CreateDomainTasks($OrderID) {
		// Check if the order contains domains
		if (is_numeric ( $OrderID )) {
			$domains = self::getDomainsFromOrder ( $OrderID );
			if (count ( $domains ) > 0) {
				
				// Create the new domains 
				for($i = 0; $i < count ( $domains ); $i ++) {
					$domains [$i] ['domain_id'] = Domains::Create ( $domains [$i] ['domain'], $domains[$i]['tld_id'], $domains [$i] ['customer_id'], $domains [$i] ['orderitem_id'] );
				}
				
				// Add the tasks in order to register or transfer them
				$retval = DomainsTasks::AddTasks ( $domains );
				if ($retval === true) {
					return true;
				} else {
					return $retval;
				}
			}
		}
	}
	
	/**
	 * getAll
	 * Get records the orders from the DB
	 * @return array
	 */
	public static function getAll($fields = "*") {
		
		// Defining the url sort
		return Doctrine_Query::create ()->select ( $fields )->from ( 'Orders o' )->leftJoin ( 'o.Customers c' )->leftJoin ( 'c.Customers r' )->leftJoin ( 'o.Invoices i' )->leftJoin ( 'o.OrdersItems oi' )->leftJoin ( 'oi.Products p' )->leftJoin ( 'o.Statuses s' )->orderBy ( 'order_date desc' )->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * find
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id) {
		return Doctrine::getTable ( 'Orders' )->find ( $id );
	}
	
	/**
	 * find
	 * Get a record by externalID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function findbyExternalID($id) {
		return Doctrine::getTable ( 'Orders' )->findOneBy ( 'external_id', $id );
	}
	
	/**
	 * find_all_not_paid_ordersbyCustomerID
	 * Get all the not payed orders records
	 * @param $id
	 * @return array Record
	 */
	public static function find_all_not_paid_ordersbyCustomerID($customerid) {
		$dq = Doctrine_Query::create ()->from ( 'Orders o' )
		->leftJoin ( 'o.Invoices i' )
		->leftJoin ( 'o.Statuses s' )
		->where ( "o.customer_id = ?", $customerid )
		->andWhere ( "s.status_id = ?", Statuses::id("tobepaid", "orders") );
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * Get all the not paid orders 
	 * 
	 * 
	 * @return ArrayObject 
	 */
	public static function find_all_not_paid_orders() {
		$dq = Doctrine_Query::create ()->from ( 'Orders o' )
										->leftJoin ( 'o.Statuses s' )
										->where ( "s.status_id = ?", Statuses::id("tobepaid", "orders") );
										
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * Get all the expired orders 
	 * 
	 * @param Date $date 
	 * @return ArrayObject 
	 */
	public static function find_all_expired_orders($date) {
		$dq = Doctrine_Query::create ()->from ( 'Orders o' )
										->leftJoin ( 'o.Statuses s' )
										->where ( "s.status_id = ?", Statuses::id("tobepaid", "orders") )
										->andWhere("o.expiring_date <= ?", $date)
										->andWhere('o.is_renewal = ?', FALSE);
										
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * Delete
	 * Delete an order using its ID and the customer id.
	 * @param $id, $customerid
	 * @return boolean
	 */
	public static function DeleteByID($id, $customerid=null) {
		$dq = Doctrine_Query::create ()->delete ()->from ( 'Orders o' )
					->where ( 'order_id = ?', $id );
					
		if(is_numeric($customerid)){
			$dq->andWhere ( "customer_id = ?", $customerid );
		}
				
		return $dq->execute ();
	}
	
	/**
	 * Check if the order can be deleted
	 * @param $id, $customerid
	 * @return boolean
	 */
	public static function IsEraseable($id, $customerid=null) {
		$dq = Doctrine_Query::create ()->from ( 'Orders o' )
					->where ( 'order_id = ?', $id )
					->limit(1);
					
		if(is_numeric($customerid)){
			$dq->andWhere ( "customer_id = ?", $customerid );
		}
					
		$record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY);
		
		// If the order is not a renewal or there is not any invoice to be paid then it can be deleted
		if(!empty($record[0])){
			if($record[0]['is_renewal']){  // It is a renewal order
				return false;
			}elseif(!empty($record[0]['invoice_id'])){ // It is a invoiced order
				return false;
			}else{ // other cases
				return true;
			}
		}
		return false;
	}
	
	/**
	 * Check if the user can write comments in the order 
	 * 
	 * @param $id
	 * @return boolean
	 */
	public static function IsCommentable($id) {
		$dq = Doctrine_Query::create ()->from ( 'Orders o' )
					->where ( 'order_id = ?', $id )
					->limit(1);
					
		$record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY);
		
		if(!empty($record[0])){
			if($record[0]['status_id'] == Statuses::id('tobepaid', 'orders')){ 
				return true;
			}elseif($record[0]['status_id'] == Statuses::id('processing', 'orders')){ 
				return true;
			}
		}
		return false;
	}
	
	/**
	 * setDeleted
	 * Set the order as deleted
	 * @param $id, $customerid
	 * @return boolean
	 */
	public static function setDeleted($id, $customerid) {
		$dq = Doctrine_Query::create ()->update('Orders o' )
					->set('status_id', Statuses::id("deleted", "orders"))
					->where ( 'order_id = ?', $id )
					->andWhere ( "customer_id = ?", $customerid );
		$dq->execute ();
		
		$dq = Doctrine_Query::create ()->update('OrdersItems oi' )
					->set('status_id', Statuses::id("deleted", "orders"))
					->where ( 'order_id = ?', $id );
		$dq->execute ();
		
		$isp = Isp::getActiveISP ();
		
		// Get the template from the main email template folder
		$retval = Shineisp_Commons_Utilities::getEmailTemplate ( 'order_deleted' );
	
		$customer = Customers::getAllInfo($customerid);
		
		if ($retval) {
			$subject = $retval ['subject'];
			$Template =  $retval ['template'] ;
			$subject = str_replace ( "[orderid]", $id, $subject );
			$Template = str_replace ( "[orderid]", $id, $Template );
			$Template = str_replace ( "[fullname]", $customer ['lastname'] . " " . $customer ['firstname'], $Template );
			$Template = str_replace ( "[signature]", $isp ['company'] . "\n" . $isp ['website'], $Template );
			Shineisp_Commons_Utilities::SendEmail ( $isp ['email'], $customer ['email'], $isp ['email'], $subject, $Template);
		}
		return true;
	}
	
	/**
	 * DeleteByCustomerID
	 * Delete all the orders of a selected customer
	 * @param $customerid
	 * @return boolean
	 */
	public static function DeleteByCustomerID($customerid) {
		$dq = Doctrine_Query::create ()->delete ()->from ( 'Orders o' )->where ( "customer_id = ?", $customerid );
		return $dq->execute ();
	}
	
	/**
	 * findByCustomerID
	 * Get a record by CustomerID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function findByCustomerID($id) {
		return Doctrine::getTable ( 'Orders' )->findBy ( 'customer_id', $id );
	}
	
	/**
	 * getList
	 * Get a list ready for the html select object
	 * @return array
	 */
	public static function getList($empty = false) {
		$items = array ();
		$registry = Zend_Registry::getInstance ();
		$translations = $registry->Zend_Translate;
		
		$dq = Doctrine_Query::create ()->select ( "order_id, DATE_FORMAT(order_date, '%d/%m/%Y') as orderdate, s.status as status, CONCAT(c.firstname, ' ', c.lastname, ' ', c.company) as fullname" )->from ( 'Orders o' )->leftJoin ( 'o.Customers c' )->leftJoin ( 'o.Statuses s' );
		$retval = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		if ($empty) {
			$items [] = $translations->translate ( 'Select ...' );
		}
		foreach ( $retval as $c ) {
			$items [$c ['order_id']] = $c ['orderdate'] . " - " . $c ['order_id'] . " - " . $c ['fullname'] . " - [" . $c['status']. "] ";
		}
		
		return $items;
	}
	
	/**
	 * updateTotalsOrder
	 * Get a list ready for the html select object
	 * @return array
	 */
	public static function updateTotalsOrder($id) {
		$total = 0;
		$vat = 0;
		$costs = 0;
		try {
			$order = self::find ( $id );
			
			// If the status is COMPLETE the totals will be not changed
			if($order->status_id == Statuses::id("complete", "orders") ){
				return $order->total + $order->vat;
			}
			
			if ($order && is_numeric ( $id )) {
				 
				// Get all the order details
				$details = OrdersItems::getAllDetails($id, null, true);
				if(!empty($details[0])){
					$isTaxFree = Customers::isTaxFree($details [0] ['Orders'] ['Customers'] ['customer_id']);
	
					foreach ( $details as $detail ) {
						
						if (is_numeric ( $detail ['price'] ) && is_numeric ( $detail ['quantity'] )) {
							$totemp = ($detail ['price'] * $detail ['quantity']) + $detail ['setupfee'];
							$total += $totemp;
							$costs +=  $detail ['cost'];
						}
						
						if(!$isTaxFree){
							// If the product is a domain 
							if(!empty($detail['tld_id'])){
								$tax = Taxes::getTaxbyTldID($detail ['tld_id']);	
							}else{ // If not
								$tax = Taxes::getTaxbyProductID($detail ['product_id']);
							}
						
							if(!empty($tax['percentage'])){
								$vat += is_numeric ( $totemp ) ? ($totemp * $tax['percentage']) / 100 : 0;
							}
						}
					}
	
					$order->vat = $vat;
					$order->total = $total;
					$order->cost = $costs;
					$order->grandtotal = $total + $vat;
					
					// Update the order data
					$order->save ();
					return $total + $vat;
				}
				
				return 0;
			}
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}
	
	/**
	 * getStatus
	 * Get the status of the order  
	 * @param $id
	 * @return Doctrine Record / Array
	 */
	public static function getStatus($id, $retarray = false) {
		$registry = Zend_Registry::getInstance ();
		$translations = $registry->Zend_Translate;
		$dq = Doctrine_Query::create ()->select ( 'o.order_id, s.status' )->from ( 'Orders o' )->leftJoin ( 'o.Statuses s' )->where ( "order_id = $id" );
		
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$record = $dq->execute ( array (), $retarray );
		return ! empty ( $record [0] ['Statuses'] ['status'] ) ? $translations->translate ( $record [0] ['Statuses'] ['status'] ) : "N/A";
	}
	
	/**
	 * getAllInfo
	 * Get all data starting from the orderID 
	 * @param $id
	 * @return Doctrine Record / Array
	 */
	public static function getAllInfo($id, $fields = "*", $retarray = false, $owner = false) {
		try {
			$dq = Doctrine_Query::create ()->from ( 'Orders o' )
											->leftJoin ( 'o.Isp i' )
											->leftJoin ( 'o.Invoices in' )
											->leftJoin ( 'o.OrdersItems oi' )
											->leftJoin ( 'oi.BillingCycle bc' )
											->leftJoin ( 'o.OrdersItemsDomains oid' )
											->leftJoin ( 'oid.Domains d' )
											->leftJoin ( 'd.DomainsTlds tld' )
											->leftJoin ( 'tld.WhoisServers w' )
											->leftJoin ( 'oi.Products p' )
											->leftJoin ( 'p.Taxes t' )
											->leftJoin ( 'o.Customers c' )
											->leftJoin ( 'c.Addresses a' )
											->leftJoin ( 'a.Countries co' )
											->leftJoin ( 'o.Statuses s' )
											->where ( "order_id = $id" )
											->limit ( 1 );
			
			if($fields != "*"){
				$dq->select ( $fields );
			}
			
			if (is_numeric($owner)) {
				$dq->addWhere ( '(o.customer_id = ? OR c.parent_id = ?)', array($owner, $owner) );
			}
			
			$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
			$items = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			
			return $items;
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}
	
	/**
	 * Get the customer from the order 
	 * @param $orderid
	 * @return Doctrine Record / Array
	 */
	public static function getCustomer($orderid) {
		try {
			$dq = Doctrine_Query::create ()->select ( 'order_id, customer_id' )->from ( 'Orders o' )->leftJoin ( 'o.Customers c' )->where ( "order_id = $orderid" )->limit ( 1 );
			
			$record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			
			if (! empty ( $record [0] ['customer_id'] ) && is_numeric ( $record [0] ['customer_id'] )) {
				return $record [0] ['customer_id'];
			} else {
				return false;
			}
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}
	
	/*
	 * Get all the details from a order
	 */
	public static function getDetails($id) {
		$dq = Doctrine_Query::create ()->select ( "
                     oid.relationship_id, 
                     dm.domain_id, 
                     dt.tld_id,
                     ws.tld,
                     CONCAT(dm.domain, '.',ws.tld) as domain, 
                     d.quantity, 
                     d.description, 
                     d.price as price, 
                     d.setupfee as setupfee, 
                     t.percentage as taxpercentage,
                     DATE_FORMAT(d.date_start, '%d/%m/%Y') as start, 
                     DATE_FORMAT(d.date_end, '%d/%m/%Y') as end" )
		->from ( 'OrdersItems d' )
		->leftJoin ( 'd.Orders o' )
		->leftJoin ( 'd.OrdersItemsDomains oid ON d.detail_id = oid.orderitem_id' )
		->leftJoin ( 'oid.Domains dm' )
		->leftJoin ( 'd.Products p' )
		->leftJoin ( 'dm.DomainsTlds dt' )
		->leftJoin ( 'dt.WhoisServers ws' )
		->leftJoin ( 'p.Taxes t' )
		->leftJoin ( 'o.Customers c' )
		->leftJoin ( 'd.Statuses s' )
		->where ( 'o.order_id = ?', $id );
		$rs = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		return $rs;
	}
		
	/**
	 * Check if the customer is the owner of the selected order 
	 * 
	 * 
	 * @param $orderid
	 * @param $customer_id
	 * @return Array
	 */
	public static function isOwner($orderid, $customer_id) {
		try {
			$dq = Doctrine_Query::create ()->select ( 'Count(*) as total' )
			->from ( 'Orders o' )
			->leftJoin( 'o.Customers c' )
			->where ( "order_id = ?", $orderid )
			->andWhere ( "o.customer_id = ?", $customer_id )
			->orWhere ( "c.customer_id = ?", $customer_id )
			->limit ( 1 );
			
			$record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			if (! empty ( $record [0] ['total'] ) && $record [0] ['total'] > 0) {
				return true;
			} else {
				return false;
			}
			
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}
	
	/*
	 * getDomainsFromOrder
	 * Get all the domains requested from the order list items.
	 * @param $orderID
	 */
	public static function getDomainsFromOrder($orderID) {
		$domains = array ();
		$i = 0;
		$items = OrdersItems::getAllDetails ( $orderID, null, true );
		if (count ( $items ) > 0) {
			foreach ( $items as $item ) {
				#if (!empty($item ['tld_id'])) {
					$params = json_decode ( $item ['parameters'], true );
					if (! empty ( $params ['domain'] )) {
						$domains [$i] ['orderitem_id'] = $item ['detail_id'];
						$domains [$i] ['customer_id'] = $item ['Orders'] ['Customers'] ['customer_id'];
						$domains [$i] ['action'] = ! empty ( $params ['action'] ) ? $params ['action'] : "registerDomain";
						$domains [$i] ['domain'] = trim ( strtolower ( $params ['domain'] ) );
						$domains [$i] ['authinfocode'] = !empty($params ['authinfocode']) ? trim ( $params ['authinfocode']) : "";
						$domains [$i] ['tld_id'] = Domains::getDomainIDbyName($domains [$i] ['domain']);
						$domains [$i] ['registrar_id'] = Domains::getRegistrarsIDbyName($params ['domain']);
						$i ++;
					}
				#}
			}
		}
		return $domains;
	}
	
	/**
	 * Get all the hosting plans requested from the order list items.
	 * @param $orderID
	 * @return ArrayObject
	 */
	public static function get_hostingplans_from_order($orderID) {
		$hplan = array ();
		$i = 0;
		$items = OrdersItems::getAllDetails ( $orderID, null, true );
		if (count ( $items ) > 0) {
			foreach ( $items as $item ) {
				if ($item ['Products'] ['type'] == "hosting") {
					if (! empty ( $item ['parameters'] )) {
						$hplan [$i] ['orderitem_id'] = $item ['detail_id'];
						$hplan [$i] ['customer_id'] = $item ['Orders'] ['Customers'] ['customer_id'];
						$hplan [$i] ['parameters'] = $item ['parameters'];
						$i ++;
					}
				}
			}
		}
		return $hplan;
	}
	
	public static function getSetupfee($orderID) {
		$setupfee = 0;
		
		$items = OrdersItems::getAllDetails ( $orderID, null, true );
		if (count ( $items ) > 0) {
			foreach ( $items as $item ) {
				$tax = Taxes::getTaxbyProductID ( $item ['Products'] ['product_id'] );
				if ($tax ['percentage'] > 0) {
					$setupfee += number_format ( ($item ['setupfee'] * (100 + $tax ['percentage']) / 100), 2 );
				} else {
					$setupfee += number_format ( $item ['setupfee'], 2 );
				}
			
			}
		}
		
		return $setupfee;
	}
	
	/*
     * sendOrder
     * send the order by email
     * @param $orderID
     */
	public static function sendOrder($orderid) {
		$bank = "";
		if (is_numeric ( $orderid )) {
			
			$order = self::getAllInfo ( $orderid, null, true );
			
			//if customer comes from reseller
			if ($order [0] ['Customers'] ['parent_id']) {
				$customer_email = Contacts::getEmails($order [0] ['Customers'] ['parent_id']);

				$invoice_dest = Customers::getAllInfo ( $order [0] ['Customers'] ['parent_id'] );
				$customer = $invoice_dest ['firstname'] . " " . $invoice_dest ['lastname'];
				$customer .= ! empty ( $invoice_dest ['company'] ) ? " - " . $invoice_dest ['company'] : "";
				$fastlink = Fastlinks::findlinks ( $orderid, $order [0] ['Customers'] ['parent_id'], 'orders' );
			} else {
				$customer_email = Contacts::getEmails($order [0] ['Customers'] ['customer_id']);
				
				$customer = $order [0] ['Customers'] ['firstname'] . " " . $order [0] ['Customers'] ['lastname'];
				$customer .= ! empty ( $order [0] ['Customers'] ['company'] ) ? " - " . $order [0] ['Customers'] ['company'] : "";
				$fastlink = Fastlinks::findlinks ( $orderid, $order [0] ['Customers'] ['customer_id'], 'orders' );
			}
			
			$email = $order [0] ['Isp'] ['email'];
			
			$bankInfo = Banks::getBankInfo();
			if(!empty($bankInfo['description'])){
				$bankInfo['description'] = str_replace("<br />", "\n", $bankInfo['description']);
				$bank = strip_tags($bankInfo['description']);
			}
			
			$signature = $order [0] ['Isp'] ['company'];
			
			if (! empty ( $fastlink [0] ['code'] )) {
				$url = "http://" . $_SERVER ['HTTP_HOST'] . "/index/link/id/" . $fastlink [0] ['code'];
			} else {
				$url = "http://" . $_SERVER ['HTTP_HOST'];
			}
			
			$date = explode ( "-", $order [0] ['order_date'] );
			
			$retval = Shineisp_Commons_Utilities::getEmailTemplate ( 'new_order' );
			if ($retval) {
				$subject = $retval ['subject'];
				$subject = str_replace ( "[orderid]", sprintf ( "%03s", $orderid ) . "-" . $date [0], $subject );
				$subject = str_replace ( "[fullname]", $customer, $subject );
				$orderTemplate = $retval ['template'];
				$orderTemplate = str_replace ( "[fullname]", $customer, $orderTemplate );
				$orderTemplate = str_replace ( "[email]", $email, $orderTemplate );
				$orderTemplate = str_replace ( "[bank]", $bank, $orderTemplate );
				$orderTemplate = str_replace ( "[url]", $url, $orderTemplate );
				$orderTemplate = str_replace ( "[conditions]", strip_tags(Settings::findbyParam('conditions')), $orderTemplate );
				$orderTemplate = str_replace ( "[orderid]", sprintf ( "%03s", $orderid ) . "-" . $date [0], $orderTemplate );
				$orderTemplate = str_replace ( "[signature]", $signature, $orderTemplate );
				$orderTemplate = utf8_decode ( $orderTemplate );
				Shineisp_Commons_Utilities::SendEmail ( $email, $customer_email, $email, $subject, $orderTemplate );
			}
			return true;
		}
		return false;
	}
	
	
	/**
	 * Format the order id
	 * @param unknown_type $orderId
	 */
	public static function formatOrderId($orderId){

		// Get the administration preferences
		$prefix = Settings::findbyParam('orders_zero_prefix', 'admin');
		
		if(!empty($orderId) && is_numeric($prefix)){
			return sprintf("%0" . $prefix . "d", $orderId);
		}elseif(!empty($orderId) && !is_numeric($prefix)){
			return $orderId;
		}
		
		return null;
	}
	
    /**
     * 
     * print the order
     * @param unknown_type $invoiceid
     */
    public static function pdf($order_id, $show = true, $force=false, $path="/documents/orders/") {
    		$taxpercent = "";
    		$currency = new Zend_Currency();
    		if(!is_numeric($order_id)){
    			return false;
    		}
    	
    		$pdf = new Shineisp_Commons_PdfOrder ( );
    		$translator = Zend_Registry::getInstance ()->Zend_Translate;
			$payments = Payments::findbyorderid ( $order_id, null, true );
			$order = self::getAllInfo ( $order_id, null, true );
			
			// Set the name of the file
			$filename = $order[0] ['order_date'] . " - " . $order[0] ['order_id'] . ".pdf";
			
			$database ['header'] ['label'] = $translator->translate('Order No.') . " " . self::formatOrderId($order [0] ['order_id']) . " - " . Shineisp_Commons_Utilities::formatDateOut ($order [0] ['order_date']);
			$database ['columns'] [] = array ("value" => "SKU", "size" => 30 );
			$database ['columns'] [] = array ("value" => "Description" );
			$database ['columns'] [] = array ("value" => "Qty", "size" => 30, "align" => "center" );
			$database ['columns'] [] = array ("value" => "Unit", "size" => 30 );
			$database ['columns'] [] = array ("value" => "Tax Free Price", "size" => 60, "align" => "right" );
			$database ['columns'] [] = array ("value" => "Setup fee", "size" => 60, "align" => "right" );
			$database ['columns'] [] = array ("value" => "Tax %", "size" => 40, "align" => "center" );
			$database ['columns'] [] = array ("value" => "Total", "size" => 50, "align" => "right" );
			
			if (isset ( $order [0] )) {
				$orderinfo ['order_number'] = $order [0] ['order_id'];
				$orderinfo ['invoice_id'] = "";
				$orderinfo ['date'] = Shineisp_Commons_Utilities::formatDateOut ( $order [0] ['order_date'] );
				
				//if customer comes from reseller
				if ($order [0] ['Customers'] ['parent_id']) {
					$isTaxFree = Customers::isTaxFree($order [0] ['Customers'] ['parent_id']);
					$invoice_dest = Customers::getAllInfo ( $order [0] ['Customers'] ['parent_id'], 'c.*, a.*' );
					$orderinfo ['customer'] ['customer_id'] = $invoice_dest ['customer_id'];
					$orderinfo ['customer'] ['company'] = $invoice_dest ['company'];
					$orderinfo ['customer'] ['firstname'] = $invoice_dest ['firstname'];
					$orderinfo ['customer'] ['lastname'] = $invoice_dest ['lastname'];
					$orderinfo ['customer'] ['vat'] = $invoice_dest ['vat'];
					$orderinfo ['customer'] ['taxpayernumber'] = $invoice_dest ['taxpayernumber'];
					$orderinfo ['customer'] ['email'] = $invoice_dest ['email'];
									
					if (isset ( $invoice_dest ['Addresses'] [0] )) {
						$orderinfo ['customer'] ['address'] = $invoice_dest ['Addresses'] [0] ['address'];
						$orderinfo ['customer'] ['city'] = $invoice_dest ['Addresses'] [0] ['city'];
						$orderinfo ['customer'] ['code'] = $invoice_dest ['Addresses'] [0] ['code'];
						$orderinfo ['customer'] ['country'] = !empty($invoice_dest ['Addresses'] [0] ['Countries'] ['name']) ? $invoice_dest ['Addresses'] [0] ['Countries'] ['name'] : "";
					}
				} else {
					$isTaxFree = Customers::isTaxFree($order [0] ['Customers'] ['customer_id']);
					$orderinfo ['customer'] ['customer_id'] = $order [0] ['Customers'] ['customer_id'];
					$orderinfo ['customer'] ['company'] = $order [0] ['Customers'] ['company'];
					$orderinfo ['customer'] ['firstname'] = $order [0] ['Customers'] ['firstname'];
					$orderinfo ['customer'] ['lastname'] = $order [0] ['Customers'] ['lastname'];
					$orderinfo ['customer'] ['vat'] = $order [0] ['Customers'] ['vat'];
					$orderinfo ['customer'] ['taxpayernumber'] = $order [0] ['Customers'] ['taxpayernumber'];
					$orderinfo ['customer'] ['email'] = $order [0] ['Customers'] ['email'];
					
					if (isset ( $order [0] ['Customers'] ['Addresses'] [0] )) {
						$orderinfo ['customer'] ['address'] = $order [0] ['Customers'] ['Addresses'] [0] ['address'];
						$orderinfo ['customer'] ['city'] = $order [0] ['Customers'] ['Addresses'] [0] ['city'];
						$orderinfo ['customer'] ['code'] = $order [0] ['Customers'] ['Addresses'] [0] ['code'];
						$orderinfo ['customer'] ['country'] = $order [0] ['Customers'] ['Addresses'] [0] ['Countries'] ['name'];
					}
				}
				
				if (count ( $payments ) > 0) {
					$orderinfo ['payment_date'] = Shineisp_Commons_Utilities::formatDateOut ( $payments [0] ['paymentdate'] );
					$orderinfo ['payment_mode'] = $payments [0] ['Banks'] ['name'];
					$orderinfo ['payment_description'] = $payments [0] ['description'];
					$orderinfo ['payment_transaction_id'] = $payments [0] ['reference'];
				}
				
				$orderinfo ['invoice_id'] = "";
				
				$orderinfo ['company'] ['name'] = $order [0] ['Isp'] ['company'];
				$orderinfo ['company'] ['vat'] = $order [0] ['Isp'] ['vatnumber'];
				$orderinfo ['company'] ['bankname'] = $order [0] ['Isp'] ['bankname'];
				$orderinfo ['company'] ['iban'] = $order [0] ['Isp'] ['iban'];
				$orderinfo ['company'] ['bic'] = $order [0] ['Isp'] ['bic'];
				$orderinfo ['company'] ['address'] = $order [0] ['Isp'] ['address'];
				$orderinfo ['company'] ['zip'] = $order [0] ['Isp'] ['zip'];
				$orderinfo ['company'] ['city'] = $order [0] ['Isp'] ['city'];
				$orderinfo ['company'] ['country'] = $order [0] ['Isp'] ['country'];
				$orderinfo ['company'] ['telephone'] = $order [0] ['Isp'] ['telephone'];
				$orderinfo ['company'] ['fax'] = $order [0] ['Isp'] ['fax'];
				$orderinfo ['company'] ['website'] = $order [0] ['Isp'] ['website'];
				$orderinfo ['company'] ['email'] = $order [0] ['Isp'] ['email'];
				$orderinfo ['company'] ['slogan'] = $order [0] ['Isp'] ['slogan'];
				
				if($order [0] ['status_id'] == Statuses::id("tobepaid", "orders")){ // To be payed
					$orderinfo ['ribbon']['text'] = $translator->translate("To be Payed");
					$orderinfo ['ribbon']['color'] = "#D60000";
					$orderinfo ['ribbon']['border-color'] = "#BD0000";
				}elseif($order [0] ['status_id'] == Statuses::id("complete", "orders")){  // Complete
					$orderinfo ['ribbon']['text'] = $translator->translate("Payed");
					$orderinfo ['ribbon']['color'] = "#009926";
					$orderinfo ['ribbon']['border-color'] = "#00661A";
				}else{
					$orderinfo ['ribbon']['text'] = $translator->translate(Statuses::getLabel($order [0] ['status_id']));
					$orderinfo ['ribbon']['color'] = "#FFCC33";
					$orderinfo ['ribbon']['border-color'] = "#E6AC00";
				}
				
				$orderinfo ['subtotal'] = $currency->toCurrency($order[0] ['total'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['grandtotal'] = $currency->toCurrency($order[0] ['grandtotal'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['vat'] = $currency->toCurrency($order[0] ['vat'], array('currency' => Settings::findbyParam('currency')));
				
				$orderinfo ['delivery'] = 0;
				
				$database ['records'] = $orderinfo;
				
				foreach ( $order [0] ['OrdersItems'] as $item ) {
					$price = ($item['price']  * $item['quantity']) + $item['setupfee'];
					 
					$tax = Taxes::getTaxbyProductID($item['product_id']);
					if ($tax['percentage'] > 0) {
						$rowtotal = $price * (100 + $tax['percentage']) / 100;
					} else {
						$rowtotal = $price;
					}
					
					if(!$isTaxFree){
						$taxes = Taxes::getTaxbyProductID($item['product_id']);
						if(!empty($taxes['percentage'])){
							$taxpercent = $taxes['percentage'];
						} 
					}
					
					$item ['price'] = $currency->toCurrency($item ['price'], array('currency' => Settings::findbyParam('currency')));
					$item ['setupfee'] = $currency->toCurrency($item ['setupfee'], array('currency' => Settings::findbyParam('currency')));
					$rowtotal = $currency->toCurrency($rowtotal, array('currency' => Settings::findbyParam('currency')));
					
					$database ['records'] [] = array ($item ['product_id'], $item ['description'], $item ['quantity'], 'nr', $item ['price'], $item ['setupfee'], $taxpercent, $rowtotal);
				}
				
				if (isset ( $order [0] )) {
					$pdf->CreatePDF (  $database, $filename, $show, $path, $force);
					return $path . $filename;
				}
			}
			return false;
		}
		
	
	/**
	 * Get a orders by id lists 
	 * @param array $ids [1,2,3,4,...,n]
	 * @param string $fields
	 * @return Array
	 */
	public static function get_orders($ids, $fields="*", $orderby=null) {
		return Doctrine_Query::create ()->select($fields)
										->from ( 'Orders o' )
										->leftJoin ( 'o.Customers c' )
										->leftJoin ( 'o.Invoices i' )
										->leftJoin ( 'o.Statuses s' )
										->whereIn( "order_id", $ids)
										->orderBy(!empty($orderby) ? $orderby : "")
										->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}
	
	
	/**
	 * List of the last 10 Orders
	 * @return array
	 */
	public static function Last(array $statuses, $limit=10) {
		$currency = new Zend_Currency();
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$dq = Doctrine_Query::create ()
								->select ( "order_id, DATE_FORMAT(order_date, '%d/%m/%Y') as orderdate, 
											CONCAT(c.firstname, ' ', c.lastname, ' ', c.company) as fullname, 
											o.total as total, 
											o.grandtotal as grandtotal, 
											s.status as status" )
								->from ( 'Orders o' )
								->leftJoin ( 'o.Customers c' )
								->leftJoin ( 'o.Invoices i' )
								->leftJoin ( 'o.Statuses s' );
		
		if(is_array($statuses) && !empty($statuses)){
			$dq->whereIn('o.status_id', $statuses);
		}
		
		$dq->orderBy ( 'order_date desc' )->limit ( $limit );
		$records = $dq->execute ( null, Doctrine::HYDRATE_ARRAY );
		
		for($i=0;$i<count($records);$i++){
			$records[$i]['total'] = $currency->toCurrency($records[$i]['total'], array('currency' => Settings::findbyParam('currency')));
			$records[$i]['grandtotal'] = $currency->toCurrency($records[$i]['grandtotal'], array('currency' => Settings::findbyParam('currency')));
			$records[$i]['status'] = $translator->translate($records[$i]['status']);
		}
		
		return $records;
		
	}
	
	/**
	 * Yield total percentage between Quarter 
	 * 
	 * @return ArrayObject
	 */
	public static function incomeQuarter($year = null ) {
		$present_year = !empty($year) ? $year : date("Y");
		$last_year = $present_year - 1;
		
		// Get the quarter total 
		$income = Doctrine_Query::create ()->select ( "invoice_id, QUARTER(i.invoice_date) as quarter, YEAR(i.invoice_date) as year, SUM(o.grandtotal) as grandtotal, SUM(o.total) as total, SUM(o.vat) as vat" )
													->from ( 'Invoices i' )
													->leftJoin ( 'i.Orders o' )
													->where('o.status_id = ?', Statuses::id('complete', 'orders'))
													->groupBy("quarter, year")
													->orderBy('year, quarter')
													->execute ( null, Doctrine::HYDRATE_ARRAY );

		for ($i=0; $i<count($income); $i++){
			
			// Yield Percentage
			$income[$i]['yieldrate'] = 0;
			
			// Before the last year
			$income[$i]['old'] = array();
			
			// For each Quarter do
			foreach ($income as $item){
				
				// If the selected year is before last year and the quarter is the same do
				if($item['year'] == ($income[$i]['year'] - 1) && $item['quarter'] == $income[$i]['quarter']){
					
					// Calculate the Yield percentage on diff
					if($income[$i]['total'] > 0){
						$diff = $income[$i]['total'] - $item['total'];
						$percent = $diff / $item['total'] * 100;
					}else{
						$percent = 0;
					}
					
					$income[$i]['old'] = $item;
					
					// Assign the yield percentage value
					$income[$i]['yieldrate'] = number_format($percent, 2, ',', '');;
					continue;
				}
			}
		}
		
		return !empty($income[0]) ? $income: array();
	}
	
	/**
	 * Yield total percentage between months 
	 * 
	 * @return ArrayObject
	 */
	public static function incomeMonthly($year = null ) {
		$present_year = !empty($year) ? $year : date("Y");
		$last_year = $present_year - 1;
		
		// Get the invoices montly total 
		$income = Doctrine_Query::create ()->select ( "invoice_id, MONTH(i.invoice_date) as monthly, YEAR(i.invoice_date) as year, SUM(o.grandtotal) as grandtotal, SUM(o.total) as total, SUM(o.vat) as vat" )
													->from ( 'Invoices i' )
													->leftJoin ( 'i.Orders o' )
													->where('o.status_id = ?', Statuses::id('complete', 'orders'))
													->groupBy("monthly, year")
													->orderBy('year, monthly')
													->execute ( null, Doctrine::HYDRATE_ARRAY );
		
		// Get the credit notes montly total 
		$creditnotes = Doctrine_Query::create ()->select ( "creditnote_id, MONTH(c.creationdate) as monthly, YEAR(c.creationdate) as year, SUM(c.total) as grandtotal, SUM(c.total_net) as total, SUM(c.total_vat) as vat" )
													->from ( 'CreditNotes c' )
													->groupBy("monthly, year")
													->orderBy('year, monthly')
													->execute ( null, Doctrine::HYDRATE_ARRAY );
		
		for ($i=0; $i<count($income); $i++){
			
			// Yield Percentage
			$income[$i]['yieldrate'] = 0;
			
			// Before the last year
			$income[$i]['old'] = array();
			
			// For each Quarter do
			foreach ($income as $item){
				
				// If the selected year is before last year and the quarter is the same do
				if($item['year'] == ($income[$i]['year'] - 1) && $item['monthly'] == $income[$i]['monthly']){
					
					// Calculate the Yield percentage on diff
					if($income[$i]['total'] > 0){
						$diff = $income[$i]['total'] - $item['total'];
						$percent = $diff / $item['total'] * 100;
					}else{
						$percent = 0;
					}
					
					$income[$i]['old'] = $item;
					
					// Assign the yield percentage value
					$income[$i]['yieldrate'] = number_format($percent, 2, ',', '');;
					continue;
				}
			}
		}
		
// 		Zend_Debug::dump($income);
// 		Zend_Debug::dump($creditnotes);
		
		foreach ($creditnotes as $item){
			// If the selected year is before last year and the quarter is the same do
			
			
		}
		
		return !empty($income[0]) ? $income: array();
	}
	
	/**
	 * 
	 */
	public static function Summary() {
		$income_status = Doctrine_Query::create ()->select ( "o.grandtotal as grandtotal, s.status as status" )
										->from ( 'Orders o' )
										->leftJoin ( 'o.Statuses s' )
										->where('status_id = ?', Statuses::id('complete', 'orders'))
										->groupBy('s.status_id')
										->execute ( null, Doctrine::HYDRATE_ARRAY );
		Zend_Debug::dump($income_status);
		die;
		
	
	}
	
	/**
	 * Upload to dropbox the Order file
	 * @param integer $OrderID
	 * @return boolean or exception
	 */
	public static function DropboxIt($OrderID){
		if(is_numeric($OrderID)){
			if(Shineisp_Api_Dropbox_Uploader::isReady()){
	
				// Get the order information
				$order = self::getAllInfo($OrderID, "order_date", true);
				if($order[0]['order_date']){
					
					$file = $order[0] ['order_date'] . " - " . $order[0] ['order_id'] . ".pdf";
					
					if(file_exists(PUBLIC_PATH . "/documents/orders/$file")){
						$year_order = date('Y',strtotime($order[0]['order_date']));
						$month_testual_order = date('M',strtotime($order[0]['order_date']));
						$month_number_order = date('m',strtotime($order[0]['order_date']));
						$quarter_number_order =Shineisp_Commons_Utilities::getQuarterByMonth(date('m',strtotime($order[0]['order_date'])));
		
						$destinationPath = Settings::findbyParam('dropbox_ordersdestinationpath');
						$destinationPath = str_replace("{year}", $year_order, $destinationPath);
						$destinationPath = str_replace("{month}", $month_number_order, $destinationPath);
						$destinationPath = str_replace("{monthname}", $month_testual_order, $destinationPath);
						$destinationPath = str_replace("{quarter}", $quarter_number_order, $destinationPath);
		
						$dropbox = new Shineisp_Api_Dropbox_Uploader(Settings::findbyParam('dropbox_email'), Settings::findbyParam('dropbox_password'));
						$dropbox->upload(PUBLIC_PATH . "/documents/orders/$file", $destinationPath);
						return true;
					}else{
						Shineisp_Commons_Utilities::log('Dropbox module: the order '.$order[0] ['order_id'].' has been not found and it cannot be sent to the dropbox');
						return false;
					}
				}
			}
		}
		return false;
	}
	
	######################################### CRON METHODS ############################################
	
	/**
	 * Check the expiring orders.
	 *
	 * Only the orders where renewal option has been set as
	 * false send an email to the client to inform him
	 * about the expiring of the order.
	 */
	public static function checkExpiringOrders() {
		$isp = Isp::getActiveISP ();
		$orders = Orders::find_all_expired_orders(date('Y-m-d'));
	
		$arrTemplate = Shineisp_Commons_Utilities::getEmailTemplate ( 'order_expired' );
	
		foreach ( $orders as $order ) {
			$customer = Customers::getAllInfo($order ['customer_id']);
	
			// Get the fastlink attached
			$link_exist = Fastlinks::findlinks ( $order ['order_id'], $order ['customer_id'], 'orders' );
			if (count ( $link_exist ) > 0) {
				$fastlink = $link_exist [0] ['code'];
			} else {
				$fastlink = Fastlinks::CreateFastlink ( 'orders', 'edit', json_encode ( array ('id' => $order ['order_id'] ) ), 'tickets', $order ['order_id'], $customer ['customer_id'] );
			}
				
			$customer_url = "http://" . $_SERVER ['HTTP_HOST'] . "/index/link/id/$fastlink";
				
			if ($arrTemplate) {
				$subject = $arrTemplate ['subject'];
				$Template =  $arrTemplate ['template'] ;
	
				$subject = str_replace ( "[orderid]", $order ['order_id'] . " - " . Shineisp_Commons_Utilities::formatDateOut($order ['order_date']), $subject );
				$Template = str_replace ( "[orderid]", $order ['order_id'] . " - " . Shineisp_Commons_Utilities::formatDateOut($order ['order_date']), $Template );
				$Template = str_replace ( "[fullname]", $customer ['lastname'] . " " . $customer ['firstname'], $Template );
				$Template = str_replace ( "[url]", $customer_url, $Template );
				$Template = str_replace ( "[email]", $isp ['email'], $Template );
				$Template = str_replace ( "[signature]", $isp ['company'] . "\n" . $isp ['website'], $Template );
	
				Shineisp_Commons_Utilities::SendEmail ( $isp ['email'], $customer ['email'], $isp ['email'], $subject, $Template);
					
			}
	
			// Set the order as deleted
			Orders::set_status($order['order_id'], Statuses::id('deleted', 'orders'));
		}
		
		return true;
	}

	/**
	 * Check if a order must be payed or not and send an email to the customer
	 * with a reminder.
	 */
	public static function checkOrders() {
		$isp = Isp::getActiveISP ();
		$orders = Orders::find_all_not_paid_orders();
	
		foreach ( $orders as $order ) {
			$customer = Customers::getAllInfo($order ['customer_id']);
				
			// Get the template from the main email template folder
			if($order['is_renewal']){
				$template = Shineisp_Commons_Utilities::getEmailTemplate ( 'order_reminder_renewal' );
			}else{
				$template = Shineisp_Commons_Utilities::getEmailTemplate ( 'order_reminder' );
			}
				
			// Get the fastlink attached
			$link_exist = Fastlinks::findlinks ( $order ['order_id'], $order ['customer_id'], 'orders' );
			if (count ( $link_exist ) > 0) {
				$fastlink = $link_exist [0] ['code'];
			} else {
				$fastlink = Fastlinks::CreateFastlink ( 'orders', 'edit', json_encode ( array ('id' => $order ['order_id'] ) ), 'tickets', $order ['order_id'], $customer ['customer_id'] );
			}
				
			$customer_url = "http://" . $_SERVER ['HTTP_HOST'] . "/index/link/id/$fastlink";
				
			if ($template) {
				$subject = $template ['subject'];
				$Template =  $template ['template'] ;
				$subject = str_replace ( "[orderid]", $order ['order_id'] . " - " . Shineisp_Commons_Utilities::formatDateOut($order ['order_date']), $subject );
				$Template = str_replace ( "[orderid]", $order ['order_id'] . " - " . Shineisp_Commons_Utilities::formatDateOut($order ['order_date']), $Template );
				$Template = str_replace ( "[fullname]", $customer ['lastname'] . " " . $customer ['firstname'], $Template );
				$Template = str_replace ( "[url]", $customer_url, $Template );
				$Template = str_replace ( "[signature]", $isp ['company'] . "\n" . $isp ['website'], $Template );
	
				Shineisp_Commons_Utilities::SendEmail ( $isp ['email'], $customer ['email'], null, $subject, $Template);
			}
		}
		return true;
	}
	
	/**
	 * Clean all the obsolete orders without expiring date
	 * Set the obsolete orders as deleted
	 */
	public static function cleanNotPayedOrders() {
		$isp = Isp::getActiveISP ();
		$orders = Orders::find_all_not_paid_orders();
	
		$arrTemplate = Shineisp_Commons_Utilities::getEmailTemplate ( 'order_cleaned' );
	
		foreach ( $orders as $order ) {
			if(empty($order['expiring_date'])){
				$date1 = new DateTime($order['order_date']);
				$date2 = new DateTime(date('Y-m-d'));
	
				$interval = $date1->diff($date2);
	
				// Set all the order oldest more of 1 month as deleted
				if((($interval->y) > 0) || (($interval->m) > 0)){
					$customer = Customers::getAllInfo($order ['customer_id']);
	
					// Get the fastlink attached
					$link_exist = Fastlinks::findlinks ( $order ['order_id'], $order ['customer_id'], 'orders' );
					if (count ( $link_exist ) > 0) {
						$fastlink = $link_exist [0] ['code'];
					} else {
						$fastlink = Fastlinks::CreateFastlink ( 'orders', 'edit', json_encode ( array ('id' => $order ['order_id'] ) ), 'tickets', $order ['order_id'], $customer ['customer_id'] );
					}
						
					$customer_url = "http://" . $_SERVER ['HTTP_HOST'] . "/index/link/id/$fastlink";
						
					if ($arrTemplate) {
						$subject = $arrTemplate ['subject'];
						$Template =  $arrTemplate ['template'] ;
	
						$subject = str_replace ( "[orderid]", $order ['order_id'] . " - " . Shineisp_Commons_Utilities::formatDateOut($order ['order_date']), $subject );
						$Template = str_replace ( "[orderid]", $order ['order_id'] . " - " . Shineisp_Commons_Utilities::formatDateOut($order ['order_date']), $Template );
						$Template = str_replace ( "[fullname]", $customer ['lastname'] . " " . $customer ['firstname'], $Template );
						$Template = str_replace ( "[url]", $customer_url, $Template );
						$Template = str_replace ( "[email]", $isp ['email'], $Template );
						$Template = str_replace ( "[signature]", $isp ['company'] . "\n" . $isp ['website'], $Template );
	
						Shineisp_Commons_Utilities::SendEmail ( $isp ['email'], $customer ['email'], null, $subject, $Template);
							
					}
	
					// Set the order as deleted
					Orders::set_status($order['order_id'], Statuses::id('deleted', 'orders'));
				}
			}
		}
		return true;
	}
	
	/**
	 * reminderAction
	 * This action send to every customers an email
	 * reminder about their expiring services and domains
	 */
	public static function remindersEmail() {
		$i = 0;
		$customers = array ();
	
		/* We have to start to get all the domains that them expiring date is today
		 then we have to create a custom array sorted by customerID in order to
		group services and domains of a particular customer.
		*/
	
		// Get all the active domains that expire in 1 day
		$domains = Domains::getExpiringDomainsByRange ( 0, 30, 4 );
	
		if ($domains) {
			// Create the customer group list for the email summary
			foreach ( $domains as $domain ) {
				if ($domain ['reseller']) {
					$invoice_dest = Customers::getAllInfo ( $domain ['reseller'] );
					$customers [$domain ['customer_id']] ['id'] = $invoice_dest ['customer_id'];
					$customers [$domain ['customer_id']] ['fullname'] = $invoice_dest ['firstname'] . " " . $invoice_dest ['lastname'] . " " . $invoice_dest ['company'];
					$customers [$domain ['customer_id']] ['email'] = $invoice_dest ['email'];
				} else {
					$customers [$domain ['customer_id']] ['id'] = $domain ['customer_id'];
					$customers [$domain ['customer_id']] ['fullname'] = $domain ['fullname'];
					$customers [$domain ['customer_id']] ['email'] = $domain ['email'];
				}
				$customers [$domain ['customer_id']] ['products'] [$i] ['name'] = $domain ['domain'];
				$customers [$domain ['customer_id']] ['products'] [$i] ['type'] = "domain";
				$customers [$domain ['customer_id']] ['products'] [$i] ['renew'] = $domain ['renew'];
				$customers [$domain ['customer_id']] ['products'] [$i] ['expiring_date'] = $domain ['expiringdate'];
				$customers [$domain ['customer_id']] ['products'] [$i] ['days'] = $domain ['days'];
				$customers [$domain ['customer_id']] ['products'] [$i] ['oldorderitemid'] = $domain ['detail_id'];
				$i ++;
			}
		}
	
		/*
		 * Now we have to get the services expired and we have to sum the previous $customers array with these
		* new information.
		*/
	
		// Get all the services active that expire the day after
		$services = OrdersItems::getExpiringSerivcesByRange(0, 30, Statuses::id("complete", "orders") );
		if ($services) {
			// Create the customer group list for the email summary
			foreach ( $services as $service ) {
				if ($service ['reseller']) {
					$invoice_dest = Customers::getAllInfo ( $service ['reseller'] );
					$customers [$service ['customer_id']] ['id'] = $invoice_dest ['customer_id'];
					$customers [$service ['customer_id']] ['fullname'] = $invoice_dest ['firstname'] . " " . $invoice_dest ['lastname'] . " " . $invoice_dest ['company'];
					$customers [$service ['customer_id']] ['email'] = $customer_email = Contacts::getEmails($invoice_dest ['customer_id']);
					$customers [$service ['customer_id']] ['password'] = $invoice_dest ['password'];
				} else {
					$customers [$service ['customer_id']] ['id'] = $service ['id'];
					$customers [$service ['customer_id']] ['fullname'] = $service ['fullname'];
					$customers [$service ['customer_id']] ['email'] = $customer_email = Contacts::getEmails($service ['id']);
					$customers [$service ['customer_id']] ['password'] = $service ['password'];
				}
				$customers [$service ['customer_id']] ['products'] [$i] ['name'] = $service ['product'];
				$customers [$service ['customer_id']] ['products'] [$i] ['type'] = "service";
				$customers [$service ['customer_id']] ['products'] [$i] ['renew'] = $service ['renew'];
				$customers [$service ['customer_id']] ['products'] [$i] ['expiring_date'] = $service ['expiringdate'];
				$customers [$service ['customer_id']] ['products'] [$i] ['days'] = $service ['days'];
				$customers [$service ['customer_id']] ['products'] [$i] ['oldorderitemid'] = $service ['detail_id'];
				$i ++;
			}
		}
	
		// EMAIL SUMMARY FOR ALL THE EXPIRED AND NOT AUTORENEWABLE DOMAINS/SERVICES
		// =========================================================================
		// Create the emailS for the customers
		if (count ( $customers ) > 0) {
			$isp = Isp::getActiveISP ();
			$signature = $isp ['company'] . "\n" . $isp ['email'];
				
			// For each client do ...
			foreach ( $customers as $customer ) {
				$items = "";
	
				// Check if there are some product to be expired
				if (count ( $customer ['products'] ) > 0) {
	
					// Create the label of the text table
					$items .= str_pad ( "Data", 12 ) . str_pad ( "Giorni", 14 ) . str_pad ( "Autorinnovo", 16 ) . str_pad ( "Descrizione", 16 ) . "\n";
						
					// For each product do ...
					foreach ( $customer ['products'] as $product ) {
						if ($product ['renew']) {
							$items .= str_pad ( $product ['expiring_date'], 12 ) . str_pad ( "-" . $product ['days'] . " giorno(i)", 14 ) . str_pad ( "[attivo]", 16 ) . $product ['name'] . "\n";
						} else {
							$items .= str_pad ( $product ['expiring_date'], 12 ) . str_pad ( "-" . $product ['days'] . " giorno(i)", 14 ) . str_pad ( "[disabilitato]", 16 ) . $product ['name'] . "\n";
						}
					}
				}
	
				if (! empty ( $items )) {
					// Get the template from the main email template folder
					$retval = Shineisp_Commons_Utilities::getEmailTemplate ( 'reminder' );
					if ($retval) {
						$subject = $retval ['subject'];
						$Template = $retval ['template'];
						$Template = str_replace ( "[fullname]", $customer ['fullname'], $Template );
						$Template = str_replace ( "[email]", $isp ['email'], $Template );
						$Template = str_replace ( "[items]", $items, $Template );
						$Template = str_replace ( "[signature]", $signature, $Template );
	
						Shineisp_Commons_Utilities::SendEmail ( $isp ['email'], $customer ['email'], $isp ['email'], $subject, $Template );
					}
				}
			}
		}
	
		return true;
	}
	
	######################################### BULK ACTIONS ############################################
	
	
	/**
	 * massdelete
	 * delete the customer selected 
	 * @param array
	 * @return Boolean
	 */
	public static function bulk_delete($items) {
		if(!empty($items)){
			return self::massdelete($items);
		}
		return false;
	}
		
	/**
	 * export the content in a pdf file
	 * @param array $items
	 */
	public function bulk_export($items) {
		$isp = Isp::getActiveISP();
		$pdf = new Shineisp_Commons_PdfList();
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		// Get the records from the order table
		$orders = self::get_orders($items, "order_id, i.number as invoicenum, DATE_FORMAT(order_date, '%d/%m/%Y') as orderdate, c.company as company, CONCAT(c.firstname, ' ', c.lastname) as fullname, total as total, vat as vat, grandtotal as grandtotal, s.status as status", 'order_date');

		// Create the PDF header
		$grid['headers']['title'] = $translator->translate('Orders List');
		$grid['headers']['subtitle'] = $translator->translate('List of the orders');
		$grid['footer']['text'] = $isp['company'] . " - " . $isp['website'];
		 
		if(!empty($orders[0]))

			// Create the columns of the grid
			$grid ['columns'] [] = array ("value" => $translator->translate('Order'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Invoice'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Date'), 'size' => 100);
			$grid ['columns'] [] = array ("value" => $translator->translate('Company'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Fullname'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Total'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('VAT'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Grand Total'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Status'), 'size' => 100);
			
			// Getting the records values and delete the first column the customer_id field.
			foreach ($orders as $item){
				$values = array_values($item);
				$grid ['records'] [] = $values;
			}
				
			// Create the PDF
			die($pdf->create($grid));
		
		return false;	
	}			
}