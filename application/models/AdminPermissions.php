<?php

/**
 * AdminPermissions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AdminPermissions extends BaseAdminPermissions
{
	
		/**
		 * grid
		 * create the configuration of the grid
		 */
		public static function grid($rowNum = 10) {
	
			$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
	
			$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Module' ), 'field' => 'r.module', 'alias' => 'mymodule', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
			$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Controller' ), 'field' => 'r.controller', 'alias' => 'mycontroller', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
			$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Resource' ), 'field' => 'r.resource_id', 'alias' => 'resource', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
			$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Role' ), 'field' => 'ro.role_id', 'alias' => 'role', 'sortable' => true, 'type' => 'index', 'searchable' => true, 'filterdata' => AdminRoles::getList() );
			$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Permission' ), 'field' => 'p.permission', 'alias' => 'permission', 'sortable' => true, 'type' => 'index', 'searchable' => true, 'filterdata' => array('deny'=>'Deny', 'allow' => 'Allow') );
			
			$config ['datagrid'] ['fields'] = "permission_id, r.resource_id, p.permission as permission, ro.role_id, r.module as mymodule, r.controller as mycontroller, ro.name as role, r.name as resource";
			$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )->from ( 'AdminPermissions p' )->leftJoin('p.AdminResources r')->leftJoin('p.AdminRoles ro');
	
			$config ['datagrid'] ['rownum'] = $rowNum;
	
			$config ['datagrid'] ['basepath'] = "/admin/permissions/";
			$config ['datagrid'] ['index'] = "permission_id";
			$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
	
			$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
			$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
			$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/permissions/edit/id/%d";
	
			$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
			$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
			$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/permissions/delete/id/%d";
			return $config;
		}
	
		/**
		 * Get a record by ID
		 * @param $id
		 * @return Doctrine Record
		 */
		public static function find($id, $fields = "*", $retarray = false) {
			$dq = Doctrine_Query::create ()->select ( $fields )
			->from ( 'AdminPermissions p' )
			->leftJoin('p.AdminResources r')
			->leftJoin('p.AdminRoles ro')
			->where ( "p.permission_id = ?", $id )
			->limit ( 1 );
	
			$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
			$record = $dq->execute ( array (), $retarray );
			return $record;
		}
	
		/**
		 * Get the permission of a specific role id
		 * @param integer $role_id
		 * @return array 
		 */
		public static function getPermissionByRoleID($role_id) {
			$resource = array();
			$records = Doctrine_Query::create ()
									->from ( 'AdminPermissions p' )
									->leftJoin('p.AdminResources r')
									->leftJoin('p.AdminRoles ro')
									->where ( "p.role_id = ?", $role_id )
									->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	
			foreach ($records as $record){
				if($record['permission'] == "allow"){
					$resource[] = $record['AdminResources']['module'] . ":" . $record['AdminResources']['controller'];
				} 
			}
			return $resource;
		}
	
		/**
		 * Get the permission of the user by module and controller
		 * 
		 * @param array $identity
		 * @return array 
		 */
		public static function isAllowed($identity, $module, $controller) {
			if(!empty($identity['AdminRoles']['AdminPermissions'])){
				$resources = $identity['AdminRoles']['AdminPermissions'];
				foreach ($resources as $resource){
					if($resource['permission'] == "allow" && $resource['AdminResources']['module'] == $module && $resource['AdminResources']['controller'] == $controller){
						return true;
					} 
				}
			}
			return false;
		}
	
		/**
		 * Save the permission
		 * @param $id
		 */
		public static function SaveAll($data, $id=null) {
			if(!empty($data) && is_array($data)){
				if(is_numeric($id)){
					$p = Doctrine::getTable ( 'AdminPermissions' )->find($id);
				}else{
					$p = new AdminPermissions();
				}
				
				$p['role_id'] = $data['role_id'];
				$p['resource_id'] = $data['resource_id'];
				$p['permission'] = $data['permission'];
				$p->save();
				
				return is_numeric($id) ? $id : $p->getIncremented ();
			}
			return null;
		}
	
		/**
		 * Add a new permission in the database for a specific resource
		 * @param integer $roleID
		 * @param integer $resourceID
		 */
		public static function addPermission($roleID, $module, $controller, $permission="allow") {
			
			$resource = AdminResources::createResource($module, $controller);
			
			if(!empty($resource)){
				$adminpermission = new AdminPermissions();
				
				$adminpermission['role_id'] = $roleID;
				$adminpermission['resource_id'] = (string)$resource->resource_id;
				$adminpermission['permission'] = $permission;
				
				if($adminpermission->trySave()){
					return $adminpermission;
				}
			}
			
			return false;
		}
		
		/**
		 * Delete a record by ID
		 * @param $id
		 */
		public static function deleteItem($id) {
			Doctrine::getTable ( 'AdminPermissions' )->findOneBy ( 'permission_id', $id )->delete();
		}
	
		/**
		 * Clear all the permissions by Role ID
		 * @param $id
		 */
		public static function clearPermissionByRoleID($id) {
			Doctrine::getTable ( 'AdminPermissions' )->findBy ( 'role_id', $id )->delete();
		}
	
		/**
		 * getList
		 * Get a list ready for the html select object
		 * @return array
		 */
		public static function getList($empty=false) {
			$items = array ();
			$arrTypes = Doctrine::getTable ( 'AdminPermissions' )->findAll ();
			if($empty){
				$items[] = "";
			}
			foreach ( $arrTypes->getData () as $c ) {
				$items [$c ['permission_id']] = $c ['name'];
			}
	
			return $items;
		}
}