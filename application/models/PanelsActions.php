<?php

/**
 * PanelsActions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PanelsActions extends BasePanelsActions
{
	
	/**
	 * create the configuration of the grid
	 */
	public static function grid($rowNum = 10) {
	
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
	
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'p.action_id', 'alias' => 'action_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'p.action_id', 'alias' => 'action_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Fullname' ), 'field' => 'CONCAT(c.lastname, " ", c.firstname)', 'alias' => 'fullname', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Action' ), 'field' => 'action', 'alias' => 'action', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Start' ), 'field' => 'DATE_FORMAT(end, "%d/%m/%Y %H:%i:%s")', 'alias' => 'startdate', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'End' ), 'field' => 'DATE_FORMAT(start, "%d/%m/%Y %H:%i:%s")', 'alias' => 'enddate', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Status' ), 'field' => 's.status', 'alias' => 'status', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
	
		$config ['datagrid'] ['fields'] = "action_id, action, s.status as status, DATE_FORMAT(start, '%d/%m/%Y %H:%i:%s') as startdate, DATE_FORMAT(end, '%d/%m/%Y %H:%i:%s') as enddate, CONCAT(c.lastname, ' ', c.firstname) as fullname";
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )->from ( 'PanelsActions p' )->leftJoin('p.Customers c')->leftJoin('p.Statuses s');
	
		$config ['datagrid'] ['rownum'] = $rowNum;
	
		$config ['datagrid'] ['basepath'] = "/admin/panelsactions/";
		$config ['datagrid'] ['index'] = "action_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
	
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/panelsactions/edit/id/%d";
	
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/panelsactions/delete/id/%d";
		return $config;
	}
	
	/**
	 * Delete a record by ID
	 * @param $id
	 */
	public static function deleteItem($id) {
		Doctrine::getTable ( 'PanelsActions' )->findOneBy ( 'action_id', $id )->delete();
	}
	
	/**
	 *
	 * @param unknown_type $id
	 * @return Ambigous <Doctrine_Record, mixed, boolean, Doctrine_Collection, PDOStatement, Doctrine_Adapter_Statement, Doctrine_Connection_Statement, unknown, number>
	 */
	public static function find($id) {
		return Doctrine::getTable ( 'PanelsActions' )->findOneBy ( 'action_id', $id );
	}
	
	/**
	 * Get a record by ID
	 *
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function getById($id, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )
		->from ( 'PanelsActions t' )
		->where ( "t.action_id = ?", $id )
		->limit ( 1 );
	
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$record = $dq->execute ( array (), $retarray );
		
		return $record;
	}
	

	/**
	 * Save the record
	 *
	 * @param posted var from the form
	 * @return Boolean
	 */
	public static function saveData($record, $id=null) {
	
		// Set the new values
		if (is_numeric ( $id )) {
			$panelaction = self::find( $id );
		}else{
			$panelaction = new PanelsActions();
		}
	
		$panelaction->action = $record ['action'];
		$panelaction->start = Shineisp_Commons_Utilities::formatDateIn($record ['start']);
		$panelaction->end = Shineisp_Commons_Utilities::formatDateIn($record ['end']);
		$panelaction->log = $record ['log'];
		$panelaction->panel_id = $record ['panel_id'];
		$panelaction->parameters = $record ['parameters'];
		$panelaction->status_id = $record ['status_id'];
	
		if($panelaction->trySave()){
			return $panelaction->panel_id;
		}
	
		return false;
	}
	
	/**
	 * Get a record by ID
	 * @return ArrayObject
	 */
	public static function getTasks($statusId = "", $limit = null) {
		$dq = Doctrine_Query::create ()->from ( 'PanelsActions pa' );
		
		if (is_numeric ( $statusId )) {
			$dq->where ( 'pa.status_id = ?', $statusId );
		}
		
		if (is_numeric ( $limit )) {
			$dq->limit ( $limit );
		}
		return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
	}
	
	/**
	 * add a task to be done by the cron job 
	 */
	static public function Addtask($customer_id, $orderitem_id, $action, $parameters = "") {
		$panel = Panels::getActivePanel();
		if(!empty($panel)){
			$task = new PanelsActions();
			$task->panel_id     = $panel['panel_id'];
			$task->start        = date ( 'Y-m-d H:i:s' );
			$task->customer_id  = $customer_id;
			$task->orderitem_id = $orderitem_id;
			$task->action       = $action;
			$task->parameters   = $parameters;
			$task->status_id    = Statuses::id("active", "domains_tasks"); // Task Processing;
			return $task->trySave ();
		}else{
			return false;
		}
	}
	
	/**
	 * setStatusTask
	 * @param $action_id, $statusID
	 * @return void
	 */
	public static function setStatusTask($action_id, $statusID) {
		Doctrine_Query::create ()->update ( "PanelsActions pa" )
										->set ( 'pa.status_id', $statusID )
										->set ( 'pa.end', '?', date ( 'Y-m-d H:i:s' ))
										->where ( "pa.action_id = $action_id" )
										->execute ();
	}
	
	/**
	 * UpdateTaskLog
	 * @param $action_id
	 * @param $log
	 * @return void
	 */
	public static function UpdateTaskLog($action_id, $log) {
		Doctrine_Query::create ()->update ( "PanelsActions pa" )
										->set ( 'pa.log', "'" . addslashes($log) . "'" )
										->set ( 'pa.end', '?', date ( 'Y-m-d H:i:s' ))
										->where ( "action_id = ?", $action_id )
										->execute ();
	}
	
	/**
	 * UpdateTaskStatus
	 * @param $id
	 * @param $status_id
	 * @return void
	 */
	public static function UpdateTaskStatus($action_id, $status_id) {
		Doctrine_Query::create ()->update ( "PanelsActions pa" )
										->set ( 'pa.status_id', $status_id )
										->set ( 'pa.end', '?', date ( 'Y-m-d H:i:s' ) )
										->where ( "pa.action_id = ?", $action_id )
										->execute ();
	}
	
	/**
	 * Create a widget for the dashboard
	 * @return Array
	 */
	public static function Last($limit=10) {
		$dq = Doctrine_Query::create ()
		->select("DATE_FORMAT(start, '%d/%m/%Y %H:%i:%s') as startdate,
										  DATE_FORMAT(end, '%d/%m/%Y %H:%i:%s') as enddate,
										  CONCAT(c.lastname, ' ', c.firstname) as fullname,
										  p.name as name,
										  action,
										  log,
										  s.status as status")
											  ->from ( 'PanelsActions pa' )
											  ->leftJoin( 'pa.Panels p' )
											  ->leftJoin( 'pa.Statuses s' )
											  ->leftJoin( 'pa.Customers c' )
											  ->orderBy('pa.start desc')
											  ->limit($limit);
        
        $auth = Zend_Auth::getInstance ();
        if( $auth->hasIdentity () ) {
            $logged_user= $auth->getIdentity ();
            $dq->whereIn( "p.isp_id", $logged_user['isp_id']);
        }        
        
        $records    = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        
		return $records;
	}
		
}