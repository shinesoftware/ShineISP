<?php

/**
 * OauthJwt
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class OauthJwt extends BaseOauthJwt
{
	
	/**
	 * Generate a RSA key protected with a random passphrase
	 * @param array $secretKey, $passphrase
	 */
	public static function generate($clientId) {
		if ( empty($clientId) ) {
			return false;
		}
		
		$OauthJwt = Doctrine::getTable ( 'OauthJwt' )->findByClientId ( $clientId );
		if ( $OauthJwt ) {
			$OauthJwt->delete();
		}

		$auth       = Zend_Auth::getInstance()->getIdentity();
		$request    = Zend_Controller_Front::getInstance()->getRequest();
		$baseURL    = $request->getScheme().'://'.$request->getHttpHost().'/';
		$passphrase = Shineisp_Commons_Utilities::generateRandomPassword(16);	

		// Create the private and public key
		$res = openssl_pkey_new(array(
		    "digest_alg"       => "sha512",
		    "private_key_bits" => 2048,
		    "private_key_type" => OPENSSL_KEYTYPE_RSA,
		));

		// Extract the private key from $res to $privateKey and protect with a passphrase
		openssl_pkey_export($res, $privateKey, $passphrase);

		// Extract the public key from $res to $publicKey
		$publicKey = openssl_pkey_get_details($res);
		$publicKey = $publicKey["key"];

		// Store JWT data
		$OauthJwt = new self();
		$OauthJwt->user_id    = isset($auth['user_id']) ? intval($auth['user_id']) : 0;
		$OauthJwt->client_id  = $clientId;
		$OauthJwt->subject    = $baseURL;
		$OauthJwt->public_key = trim($publicKey);
		$OauthJwt->save ();
		
		return array('passphrase' => $passphrase, 'private_key' => $privateKey);
	}
	

}