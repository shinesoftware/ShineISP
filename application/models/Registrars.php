<?php

/**
 * Registrars
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Registrars extends BaseRegistrars
{

	/**
	 * grid
	 * create the configuration of the grid
	 */	
	public static function grid($rowNum = 10) {
		
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'r.registrars_id', 'alias' => 'registrars_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'r.registrars_id', 'alias' => 'registrars_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Name' ), 'field' => 'r.name', 'alias' => 'name', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Active' ), 'field' => 'r.active', 'alias' => 'active', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		
		$config ['datagrid'] ['fields'] = "r.registrars_id, r.name as name, r.active as active";
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()->select ( $config ['datagrid'] ['fields'] )->from ( 'Registrars r' );
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		
		$config ['datagrid'] ['basepath'] = "/admin/registrars/";
		$config ['datagrid'] ['index'] = "registrars_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/registrars/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/registrars/delete/id/%d";
		return $config;
	}	
	   
    /**
     * delete
     * Delete a record by ID
     * @param $id
     */
    public static function deleteItem($id) {
        Doctrine::getTable ( 'Registrars' )->findOneBy ( 'registrars_id', $id )->delete();
    }
    
    /**
     * getbyId
     * Get a record by ID
     * @param $id
     */
    public static function getbyId($id) {
        return Doctrine::getTable ( 'Registrars' )->find ( $id );
    }
    
    /**
     * getActiveRegistrantId
     * Get a record by ID
     * @param $id
     */
    public static function getRegistrantId($id) {
    	$registrar = Doctrine_Query::create ()->from ( 'Registrars r' )
								    	->where ( "registrars_id = ?", $id )
								    	->andWhere('active = ?', true)
								    	->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
    	
		return !empty($registrar[0]) ? $registrar[0] : array();
    }	
    
    /**
     * getActiveRegistrantbyClass
     * Get a record by Class name
     * @param $classname
     */
    public static function getActiveRegistrantbyClass($classname) {
    	$registrar = Doctrine_Query::create ()->from ( 'Registrars r' )
    									->where ( "class = ?", $classname )
    									->andWhere('active = ?', true)
    									->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );

    	if(!empty($registrar[0]['config'])){
    		$settings = json_decode($registrar[0]['config'], true);
    		$registrar[0] = array_merge($registrar[0], $settings);
    	}
    	
    	
    	return !empty($registrar[0]) ? $registrar[0] : array();									
    }	
	
	/**
	 * Get the actions from the custom Registrar class
	 */
	public static function getActions($registrarID) {
		if(is_numeric($registrarID)){
			$registrar = Registrars::find ( $registrarID, null, true );
			
			if (! empty ( $registrar [0] ['class'] ) && class_exists ( $registrar [0] ['class'] )) {
				$class = $registrar [0] ['class'];
				$reg = new $class ();
				return $reg->getActions();
			}
		}
		return array();
	}
	
	/**
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function findbyDomain($domain, $tld, $fields = "*", $retarray = false) {
		$dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Registrars r' )->leftJoin ( 'r.Domains d ON d.registrars_id = r.registrars_id' )->where ( "d.domain = '$domain' and d.tld='$tld'" );
		$retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
		$registrant = $dq->execute ( array (), $retarray );
		return $registrant;
	}
	
	/**
	 * Get a record by domain ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function findbyDomainID($domainId) {
		$registrant = Doctrine_Query::create ()->from ( 'Registrars r' )
							->leftJoin ( 'r.Domains d ON d.registrars_id = r.registrars_id' )
							->where ( "d.domain_id = ?", $domainId)
							->andWhere('r.active = ?', true)
							->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return $registrant;
	}
	
	/**
	 * Get a record by domain name
	 * @param $domain
	 * @return integer
	 */
	public static function findRegistrarIDbyDomain($domainname) {

		// Get the domain and tld extension from the domain name
		$arrdomain = Shineisp_Commons_Utilities::getTld($domainname);
		
		if(!empty($arrdomain[0]) && !empty($arrdomain[1])){
			$domain =  $arrdomain[0]; 
			$tld = $arrdomain[1]; 
		}else{
			throw new Exception('It was not possible get the tld extension from the domain name', "666");
		}
		
		// Get the code of the tld domain
		$tld = DomainsTlds::getbyTld($tld);
		if(empty($tld)){
			throw new Exception("Tld extension has not been found or the name of the domain is malformed", "666");
		}
		
		$registrar = Doctrine_Query::create ()->from ( 'Registrars r' )
							->leftJoin ( 'r.Domains d ON d.registrars_id = r.registrars_id' )
							->where ( "d.domain = ?", $domain)
							->andWhere('d.tld_id = ?', $tld['tld_id'])
							->andWhere('r.active = ?', true)
							->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
							
		if(!empty($registrar[0]['registrars_id']) && is_numeric($registrar[0]['registrars_id'])){
			return $registrar[0]['registrars_id'];
		}else{
			return false;
		}
	}
	
	/**
	 * Get a list ready for the html select object
	 * @return array
	 */
	public static function getList($showempty = true) {
		$items = array ();
		
		$records = Doctrine_Query::create ()->from ( 'Registrars r' )->where ( "active = ?", true )->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		$translation = Zend_Registry::getInstance ()->Zend_Translate;
		
		if ($showempty) {
			$items[] = $translation->translate ( 'No Registrar' );
		}
		
		foreach ( $records as $c ) {
			$items [$c ['registrars_id']] = $c ['name'];
		}
		
		return $items;
	}
	
    /**
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function find($id, $fields = "*", $retarray = false) {
        $dq = Doctrine_Query::create ()->select ( $fields )
        								->from ( 'Registrars r' )
        								->where ( "r.registrars_id = $id" )
        								->limit ( 1 );
        
        $retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
        $registrar = $dq->execute ( array (), $retarray );
    
    	if(!empty($registrar[0]['config'])){
    		$settings = json_decode($registrar[0]['config'], true);
    		$registrar[0] = array_merge($registrar[0], $settings);
    	}
        return $registrar;
    }	
	
    /**
     * Get the enabled registrant
     * @return Doctrine Record
     */
    public static function findActiveRegistrars() {
        $dq = Doctrine_Query::create ()->from ( 'Registrars r' )
        						->where ( "active = ?", true );
        
        $record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        return $record;
    }	
    
    /**
     * Save the registrar configuration record 
     * 
     * @param posted var from the form
     * @return Boolean
     */
    public static function saveData($record, $id=null) {
    	$config = "";
    	
    	// Set the new values
    	if (is_numeric ( $id )) {
    		$registrar = self::getbyId( $id );
    	}else{
    		$registrar = new Registrars();
    	}
    	
    	if(!empty($record ['settings'])){
    		$config = json_encode($record['settings']);
    	}
    	
    	if(!empty($record ['name'])){
    		
	    	$registrar->name = $record ['name'];
	    	$registrar->class = "Shineisp_Api_Registrars_" . $record ['name'] . "_Main";
	    	$registrar->config = !empty($config) ? $config : null;
	    	$registrar->lastupdate = date('Y-m-d H:i:s');
	    	$registrar->active = !empty($record ['active']) ? $record ['active'] : false;
	    	 
	    	if($registrar->trySave()){
	    		return $registrar->registrars_id;
	    	}
    	}
    	
    	return false;
    }
    
    /**
     * Read all the registrars configuration files 
     * @param $registrar
     * @return ArrayObject
     */
    public static function readConfig($registrar) {
        
        return array();
    }
    
    /**
     * Update the credit for a registrant
     * @param $regid, $credit
     * @return Void
     */
    public static function updateCredit($regid, $credit) {
        $dq = Doctrine_Query::create ()->update ( 'Registrars r' )
                ->set ( 'r.credit', '?', $credit)
                ->set ( 'r.lastupdate', '?', date('Y-m-d H:i:s'))
                ->where ( "registrars_id = ?", $regid );
        return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
    }
    
    /**
     * Get the registrant credit
     * @param $regid
     * @return Void
     */
    public static function getCredit($regid) {
        $dq = Doctrine_Query::create ()->select('credit')->from ( 'Registrars r' )->where ( "registrars_id = ?", $regid );
        return $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
    }
}