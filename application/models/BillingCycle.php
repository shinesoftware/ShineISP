<?php

/**
 * BillingCycle
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class BillingCycle extends BaseBillingCycle {
	
	public static function findAll() {
		return Doctrine::getTable ( 'BillingCycle' )->findAll ();
	}
	
	public static function find($id) {
		return Doctrine::getTable ( 'BillingCycle' )->find ( $id );
	}
	
	public static function getList($empty = false, $onlydomain = false) {
		$items = array ();
		$registry = Shineisp_Registry::getInstance ();
        
		$dq = Doctrine_Query::create ()->from ( 'BillingCycle b' );
		
		if ($empty) {
			$items [] = "";
		}
		
		if ($onlydomain) {
			$dq->where ( 'b.domain = ?', true );
		}
		
		$arCycles = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		foreach ( $arCycles as $c ) {
			$items [$c ['billing_cycle_id']] = $c ['name'];
		}
		return $items;
	}
	
	/**
	 * Get the billing cycle
	 * 
	 * @return integer
	 */
	public static function getAllinfo($id) {
		if(is_numeric($id)){
			$record = Doctrine_Query::create ()->from ( 'BillingCycle b' )
											   ->where('billing_cycle_id = ?', $id)
			   								   ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			return !empty($record[0]) ? $record[0] : null;
		}else{
			return null;
		}
	}
	
	/**
	 * Get the billing cycle months 
	 * @return integer
	 */
	public static function getMonthsNumber($id) {
		if(is_numeric($id)){
			$record = Doctrine::getTable ( 'BillingCycle' )->findOneBy ( 'billing_cycle_id', $id, Doctrine::HYDRATE_ARRAY );
			return $record ['months'];
		}else{
			return 0;
		}
	}
	
	/**
	 * Get the minimum billing cycle for the domains products
	 * @return integer
	 */
	public function getDomainMinInvoicing() {
		$record = Doctrine_Query::create ()->from ( 'BillingCycle b' )->where('domain = ?', 1)->orderBy('months')->limit(1)->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		return !empty($record[0]['billing_cycle_id']) ? $record[0]['billing_cycle_id'] : null;
	}
}