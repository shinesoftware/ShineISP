<?php

/**
 * Messages
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Messages extends BaseMessages
{
    /**
     * find
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function find($fieldtocheck, $id, $retarray = false) {
    	$controller = Zend_Controller_Front::getInstance ()->getRequest ()->getControllerName ();
    	
        $dq = Doctrine_Query::create ()->select ( "message_id, c.customer_id, c.email as customeremail, i.email as ispemail, i.isp_id, DATE_FORMAT(m.dateposted, '%d/%m/%Y %H:%i:%s') as dateposted, m.message as message, isp_id as isp, CONCAT(c.firstname, ' ', c.lastname) as fullname, i.company as company" )
                                        ->from ( 'Messages m' )
                                        ->leftJoin('m.Customers c')
                                        ->leftJoin('m.Isp i')
                                        ->where ( "$fieldtocheck = ?" , $id )
                                        ->orderBy('m.dateposted asc');
        
        $retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
        $items = $dq->execute ( array (), $retarray );
        
        return $items;
    }    
    
	/**
	 * List of the last messages attached within the orders, domains, customers detail page
	 * 
	 * 
	 * @param string $attachedto [orders, domains, customers]
	 * @param integer $limit
	 * @return ArrayObject
	 */
	public static function Last($attachedto = "orders",  $limit=5) {
		$dq = Doctrine_Query::create ()->from ( 'Messages m' );

		// Adding first the main ID index field
		if($attachedto == "orders"){
			$dq->select("order_id as id");	
			$dq->where ( "order_id IS NOT NULL");	
		}elseif ($attachedto == "domains"){
			$dq->select("domain_id as id");
			$dq->where ( "domain_id IS NOT NULL");
		}elseif ($attachedto == "customers"){
			$dq->select("customer_id as id");
			$dq->where ( "customer_id IS NOT NULL");
		}

		// now we can add more fields
		$dq->addSelect ( "DATE_FORMAT(m.dateposted, '%d/%m/%Y %H:%i:%s') as date, m.message as message" );
		
		// Sort the items
		$dq->orderBy ( 'm.dateposted desc' )->limit ( $limit );
		$records = $dq->execute ( null, Doctrine::HYDRATE_ARRAY );
		
		// Strip the html and trucate the message
		for ($i=0; $i < count($records); $i++) {
			$records[$i]['message'] = Shineisp_Commons_Utilities::truncate(strip_tags($records[$i]['message']), 50, "...", false, true);
		}
		
		return $records;
	}
    
    /**
     * Save the message.
     *  
     * @param $note
     * @param $customerID
     * @param $domainID
     * @param $orderID
     * @param $detailID
     * @return Boolean
     */
    public static function addMessage($note, $customerID, $domainID=NULL, $orderID=NULL, $detailID=NULL, $ispID=NULL) {
    	$message = new Messages ();
    	
    	if(!empty($note)){
    		
	    	if(!is_numeric($customerID)){
	    		return false;
	    	}
	    	
	    	$customer = Customers::get_by_customerid($customerID);
	    	
	    	$isp = Isp::getActiveISP ();
	    	
			$message->dateposted = date ( 'Y-m-d H:i:s' );
			$message->message = $note;
			$message->customer_id = $customerID;
			$message->isp_id = $ispID;
			$message->domain_id = $domainID;
			$message->order_id = $orderID;
			$message->detail_id = $detailID;
			$message->save ();
			
			return $message['message_id'];
    	}
    	
    	return false;
    }


	/**
	 * Send a message using a template
	 * 
	 * @param string $tpl Name of the template without the extension
	 * @param string $to  Email address
	 * @param array $placeholders 
	 */
	public static function sendMessage($tpl, $to, array $placeholders ){
		$isp = Isp::getActiveISP ();
		
		$retval = Shineisp_Commons_Utilities::getEmailTemplate ( $tpl );
		if ($retval) {
			
			$subject = $retval ['subject'];
			$body = $retval ['template'];
			
			foreach ($placeholders as $key => $value) {
				$subject = str_replace ( "[$key]", $value, $subject );
			}
			
			foreach ($placeholders as $key => $value) {
				$body = str_replace ( "[$key]", strip_tags(html_entity_decode($value, ENT_QUOTES, 'UTF-8')), $body );
			}
			
			$body = str_replace ( "[signature]", $isp ['company'] . "\n" . $isp ['email'], $body );
			
			// Send a message 
			Shineisp_Commons_Utilities::SendEmail ( $isp ['email'], $to, null, $subject, $body );
			
		}
	}
	
}