<?php

/**
 * Invoices
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Invoices extends BaseInvoices {
	
	public static $events;
	
	/**
	 * Event Manager Registration
	 * @return mixed
	 */
	public static function events()
	{
		$em = Shineisp_Registry::get('em');
		if (!self::$events && is_object($em)) {
			self::$events = Shineisp_Registry::get('em');
		}
	
		return self::$events;
	}
	
	/**
	 * grid
	 * create the configuration of the grid
	 */	
	public static function grid($rowNum = 10) {
		
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'i.invoice_id', 'alias' => 'invoice_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'i.invoice_id', 'alias' => 'invoice_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Invoice Number' ), 'field' => 'i.formatted_number', 'alias' => 'formatted_number', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Order Number' ), 'field' => 'o.order_number', 'alias' => 'order_number', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Date' ), 'field' => 'i.invoice_date', 'alias' => 'invoice_date', 'sortable' => true, 'searchable' => true, 'type' => 'date' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Cost' ), 'field' => 'o.cost', 'alias' => 'cost', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Total' ), 'field' => 'o.total', 'alias' => 'total', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'VAT' ), 'field' => 'o.vat', 'alias' => 'vat', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Grandtotal' ), 'field' => 'o.grandtotal', 'alias' => 'grandtotal', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Customer' ), 'field' => "CONCAT(c.firstname,' ', c.lastname)", 'alias' => 'fullname', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Company' ), 'field' => "c.company", 'alias' => 'company', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		#$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Invoice dest.' ), 'field' => "CONCAT(r.firstname,' ', r.lastname)", 'alias' => 'invoice_dest', 'sortable' => true, 'type' => 'string', 'searchable' => true);
		$config ['datagrid'] ['fields'] =  "invoice_id, 
											DATE_FORMAT(i.invoice_date, '%d/%m/%Y') as invoice_date, 
											i.formatted_number as formatted_number, 
											o.order_number as order_number, 
											o.cost as cost, 
											o.total as total, 
											o.vat as vat, 
											o.grandtotal as grandtotal, 
											c.company as company,
											r.company as reseller,
											CONCAT(c.firstname,' ', c.lastname ) as fullname, 
											CONCAT(r.firstname,' ', r.lastname ) ) as invoice_dest";
		
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()
							                            ->select ( $config ['datagrid'] ['fields'] )
							                            ->from ( 'Invoices i' )
							                            ->leftJoin ( 'i.Customers c' )
							                            ->leftJoin ( 'c.Customers r' )
							                            ->leftJoin ( 'i.Orders o' )
							                            ->orderBy ( 'invoice_date desc' );		
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		
		$config ['datagrid'] ['basepath'] = "/admin/invoices/";
		$config ['datagrid'] ['index'] = "invoice_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/invoices/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/invoices/delete/id/%d";
		
		$config ['datagrid'] ['massactions']['common'] = array ('bulk_pdf_export'=>'Pdf List', 'bulk_csv_export' => 'Csv Export', 'bulk_print_invoices' => 'Download Invoices', 'bulk_delete_invoices' => 'Delete Invoices');
		
		if(Shineisp_Plugins_Dropbox_Main::isReady()){
			$config ['datagrid'] ['massactions']['common'] = array_merge($config ['datagrid'] ['massactions']['common'], array('bulk_dropbox_invoices' => 'Upload Invoices into Dropbox Account' ));
		}
		
		return $config;
	}	

	/**
	 * statsgrid
	 * create a new datagrid
	 */	
	public static function getSummaryGrid($helper, $year) {
		
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Month nr.' ), 'field' => 'MONTH(o.order_date)', 'alias' => 'month', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Month' ), 'field' => 'date_format(o.order_date, "%M")', 'alias' => 'monthname', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Year' ), 'field' => 'YEAR(o.order_date)', 'alias' => 'yearnum', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Total' ), 'field' => 'SUM(o.total)', 'alias' => 'total', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'VAT' ), 'field' => 'SUM(o.vat)', 'alias' => 'vat', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Grand Total' ), 'field' => 'SUM(o.grandtotal)', 'alias' => 'grandtotal', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['hassubrecords'] = true;
		
		$config ['datagrid'] ['fields'] =  "MONTH(o.order_date) as month,
	                            			date_format(o.order_date,'%M') as monthname, 
	                            			YEAR(o.order_date) as yearnum, 
	                            			SUM(o.total) as total,
	                            			SUM(o.vat) as vat,
	                            			SUM(o.grandtotal) as grandtotal";
		
		$config ['datagrid'] ['recordset'] = self::getSummary($year);
		$config ['datagrid'] ['rownum'] = 12;
		$config ['datagrid'] ['id'] = "incoming";
		$config ['datagrid'] ['placeholder'] = "incoming";
		$config ['datagrid'] ['title'] = $translator->translate('Incoming data report');
		
		$config ['datagrid'] ['basepath'] = "/admin/reports/show/type/profitofyear/";
		$helper->datagrid->setModule ( "invoices" )->setModel ( new Invoices );
		$helper->datagrid->setConfig ( $config )->datagrid ();
	}	
	
	/**
	 * get the list of the years where the ISP has invoiced the services
	 * 
	 * @return ArrayObject
	 */
	public static function getYears() {
		$result = array();
		
		$records = Doctrine_Query::create ()
                            ->select ( "YEAR(o.order_date)" )
                            ->from ( 'Orders o' )
                            ->where('o.invoice_id is not null')
                            ->andWhere('o.status_id = ?', Statuses::id("complete", "orders"))
                            ->groupBy('YEAR(o.order_date)')
                            ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        
        foreach ($records as $record){
        	$result[] = $record['YEAR'];	
        }
        
        return $result;
	}
	

	/**

	 * get the incoming summary for the selected year

	 *

	 * @param integer $year

	 */

	public static function getSummary($year, $payments=TRUE) {

	

		if(!is_numeric($year)){

			return array();

		}

	

		$records = Doctrine_Query::create ()

		->select ( "o.order_id,

				MONTH(i.invoice_date) as month,

				date_format(i.invoice_date,'%M') as monthname,

				YEAR(i.invoice_date) as yearnum,

				SUM(o.total) as total,

				SUM(o.vat) as vat,

				SUM(o.grandtotal) as grandtotal" )

				->from ( 'Orders o' )

				->leftJoin ( 'o.Invoices i' )

				->where('YEAR(i.invoice_date) = ?', $year)

				->andWhere('o.invoice_id <> ?', '')

				->andWhere('o.status_id = ?', Statuses::id("complete", "orders"))

				->groupBy('YEAR(i.invoice_date)')

				->addGroupBy('MONTH(i.invoice_date)')

				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );

		if($payments){

			for ($i=0;$i<count($records);$i++) {

				$records[$i]['subrecords'] = Payments::getAllPaymentsbyMonthYear($records[$i]['month'], $year);

			}

		}

		 

		return $records;

	}
	
	

	/**

	 * get the incoming summary for the selected range of dates

	 *

	 * @param date $from
	 * @param date $to

	 */

	public static function getWeekSummarybyDateRange($from, $to) {

	

		if(empty($from) || empty($to)){

			return array();

		}

	

		$records = Doctrine_Query::create ()

		->select ( "o.order_id,

				MONTH(i.invoice_date) as month,
				WEEK(i.invoice_date) as weekname,

				date_format(i.invoice_date,'%M') as monthname,

				YEAR(i.invoice_date) as yearnum,

				SUM(o.total) as total,

				SUM(o.vat) as vat,

				SUM(o.grandtotal) as grandtotal" )

				->from ( 'Orders o' )

				->leftJoin ( 'o.Invoices i' )

				->where('i.invoice_date BETWEEN ? AND ?', array($from, $to))

				->andWhere('o.invoice_id <> ?', '')

				->andWhere('o.status_id = ?', Statuses::id("complete", "orders"))

				->groupBy('YEARWEEK(i.invoice_date)')

				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );

		 

		return $records;

	}	
	
	
	/**
	 * Create the google charts  
	 * 
	 * @param array $years
	 * @return string
	 */
	public static function graph(array $years) {
		$currency = Shineisp_Registry::getInstance ()->Zend_Currency;
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		$isp = Isp::getActiveISP();
		$grosstotal = 0;
		$total = 0;
		
		// Get the summary of the incoming and of the expenses of the year
		foreach ($years as $year) {
			$data[$year]['incoming'] = self::getSummary ( $year, false );
			$data[$year]['expenses'] = PurchaseInvoices::getSummary($year, false, false, false, true);
		}
		
		$dataset['axis']['x'] = $translator->_( 'Months' );
		$dataset['axis']['y'] = $translator->_( 'Euro' );
		
		$dataset['labels'][] = array('type' =>'string', 'title' => $translator->translate('Months'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Grand Total'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Revenues (Taxable incomes)'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Net Revenues (Taxable incomes - Costs)'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Cost'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Vat'));
		
		foreach ( $data as $year => $records ) {
			for ($i=0; $i<count($records['incoming']); $i++) {
				$income = $records['incoming'][$i];
				$expense = !empty($records['expenses'][$i]) ? $records['expenses'][$i] : 0;
				
				$totals['grandtotal'] = $income['grandtotal'];
				$totals['total'] = $income['total'];
				$totals['totalnet'] = $income['total'] - $expense['total'];
				$totals['cost'] = $expense['total'];
				$totals['vat'] = $expense['vat'] - $income['vat'];
				$total += $totals['totalnet']; 
				$grosstotal += $income['total']; 
				$dataset['records'][$income['monthname']][] = $totals;
			}
		}
		
		$dataset['title'] = $translator->_( '%s Performances in %s - %s net - %s gross', $isp['company'], $year, $currency->toCurrency($total, array('currency' => Settings::findbyParam('currency'))), $currency->toCurrency($grosstotal, array('currency' => Settings::findbyParam('currency'))) );
		return $dataset;
	}	
	
	/**
	 * Create the google week chart 
	 * 
	 * @param array $years
	 * @return string
	 */
	public static function graph_week($from, $to) {
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		$isp = Isp::getActiveISP();
		$total = 0;
		
		// Get the summary of the incoming and of the expenses of the year
		$data['incoming'] = self::getWeekSummarybyDateRange($from, $to);
		$data['expenses'] = PurchaseInvoices::getWeekSummarybyDateRange($from, $to);
		
		$dataset['axis']['x'] = $translator->_( 'Week Number - Month' );
		$dataset['axis']['y'] = $translator->_( 'Euro' );
		
		$dataset['labels'][] = array('type' =>'string', 'title' => $translator->translate('Week'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Net Revenues (Taxable incomes - Costs)'));
		
		for ($i=0; $i<count($data['incoming']); $i++) {
			$income = $data['incoming'][$i];
			$expense = !empty($data['expenses'][$i]) ? $data['expenses'][$i] : 0;
			$totals['totalnet'] = $income['total'] - $expense['total'];
			$dataset['records'][$income['weekname'] . "/". $income['monthname'] ][] = $totals;
		}
		
		$dataset['title'] = $translator->_( '%s Week Performances', $isp['company'] );
		
		return $dataset;
	}	
	
	/**
	 * get invoice sequential increment number from settings.
	 * Returns 1 if not set
	 */
	public static function sequentialIncrement() {
		$increment = intval(Settings::findbyParam('invoices_increment'));
		if ( !$increment ) {
			return 1;
		}
		
		return $increment;
	}
	
	/**
	 * Generate the invoice number
	 * @param int $invoice_id
	 */
	public static function generateNumber($invoice_id = 0) {
		$invoice_id = isset($invoice_id) ? intval($invoice_id) : 0;
		if ( !$invoice_id ) {
			return false;
		}
		
		$invoices_number_format = Settings::findbyParam('invoices_number_format');
		if ( empty($invoices_number_format) ) {
			// Empty setting, there is no need to try replacement
			return InvoicesSettings::getLastInvoice();
		}
		
		$Order   = Doctrine::getTable ('Orders')->findOneBy('invoice_id', $invoice_id);
		$Invoice = Doctrine::getTable ('Invoices')->find($invoice_id);
		if ( !$Invoice ) {
			return InvoicesSettings::getLastInvoice();
		}

		$zero_fill = Settings::findbyParam('invoices_zero_prefix');
		$zero_fill = isset($zero_fill) ? intval($zero_fill) : 0;
		$invoices_zero_prefix = str_pad($invoice_id, $zero_fill, '0', STR_PAD_LEFT);
		$invoiceNumber        = str_pad($Invoice->number, $zero_fill, '0', STR_PAD_LEFT);
		
		// Invoice Count is the number of invoices associated to a customer
		$invoicesCount = 0;
		$q = Doctrine_Query::create()
      		->select('COUNT(invoice_id) AS invoicesCount')
      		->from('Invoices')
			->where('customer_id = ?', $Invoice->customer_id)
			->fetchArray();
		if ( isset($q[0]) && isset($q[0]['invoicesCount'])) {
			$invoicesCount = intval($q[0]['invoicesCount']);	
		}
		Shineisp_Commons_Utilities::log("Invoices count for customer_id ".$Invoice->customer_id.": ".$invoicesCount, 'invoices.log');

		// Get all placeholders in orders_number_format
		preg_match_all('/\[([a-zA-Z0-9_]+)\]/', $invoices_number_format, $out);
		if ( is_array($out) && isset($out[1]) ) {
			foreach ( $out[1] as $placeholder ) {
				//* ORDER
				if ( $placeholder == 'order_id' ) {
					$v = Orders::zeroPrefix($Invoice->order_id);
				} else if ( $placeholder == 'order_date' ) {
					$v = $Order->order_date;						
				} else if ( $placeholder == 'order_year' ) {
					$v = substr($Order->order_date,0,4);						
				} else if ( $placeholder == 'order_year2' ) {
					$v = substr($Order->order_date,2,2);	
				} else if ( $placeholder == 'order_month' ) {
					$v = substr($Order->order_date,5,2);	
				} else if ( $placeholder == 'order_day' ) {
					$v = substr($Order->order_date,8,2);	
				} else if ( $placeholder == 'isp_id' ) {
					$v = $Order->isp_id;	
				
				//* INVOICE
				} else if ( $placeholder == 'invoice_id' ) {
					$v = $invoices_zero_prefix;						
				} else if ( $placeholder == 'invoice_number' ) {
					$v = $invoiceNumber;						
				} else if ( $placeholder == 'invoice_year' ) {
					$v = substr($Invoice->invoice_date,0,4);						
				} else if ( $placeholder == 'invoice_year2' ) {
					$v = substr($Invoice->invoice_date,2,2);	
				} else if ( $placeholder == 'invoice_month' ) {
					$v = substr($Invoice->invoice_date,5,2);	
				} else if ( $placeholder == 'invoice_day' ) {
					$v = substr($Invoice->invoice_date,8,2);	
				} else if ( $placeholder == 'invoices_count' ) {
					$v = $invoicesCount;	
					
				//* MISC
				} else if ( $placeholder == 'RN' ) {
					$v = mt_rand(0,9);
				} else if ( $placeholder == 'RL' ) {
					$v = chr(65 + mt_rand(0, 25));
				} else if ( $placeholder == 'TS' ) {
					$v = time();
					
				//* FALLBACK TO INVOICE TABLE
				} else {
					$v = '['.$placeholder.']';
					if ( isset($Invoice->{$placeholder}) && $placeholder != 'order_id' ) { // order_id is managed differently from the first condition
						$v = $Invoice->{$placeholder};
					}
				}
				$invoices_number_format = preg_replace('/\['.$placeholder.'\]/', $v, $invoices_number_format,1);
			}
		}
		
		return $invoices_number_format;
	}
	
	
    /**
     * Set a record with a status
     * 
     * @param $id, $status
     * @return Void
     */
    public static function setInvoice($id, $invoiceID) {
        $object = Doctrine::getTable ( 'Orders' )->find ( $id );
        $object->invoice_id = $invoiceID;
        return $object->save ();
    }
    
    /**
     * find
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function find($id) {
        return Doctrine::getTable ( 'Invoices' )->findOneBy ( 'invoice_id', $id );
    }
    
    /**
     * find
     * Get a record by invoice number
     * @param $number
     * @return Doctrine Record
     */
    public static function findbyNumber($number, $year) {
        return Doctrine::getTable ( 'Invoices' )
        ->findOneBy ( 'number', $number );
    }
    
	/**
	 * Get a invoices by id 
	 * @param array $ids [1,2,3,4,...,n]
	 * @param string $fields
	 * @return Array
	 */
	public static function get_invoices($ids, $fields="*", $orderby=null) {
		return Doctrine_Query::create ()->select($fields)
										->from ( 'Invoices i' )
										->leftJoin ( 'i.Customers c' )
										->leftJoin ( 'i.Orders o' )
										->whereIn( "i.invoice_id", $ids)
										->orderBy(!empty($orderby) ? $orderby : "")
										->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}    
    
    /**
     * getAll
     * Get all the records
     * @return Doctrine Record
     */
    public static function getAll() {
        return Doctrine::getTable ( 'Invoices' )->findAll(Doctrine_Core::HYDRATE_ARRAY);
    }
    
	/**
	 * getByCustomerID
	 * Get all data  
	 * @param $customerID
	 * @return Array
	 */
	public static function getByCustomerID($customerID, $fields = '*') {
		$records = Doctrine_Query::create ()->select ( $fields )
							->from ( 'Invoices i' )
							->leftJoin ( 'i.Customers c' )
							->leftJoin ( 'i.Orders o' )
							->where ( "i.customer_id = ?", $customerID )
							->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
		
		return $records;
	}
    
    /**
     * Delete
     * Delete an order using its ID and the customer id.
     * @param $id, $customerid
     * @return boolean
     */
    public static function DeleteByID($id, $customerid=null) {
        $dq = Doctrine_Query::create ()->delete ()->from ( 'Invoices i' )->where ( 'invoice_id = ?', $id );
        
        if($customerid){
        	$dq->andWhere ( "customer_id = ?", $customerid );
        }
        
        return $dq->execute ();
    }
    
    /**
     * findByCustomerID
     * Get a record by CustomerID
     * @param $id
     * @return Doctrine Record
     */
    public static function findByCustomerID($id) {
        return Doctrine::getTable ( 'Invoices' )->findBy ( 'customer_id', $id);
    }  
    
    /**
     * findByOrderID
     * Get a record by OrderID
     * @param $id
     * @return Doctrine Record
     */
    public static function findByOrderID($id) {
        return Doctrine::getTable ( 'Invoices' )->findBy ( 'order_id', $id );
    }  
    
    
    /**
     * getOrderbyInvoiceId
     * Get a record by InvoiceID
     * @param $invoiceid
     * @return Doctrine Record
     */
    public static function getOrderbyInvoiceId($invoiceid) {
        return Doctrine::getTable ( 'Orders' )->findBy('invoice_id', $invoiceid, Doctrine::HYDRATE_ARRAY );
    }      
    
    /**
     * getAllInfo
     * Get all data starting from the orderID 
     * @param $id
     * @return Doctrine Record / Array
     */
    public static function getAllInfo($id, $fields = "*", $retarray = false, $where = false) {
        try {
            $dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Invoices i' )
            ->where ( "invoice_id = ?", $id )->limit ( 1 );
            
            if($where){
                $dq->andWhere($where);
            }
            
            $retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
            $items = $dq->execute ( array (), $retarray );
            
            return $items;
        } catch ( Exception $e ) {
            die ( $e->getMessage () );
        }
    }   
    
    /*
     * getList
     * Get all the invoices for a select object
     */
    public static function getList($empty=false) {
        $items = array ();
        $arrTypes = Doctrine::getTable ( 'Invoices' )->findAll ();
        if($empty){
            $items[] = "";
        }
        foreach ( $arrTypes->getData () as $c ) {
            $items [$c ['invoice_id']] = $z = $c['formatted_number']." - ".Shineisp_Commons_Utilities::formatDateOut($c ['invoice_date']);
        }
        return $items;
    }

    
    /**
     * Create
     * Create an invoice starting from an order id
     * @param $orderid
     * @return Doctrine Record
     */
    public static function Create($orderid) {
        if(is_numeric($orderid)){
	        $invoice_number = InvoicesSettings::getLastInvoice();
	        $customer_id    = Doctrine::getTable ( 'Orders' )->find($orderid)->customer_id;
	        
	        // Check if there is an invoice ID set for this order.
	        $Invoice = Doctrine::getTable ( 'Invoices' )->findOneByOrderId($orderid);
	        if(isset($Invoice->invoice_id) && is_numeric($Invoice->invoice_id) && $Invoice->invoice_id > 0){
	            // Set the invoice number to the order
	            Orders::setInvoice ( $orderid, $Invoice->invoice_id);
	            return $Invoice->invoice_id;
	        }
	        
	        try {
	            if ( is_numeric($customer_id) ) {
	            	$Invoice = new Invoices();
	                $Invoice->number       = $invoice_number;
	                $Invoice->order_id     = $orderid;
	                $Invoice->customer_id  = $customer_id;
	                $Invoice->invoice_date = date('Y-m-d');
	                $Invoice->save();
	                $invoice_id = $Invoice->getIncremented();
					
					Shineisp_Commons_Utilities::log("Created new invoice with id #".$invoice_id, 'invoices.log');
					
	                InvoicesSettings::setLastInvoice($invoice_number);
	                Orders::setInvoice ($orderid, $invoice_id);
					
					// Generate an Invoice Number
					$invoice_number = self::generateNumber($invoice_id);
					if ( isset($invoice_number) ) {
						Shineisp_Commons_Utilities::log("Generated invoice number ".$invoice_number." for invoice with id #".$invoice_id, 'invoices.log');
						$Invoice->formatted_number = $invoice_number;
						$Invoice->save();	
					}

	                // Create the pdf invoice document (dropbox event is triggered by this)
	                self::PrintPDF($invoice_id, false, true);
					
					if ( intval(Settings::findbyParam('auto_send_invoice')) === 1 && $invoice_id > 0) {
						Invoices::sendInvoice ( $invoice_id );
					}	
	                
	                return $invoice_id;
	            }
	        }catch (Exception $e){
	            return $e->getMessage();
	        }
        }
    }

    /**
     * Get the fastlink of invoice, if not exist create it
     ****/
    public static function getFastlinksInvoice( $invoiceid, $orderid, $customerid ) {
        $link_exist = Fastlinks::findlinks ( $orderid, $customerid, 'orders' );
        
        // The fastlink does not exists and we have to create it
        if (count ( $link_exist ) == 0) {
            $fastlink   =  Fastlinks::CreateFastlink ( "orders", "createinvoice", json_encode ( array ('id' => $invoiceid ) ), "orders", $orderid, $customerid );
        } else {
            // The fastlink exists and we get it in order to write it in the email content
            // but before we have to check if the link that we have to send to the user contain the right invoice
            
            // If the id of the invoice is not equal to the id of the invoice attached into the order we have to create a new fastlink 
            $params = json_decode ( $link_exist [0] ['params'], true );
            if (! empty ( $params ['id'] ) && $params ['id'] == $invoiceid) {
                $fastlink = $link_exist [0] ['code'];
            } else {
                $fastlink = Fastlinks::CreateFastlink ( "orders", "createinvoice", json_encode ( array ('id' => $invoiceid ) ), "orders", $orderid, $customerid );
            }
        }   
        
        return $fastlink;     
    }
    
    /*
     * sendInvoice
     * send the invoice by email
     */
    public static function sendInvoice($invoiceid, $urlEmail = ""){
        if (is_numeric ( $invoiceid )) {
        	$invoice = self::getAllInfo($invoiceid, null, true);
            if (!empty($invoice[0])) {
            	$invoiceNum = $invoice[0]['number'];
                $orderid    = $invoice [0] ['order_id'];
                $customerid = $invoice [0] ['customer_id'];
            } else {
                return false;
            }
            
            $fastlink   = self::getFastlinksInvoice($invoiceid, $orderid, $customerid);
            
            $order = Orders::getAllInfo ( $orderid, null, true );
            
            //if customer comes from reseller
            if ($order [0] ['Customers'] ['parent_id']) {
                $invoice_dest    = Customers::getAllInfo ( $order [0] ['Customers'] ['parent_id'] );
                $customer        = $invoice_dest ['firstname'] . " " . $invoice_dest ['lastname'];
                $customer       .= ! empty ( $invoice_dest ['company'] ) ? " - " . $invoice_dest ['company'] : "";
                $customer_email  = $invoice_dest ['email'];
                $language_id  = $invoice_dest ['language_id'];
            } else {
                $customer        = $order [0] ['Customers'] ['firstname'] . " " . $order [0] ['Customers'] ['lastname'];
                $customer       .= ! empty ( $order [0] ['Customers'] ['company'] ) ? " - " . $order [0] ['Customers'] ['company'] : "";
                $customer_email  = $order [0] ['Customers'] ['email'];
                $language_id  = $order [0] ['Customers'] ['language_id'];
            }
            
            $email = $order [0] ['Isp'] ['email'];
            $signature = $order [0] ['Isp'] ['company'];
            if( $urlEmail == "" ) {
                $url = "http://" . $_SERVER ['HTTP_HOST'] . "/index/link/id/" . $fastlink;    
            } else {
                $url = $urlEmail;
            }
            
            $date = explode ( "-", $order [0] ['order_date'] );
            
			Shineisp_Commons_Utilities::sendEmailTemplate($customer_email, 'new_invoice', array(
				 'orderid'    => $order [0] ['order_number']
				,'invoiceid'  => sprintf ( "%03s", $invoiceNum ) . "/" . $date [0]
				,'fullname'   => $customer
				,'email'      => $email
				,'url'        => $url
				,':shineisp:' => $order [0] ['Customers']
				,'conditions' => strip_tags(Settings::findbyParam('conditions'))
			), null, null, null, null, $language_id);			
            return true;
        }
        
        return false;
    }
    
    /**
     * Money format value function
     * @param float $values
     * @return Ambigous <number, string, mixed>
     */
   	public static function Total($values) {
   		$currency = Shineisp_Registry::getInstance ()->Zend_Currency;
   		
   		$value = 0;
   		if(count($values)>0){
   			$value = $currency->toCurrency(array_sum($values), array('currency' => Settings::findbyParam('currency')));
   		}
   		
    	return $value;
    }
    
	
	/**
	 * isOwner
	 * Check if the customer is the owner of the selected invoice 
	 * @param $invoice_id
	 * @param $customer_id
	 * @return Array
	 */
	public static function isOwner($invoice_id, $customer_id) {
		try {
			$dq = Doctrine_Query::create ()->select ( 'Count(*) as total' )
			->from ( 'Invoices i' )
			->leftJoin('i.Customers c' )
			->where ( "i.invoice_id = ?", $invoice_id )
			->andWhere ("(i.customer_id = ? OR c.parent_id = ?)", array($customer_id, $customer_id) );

			$record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			if (! empty ( $record [0] ['total'] ) && $record [0] ['total'] > 0) {
				return true;
			} else {
				return false;
			}
			
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}    
    
	public static function Export() {
		try {
			$invoices = self::getAll();
			foreach ($invoices as $invoice){
				echo $invoice['invoice_id'] . "<br/>";
				self::PrintPDF($invoice['invoice_id'], false);
			}
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
		die ();
	}
	
	/**
	 * orverwrite an invoice
	 * @param int $invoice_id : invoice id
	 */
	public static function overwrite($invoice_id) {
		if ( !is_numeric($invoice_id) ) {
			return false;
		}
		
		return self::PrintPDF($invoice_id, false, true);
	}
	
    /**
     * print the invoice
     * @param unknown_type $invoiceid
     */
    public static function PrintPDF($invoice_id, $show = true, $force=false, $path="/documents/invoices/") {
    		$currency = Shineisp_Registry::getInstance ()->Zend_Currency;
			$pdf      = new Shineisp_Commons_PdfOrder ( );
    	
    		if(!is_numeric($invoice_id)){
    			return false;
    		}
			
			$invoice = Invoices::find ( $invoice_id );
			if ( !$invoice ) {
				return false;
			}
			
			$invoice = $invoice->toArray ();

			// Set the basepath for the file
			$Order = Doctrine::getTable ( 'Orders' )->findOneBy('invoice_id', $invoice_id);
			$invoicePath = $path.$Order->isp_id.'/'.str_replace('-','/',$invoice ['invoice_id']);
			
			// Set the name of the file
			$filename    = $invoicePath.'/'.$invoice['invoice_id'].".pdf";
			$filenameOld = $path.$invoice ['invoice_date']." - ".$invoice ['number'].".pdf";
			
			// Invoice already exists, we return it
			if ( (file_exists(PUBLIC_PATH.$filename) || file_exists(PUBLIC_PATH.$filenameOld)) && $show && !$force ) {
				$outputFilename = !empty($invoice['formatted_number']) ? $invoice['formatted_number'] : $invoice['invoice_date']."_".$invoice['number'];
				header('Content-type: application/pdf');
				header('Content-Disposition: attachment; filename="'.$outputFilename.'"');
				
				$invoice = file_exists(PUBLIC_PATH.$filename) ? file_get_contents(PUBLIC_PATH.$filename) : file_get_contents(PUBLIC_PATH.$filenameOld);
				die($invoice);
			}			
			
    		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
			
			$payments   = Payments::findbyorderid ( $invoice ['order_id'], null, true );
			$order      = Orders::getAllInfo ( $invoice ['order_id'], null, true );
			
			
			$database ['header'] ['label'] = $translator->translate('Invoice No.') . " " . sprintf("%03d", $invoice['number']) . " - " . Shineisp_Commons_Utilities::formatDateOut ($invoice['invoice_date']);
			$database ['columns'] [] = array ("value" => "SKU",            "size" => 20,    "align" => "left",    "key" => "sku");
			$database ['columns'] [] = array ("value" => "Description",    "size" => 60,   "align" => "left",    "key" => "description");
			$database ['columns'] [] = array ("value" => "Qty",            "size" => 2,    "align" => "right",   "key" => "qty");
			$database ['columns'] [] = array ("value" => "Unit",           "size" => 2,    "align" => "center",  "key" => "unit");
			$database ['columns'] [] = array ("value" => "Tax Free Price", "size" => 22,   "align" => "right",   "key" => "taxfreeprice");
			$database ['columns'] [] = array ("value" => "Setup fee",      "size" => 15,   "align" => "right",   "key" => "setup");
			$database ['columns'] [] = array ("value" => "Tax %",          "size" => 10,    "align" => "right",   "key" => "taxpercent");
			$database ['columns'] [] = array ("value" => "Total",          "size" => 18,   "align" => "right",   "key" => "total");
			
			if (isset ( $order [0] )) {
				$orderinfo ['order_number'] = !empty($order[0]['order_number']) ? $order[0]['order_number'] : Orders::formatOrderId($order[0]['order_id']);
				$orderinfo ['invoice_id'] = $invoice ['number'];
				$orderinfo ['date'] = Shineisp_Commons_Utilities::formatDateOut ( $invoice ['invoice_date'] );
				
				//if customer comes from reseller
				if ($order [0] ['Customers'] ['parent_id']) {
					$invoice_dest = Customers::getAllInfo ( $order [0] ['Customers'] ['parent_id'], 'c.*, a.*' );
					$orderinfo ['customer'] ['customer_id'] = $invoice_dest ['customer_id'];
					$orderinfo ['customer'] ['company'] = $invoice_dest ['company'];
					$orderinfo ['customer'] ['firstname'] = $invoice_dest ['firstname'];
					$orderinfo ['customer'] ['lastname'] = $invoice_dest ['lastname'];
					$orderinfo ['customer'] ['vat'] = $invoice_dest ['vat'];
					$orderinfo ['customer'] ['taxpayernumber'] = $invoice_dest ['taxpayernumber'];
					$orderinfo ['customer'] ['email'] = $invoice_dest ['email'];
					
					if (isset ( $invoice_dest ['Addresses'] [0] )) {
						$orderinfo ['customer'] ['address'] = $invoice_dest ['Addresses'] [0] ['address'];
						$orderinfo ['customer'] ['city'] = $invoice_dest ['Addresses'] [0] ['city'];
						$orderinfo ['customer'] ['code'] = $invoice_dest ['Addresses'] [0] ['code'];
						$orderinfo ['customer'] ['country'] = !empty($invoice_dest ['Addresses'] [0] ['Countries'] ['name']) ? $invoice_dest ['Addresses'] [0] ['Countries'] ['name'] : "";
					}
				} else {
					$orderinfo ['customer'] ['customer_id'] = $order [0] ['Customers'] ['customer_id'];
					$orderinfo ['customer'] ['company'] = $order [0] ['Customers'] ['company'];
					$orderinfo ['customer'] ['firstname'] = $order [0] ['Customers'] ['firstname'];
					$orderinfo ['customer'] ['lastname'] = $order [0] ['Customers'] ['lastname'];
					$orderinfo ['customer'] ['vat'] = $order [0] ['Customers'] ['vat'];
					$orderinfo ['customer'] ['taxpayernumber'] = $order [0] ['Customers'] ['taxpayernumber'];
					$orderinfo ['customer'] ['email'] = $order [0] ['Customers'] ['email'];
					
					if (isset ( $order [0] ['Customers'] ['Addresses'] [0] )) {
						$orderinfo ['customer'] ['address'] = $order [0] ['Customers'] ['Addresses'] [0] ['address'];
						$orderinfo ['customer'] ['city'] = $order [0] ['Customers'] ['Addresses'] [0] ['city'];
						$orderinfo ['customer'] ['code'] = $order [0] ['Customers'] ['Addresses'] [0] ['code'];
						$orderinfo ['customer'] ['country'] = $order [0] ['Customers'] ['Addresses'] [0] ['Countries'] ['name'];
					}
				}
				
				$orderinfo['payments'] = array();
				if (count ( $payments ) > 0) {
					if ( $payments > 1 ) {
						$numPayment = 1;
						foreach ( $payments as $payment ) {
							if ( $numPayment++ > 10 ) {
								break;
							}
							$payment['paymentdate']  = Shineisp_Commons_Utilities::formatDateOut ( $payment['paymentdate'] );
							$payment['income']       = $currency->toCurrency($payment['income'], array('currency' => Settings::findbyParam('currency')));
							$orderinfo['payments'][] = $payment;
						}
					}
					$orderinfo ['payment_date'] = Shineisp_Commons_Utilities::formatDateOut ( $payments [0] ['paymentdate'] );
					$orderinfo ['payment_mode'] = $payments [0] ['Banks'] ['name'];
					$orderinfo ['payment_description'] = $payments [0] ['description'];
					$orderinfo ['payment_transaction_id'] = $payments [0] ['reference'];
				}


				
				$orderinfo ['invoice_number'] = $invoice ['number'];
				
				$orderinfo ['company'] ['name'] = $order [0] ['Isp'] ['company'];
				$orderinfo ['company'] ['vat'] = $order [0] ['Isp'] ['vatnumber'];
				$orderinfo ['company'] ['bankname'] = $order [0] ['Isp'] ['bankname'];
				$orderinfo ['company'] ['iban'] = $order [0] ['Isp'] ['iban'];
				$orderinfo ['company'] ['bic'] = $order [0] ['Isp'] ['bic'];
				$orderinfo ['company'] ['address'] = $order [0] ['Isp'] ['address'];
				$orderinfo ['company'] ['zip'] = $order [0] ['Isp'] ['zip'];
				$orderinfo ['company'] ['city'] = $order [0] ['Isp'] ['city'];
				$orderinfo ['company'] ['country'] = $order [0] ['Isp'] ['country'];
				$orderinfo ['company'] ['telephone'] = $order [0] ['Isp'] ['telephone'];
				$orderinfo ['company'] ['fax'] = $order [0] ['Isp'] ['fax'];
				$orderinfo ['company'] ['website'] = $order [0] ['Isp'] ['website'];
				$orderinfo ['company'] ['email'] = $order [0] ['Isp'] ['email'];
				$orderinfo ['company'] ['slogan'] = $order [0] ['Isp'] ['slogan'];
				
				$orderinfo ['subtotal'] = $currency->toCurrency($order[0] ['total'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['grandtotal'] = $currency->toCurrency($order[0] ['grandtotal'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['vat'] = $currency->toCurrency($order[0] ['vat'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['delivery'] = 0;
				
				if($order [0] ['status_id'] == Statuses::id("tobepaid", "orders")){ // To be payed
					$orderinfo ['ribbon']['text'] = $translator->translate("To be Paid");
					$orderinfo ['ribbon']['color'] = "#D60000";
				}elseif($order [0] ['status_id'] == Statuses::id("paid", "orders")){  // Paid
					$orderinfo ['ribbon']['text'] = $translator->translate("Paid");
					$orderinfo ['ribbon']['color'] = "#009926";
				}elseif($order [0] ['status_id'] == Statuses::id("complete", "orders")){  // Complete
					$orderinfo ['ribbon']['text'] = $translator->translate("Complete");
					$orderinfo ['ribbon']['color'] = "#009926";
				}else{
					$orderinfo ['ribbon']['text'] = $translator->translate(Statuses::getLabel($order [0] ['status_id']));
					$orderinfo ['ribbon']['color'] = "#FFCC33";
				}
				
				$database ['records'] = $orderinfo;
				
				foreach ( $order [0] ['OrdersItems'] as $item ) {
					$price = ($item['price']  * $item['quantity']) + $item['setupfee'];
					 
					$tax = Taxes::getTaxbyProductID($item['product_id']);
					if ($tax['percentage'] > 0) {
						$rowtotal = $price * (100 + $tax['percentage']) / 100;
					} else {
						$rowtotal = $price;
					}
					
					$item ['price'] = $currency->toCurrency($item ['price'], array('currency' => Settings::findbyParam('currency')));
					$item ['setupfee'] = $currency->toCurrency($item ['setupfee'], array('currency' => Settings::findbyParam('currency')));
					$rowtotal = $currency->toCurrency($rowtotal, array('currency' => Settings::findbyParam('currency')));
					
					$database ['records']['items'][] = array ($item ['Products']['sku'], $item ['description'], $item ['quantity'], 'nr', $item ['price'], $item ['setupfee'], $tax['percentage'], $rowtotal);
				}

				// Sanitize some fields
				$database ['records'] ['invoice_number']      = ! empty ( $database ['records'] ['invoice_number'] )  ? $database ['records'] ['invoice_number']     : "";
				$database ['records'] ['formatted_number']    = ! empty ( $invoice['formatted_number'] )  ? $invoice['formatted_number'] : $database ['records'] ['invoice_number'];
				$database ['records'] ['payment_description'] = ! empty ( $database ['records'] ['payment_description']) ? $database ['records']['payment_description'] : "";
				$database ['records'] ['payment_mode']        = ! empty ( $database ['records'] ['payment_mode'] )    ? $database ['records'] ['payment_mode']       : "";
				$database ['records'] ['payment_date']        = ! empty ( $database ['records'] ['payment_date'] )    ? $database ['records'] ['payment_date']       : "";
				
				$database ['records']['totalPayments'] = count($database['records']['payments']);

				// QRCode Image
				$code['order']    = $database['records']['order_number'];
				$code['customer'] = $database['records']['customer']['customer_id'];
				$jcode            = base64_encode(json_encode($code));
				
				$database['records']['qrcode_url'] = $_SERVER['HTTP_HOST']."/index/qrcode/q/".$jcode;
				
				$database['records']['skip_barcode'] = 1;
				if ( !empty($database ['records']['invoice_number']) ) {
					$database['records']['barcode']      = $database ['records']['invoice_number'];
					$database['records']['skip_barcode'] = 0;
				}

				if (isset ( $order [0] )) {
					// Create the path structure
					if ( !is_dir(PUBLIC_PATH.$invoicePath) ) {
						mkdir(PUBLIC_PATH.$invoicePath, 0700, true);
					}
					
					// Template name
					$templateName = Settings::findByParam('invoice_template');
					if ( empty($templateName) ) {
						$templateName = Shineisp_Commons_Utilities::getFirstFile(PUBLIC_PATH.'/skins/commons/invoices', '/\.phtml$/');	
					}
										
					$invoiceview = new Shineisp_Invoice();
					$invoiceview->assign('header',  $database['header']);
					$invoiceview->assign('columns', $database['columns']);
					$invoiceview->assign('data',    $database['records']);

					$html = $invoiceview->render($templateName);
					$html2pdf = new HTML2PDF('P','A4','it', true, 'UTF-8', array(4, 4, 4, 1));
	    			$html2pdf->WriteHTML($html);
	    			
	    			$html2pdf->Output(PUBLIC_PATH.$filename, "F");

					// Execute a custom event 
					self::events()->trigger('invoices_pdf_created', "Invoices", array('order' => $order, 'invoice' => $invoice, 'file' => $filename));
					
					return $path . $filename;
				}
			}
			
			return false;
		}

		/**
		 * DownloadAllbyCustomerID
		 * Download all the orders by customer id.
		 * @param unknown_type $customerid
		 */
		public static function DownloadAllbyCustomerID($customerid){
			try{
				$zip = new ZipArchive();
				$filename = "invoices_" . date('YmdHis') . ".zip";
				
				$file = PUBLIC_PATH . "/tmp/$filename";
				
				$invoices = Doctrine_Query::create ()->select('i.invoice_id, i.invoice_date, i.number')
													 ->from ( 'Invoices i' )
													 ->leftJoin('i.Customers c')
													 ->where ( '(i.customer_id = ? OR c.parent_id = ?)', array($customerid, $customerid))
													 ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
				
				if ($zip->open($file, ZIPARCHIVE::CREATE)===TRUE) {
					foreach ($invoices as $invoice){
						self::PrintPDF($invoice['invoice_id'], false);
						$filetoadd = PUBLIC_PATH . "/documents/invoices/" . $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf";
						$zip->addFile($filetoadd, $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf");
					}
					$zip->close();	
				}
				
				return "/tmp/$filename";
						
			}catch(Exception $e){
				return false;
			}
		}
		
		
	######################################### BULK ACTIONS ############################################
		
	/**
	 * 
	 * Upload to dropbox all the invoices selected
	 * @param array $items
	 */
	public function bulk_dropbox_invoices($items){
		try{
			$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
			$invoices = Doctrine_Query::create ()->select('i.invoice_id')
												 ->from ( 'Invoices i' )
												 ->leftJoin('i.Customers c')
												 ->whereIn( 'invoice_id', $items)
												 ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
			
			foreach ($invoices as $invoice){
				self::PrintPDF($invoice['invoice_id'], false, true);
			}
			
			die(json_encode(array('mex' => $translator->translate('Invoices uploaded to the Dropbox folder'))));
					
		}catch(Exception $e){
			return false;
		}
	}
	
	/**
	 * 
	 * Delete all the selected invoices 
	 * @param array $items
	 */
	public function bulk_delete_invoices($items){
		try{
			$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
			$invoices = Doctrine_Query::create ()->select('i.invoice_id')
												 ->from ( 'Invoices i' )
												 ->leftJoin('i.Customers c')
												 ->whereIn( 'invoice_id', $items)
												 ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
			
			foreach ($invoices as $invoice){
				self::DeleteByID($invoice['invoice_id']);
			}
			
			die(json_encode(array('mex' => $translator->translate('Selected invoices have been deleted'))));
					
		}catch(Exception $e){
			return false;
		}
	}
	
	/**
	 * 
	 * Download all the invoices selected
	 * @param array $items
	 */
	public function bulk_print_invoices($items){
		try{
			$zip = new ZipArchive();
			$filename = "invoices_" . date('YmdHis') . ".zip";
			
			if(!is_dir(PUBLIC_PATH . "/tmp/")){
				@mkdir(PUBLIC_PATH . "/tmp/");
			}
			
			$file = PUBLIC_PATH . "/tmp/$filename";
			
			$invoices = Doctrine_Query::create ()->select('i.invoice_id, i.invoice_date, i.number')
												 ->from ( 'Invoices i' )
												 ->leftJoin('i.Customers c')
												 ->whereIn( 'invoice_id', $items)
												 ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
			
			if ($zip->open($file, ZIPARCHIVE::CREATE)===TRUE) {
				foreach ($invoices as $invoice){
					self::PrintPDF($invoice['invoice_id'], false, true);
					$filetoadd = PUBLIC_PATH . "/documents/invoices/" . $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf";
					$zip->addFile($filetoadd, $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf");
				}
				$zip->close();	
			}
			
			die(json_encode(array('url' => "/tmp/" . $filename)));
					
		}catch(Exception $e){
			return false;
		}
	}
	
	/**
	 * export the content in a pdf file
	 * @param array $items
	 */
	public function bulk_pdf_export($items) {
		$isp = Isp::getActiveISP();
		$pdf = new Shineisp_Commons_PdfList();
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		// Get the records from the order table
		$orders = self::get_invoices($items, "invoice_id, number as num, order_id as orderid, DATE_FORMAT(invoice_date, '%d/%m/%Y') as invoicedate, 
		c.company as company, CONCAT(c.firstname, ' ', c.lastname) as fullname, o.total as total, o.vat as vat, o.grandtotal as grandtotal,", 'number, invoice_date');

		// Create the PDF header
		$grid['headers']['title'] = $translator->translate('Invoices List');
		$grid['headers']['subtitle'] = $translator->translate('List of the the invoices');
		$grid['footer']['text'] = $isp['company'] . " - " . $isp['website'];
		 
		if(!empty($orders[0]))

			$total = 0;
			$vat = 0;
			$grandtotal = 0;
			
			// Create the columns of the grid
			$grid ['columns'] [] = array ("value" => $translator->translate('Invoice'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Order'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Date'), 'size' => 100);
			$grid ['columns'] [] = array ("value" => $translator->translate('Company'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Fullname'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Total'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('VAT'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Grand Total'), 'size' => 50);
			
			// Getting the records values and delete the first column the customer_id field.
			foreach ($orders as $item){
				$values = array_values($item);
				array_shift($values);
				$grid ['records'] [] = $values;
				
				$total += is_numeric($values[5]) ? $values[5] : 0; 
				$vat += is_numeric($values[6]) ? $values[6] : 0; 
				$grandtotal += is_numeric($values[7]) ? $values[7] : 0; 
			}
				
			$grid ['records'] [] = array('','','','', $translator->translate('Totals'), $total, $vat, $grandtotal);
			
			// Create the PDF
			die($pdf->create($grid));
		
		return false;	
	}			
	
	/**
	 * export the content in a csv file
	 * @param array $items
	 */
	public function bulk_csv_export($items) {
		$translator = Shineisp_Registry::getInstance ()->Zend_Translate;
		
		// Get the records from the order table
		$orders = self::get_invoices($items, "invoice_id, number as number, order_id as order, DATE_FORMAT(invoice_date, '%d/%m/%Y') as date, 
		c.company as company, CONCAT(c.firstname, ' ', c.lastname) as fullname, o.total as total, o.vat as VAT, o.grandtotal as grandtotal,", 'number, invoice_date');

		if(!empty($orders[0])){

			$tmpname = Shineisp_Commons_Utilities::GenerateRandomString();
			@mkdir ( PUBLIC_PATH . "/tmp/");

			// Create the file and open it
			$fp = fopen(PUBLIC_PATH . "/tmp/" . $tmpname . '.csv', 'w+');

			// Add the headers
			$headers = array_keys($orders[0]);
			if(!empty($headers)){
				array_shift($headers);
				foreach ($headers as $item) {
					$newHeaders[] = $translator->translate(ucfirst($item));
				}
				fputcsv($fp, $newHeaders);
			}
			
			// For each record in the recordset
			foreach ($orders as $item){
				array_shift($item);
				fputcsv($fp, $item);
			}

			// Close the file
			fclose($fp);
			
			// Return the link
			die(json_encode(array('url' => "/tmp/" . $tmpname . ".csv")));
		}
		return false;	
	}			
}