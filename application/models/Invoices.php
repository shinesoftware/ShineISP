<?php

/**
 * Invoices
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Invoices extends BaseInvoices {

	/**
	 * grid
	 * create the configuration of the grid
	 */	
	public static function grid($rowNum = 10) {
		
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => null, 'field' => 'i.invoice_id', 'alias' => 'invoice_id', 'type' => 'selectall' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'ID' ), 'field' => 'i.invoice_id', 'alias' => 'invoice_id', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Invoice Number' ), 'field' => 'i.number', 'alias' => 'number', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Order Number' ), 'field' => 'i.order_id', 'alias' => 'order', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Date' ), 'field' => 'i.invoice_date', 'alias' => 'invoice_date', 'sortable' => true, 'searchable' => true, 'type' => 'date' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Cost' ), 'field' => 'o.cost', 'alias' => 'cost', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Total' ), 'field' => 'o.total', 'alias' => 'total', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'VAT' ), 'field' => 'o.vat', 'alias' => 'vat', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Grandtotal' ), 'field' => 'o.grandtotal', 'alias' => 'grandtotal', 'sortable' => true, 'searchable' => true, 'type' => 'string', 'actions'=>array('Invoices'=>'Total') );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Customer' ), 'field' => "CONCAT(c.firstname,' ', c.lastname)", 'alias' => 'fullname', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Company' ), 'field' => "c.company", 'alias' => 'company', 'sortable' => true, 'searchable' => true, 'type' => 'string' );
		#$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Invoice dest.' ), 'field' => "CONCAT(r.firstname,' ', r.lastname)", 'alias' => 'invoice_dest', 'sortable' => true, 'type' => 'string', 'searchable' => true);
		$config ['datagrid'] ['fields'] =  "invoice_id, 
											DATE_FORMAT(i.invoice_date, '%d/%m/%Y') as invoice_date, 
											i.number as number, 
											i.order_id as order, 
											o.cost as cost, 
											o.total as total, 
											o.vat as vat, 
											o.grandtotal as grandtotal, 
											c.company as company,
											r.company as reseller,
											CONCAT(c.firstname,' ', c.lastname ) as fullname, 
											CONCAT(r.firstname,' ', r.lastname ) ) as invoice_dest";
		
		$config ['datagrid'] ['dqrecordset'] = Doctrine_Query::create ()
							                            ->select ( $config ['datagrid'] ['fields'] )
							                            ->from ( 'Invoices i' )
							                            ->leftJoin ( 'i.Customers c' )
							                            ->leftJoin ( 'c.Customers r' )
							                            ->leftJoin ( 'i.Orders o' )
							                            ->orderBy ( 'invoice_date desc' );		
		
		$config ['datagrid'] ['rownum'] = $rowNum;
		
		$config ['datagrid'] ['basepath'] = "/admin/invoices/";
		$config ['datagrid'] ['index'] = "invoice_id";
		$config ['datagrid'] ['rowlist'] = array ('10', '50', '100', '1000' );
		
		$config ['datagrid'] ['buttons'] ['edit'] ['label'] = $translator->translate ( 'Edit' );
		$config ['datagrid'] ['buttons'] ['edit'] ['cssicon'] = "edit";
		$config ['datagrid'] ['buttons'] ['edit'] ['action'] = "/admin/invoices/edit/id/%d";
		
		$config ['datagrid'] ['buttons'] ['delete'] ['label'] = $translator->translate ( 'Delete' );
		$config ['datagrid'] ['buttons'] ['delete'] ['cssicon'] = "delete";
		$config ['datagrid'] ['buttons'] ['delete'] ['action'] = "/admin/invoices/delete/id/%d";
		
		$config ['datagrid'] ['massactions']['common'] = array ('bulk_pdf_export'=>'Pdf List', 'bulk_csv_export' => 'Csv Export', 'bulk_print_invoices' => 'Download Invoices');
		
		if(Shineisp_Api_Dropbox_Uploader::isReady()){
			$config ['datagrid'] ['massactions']['common'] = array_merge($config ['datagrid'] ['massactions']['common'], array('bulk_dropbox_invoices' => 'Upload Invoices into Dropbox Account' ));
		}
		
		return $config;
	}	

	/**
	 * statsgrid
	 * create a new datagrid
	 */	
	public static function getSummaryGrid($helper, $year) {
		
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Month nr.' ), 'field' => 'MONTH(o.order_date)', 'alias' => 'month', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Month' ), 'field' => 'date_format(o.order_date, "%M")', 'alias' => 'monthname', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Year' ), 'field' => 'YEAR(o.order_date)', 'alias' => 'yearnum', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Total' ), 'field' => 'SUM(o.total)', 'alias' => 'total', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'VAT' ), 'field' => 'SUM(o.vat)', 'alias' => 'vat', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['columns'] [] = array ('label' => $translator->translate ( 'Grand Total' ), 'field' => 'SUM(o.grandtotal)', 'alias' => 'grandtotal', 'sortable' => false, 'searchable' => false, 'type' => 'string' );
		$config ['datagrid'] ['hassubrecords'] = true;
		
		$config ['datagrid'] ['fields'] =  "MONTH(o.order_date) as month,
	                            			date_format(o.order_date,'%M') as monthname, 
	                            			YEAR(o.order_date) as yearnum, 
	                            			SUM(o.total) as total,
	                            			SUM(o.vat) as vat,
	                            			SUM(o.grandtotal) as grandtotal";
		
		$config ['datagrid'] ['recordset'] = self::getSummary($year);
		$config ['datagrid'] ['rownum'] = 12;
		$config ['datagrid'] ['id'] = "incoming";
		$config ['datagrid'] ['placeholder'] = "incoming";
		$config ['datagrid'] ['title'] = $translator->translate('Incoming data report');
		
		$config ['datagrid'] ['basepath'] = "/admin/reports/show/type/profitofyear/";
		$helper->datagrid->setModule ( "invoices" )->setModel ( new Invoices );
		$helper->datagrid->setConfig ( $config )->datagrid ();
	}	
	
	/**
	 * get the list of the years where the ISP has invoiced the services
	 * 
	 * @return ArrayObject
	 */
	public static function getYears() {
		$result = array();
		
		$records = Doctrine_Query::create ()
                            ->select ( "YEAR(o.order_date)" )
                            ->from ( 'Orders o' )
                            ->where('o.invoice_id is not null')
                            ->andWhere('o.status_id = ?', Statuses::id("complete", "orders"))
                            ->groupBy('YEAR(o.order_date)')
                            ->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        
        foreach ($records as $record){
        	$result[] = $record['YEAR'];	
        }
        
        return $result;
	}
	
	/**
	 * get the incoming summary for the selected year
	 *
	 * @param integer $year
	 */
	public static function getSummary($year, $payments=TRUE) {
	
		if(!is_numeric($year)){
			return array();
		}
	
		$records = Doctrine_Query::create ()
		->select ( "o.order_id,
				MONTH(i.invoice_date) as month,
				date_format(i.invoice_date,'%M') as monthname,
				YEAR(i.invoice_date) as yearnum,
				SUM(o.total) as total,
				SUM(o.vat) as vat,
				SUM(o.grandtotal) as grandtotal" )
				->from ( 'Orders o' )
				->leftJoin ( 'o.Invoices i' )
				->where('YEAR(i.invoice_date) = ?', $year)
				->andWhere('o.invoice_id <> ?', '')
				->andWhere('o.status_id = ?', Statuses::id("complete", "orders"))
				->groupBy('YEAR(i.invoice_date)')
				->addGroupBy('MONTH(i.invoice_date)')
				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		if($payments){
			for ($i=0;$i<count($records);$i++) {
				$records[$i]['subrecords'] = Payments::getAllPaymentsbyMonthYear($records[$i]['month'], $year);
			}
		}
		 
		return $records;
	}
	
	
	/**
	 * get the incoming summary for the selected range of dates
	 *
	 * @param date $from
	 * @param date $to
	 */
	public static function getWeekSummarybyDateRange($from, $to) {
	
		if(empty($from) || empty($to)){
			return array();
		}
	
		$records = Doctrine_Query::create ()
		->select ( "o.order_id,
				MONTH(i.invoice_date) as month,
				WEEK(i.invoice_date) as weekname,
				date_format(i.invoice_date,'%M') as monthname,
				YEAR(i.invoice_date) as yearnum,
				SUM(o.total) as total,
				SUM(o.vat) as vat,
				SUM(o.grandtotal) as grandtotal" )
				->from ( 'Orders o' )
				->leftJoin ( 'o.Invoices i' )
				->where('i.invoice_date BETWEEN ? AND ?', array($from, $to))
				->andWhere('o.invoice_id <> ?', '')
				->andWhere('o.status_id = ?', Statuses::id("complete", "orders"))
				->groupBy('YEARWEEK(i.invoice_date)')
				->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		 
		return $records;
	}	
	
	
	/**
	 * Create the google charts  
	 * 
	 * @param array $years
	 * @return string
	 */
	public static function graph(array $years) {
		$currency = new Zend_Currency();
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		$isp = Isp::getActiveISP();
		$grosstotal = 0;
		$total = 0;
		
		// Get the summary of the incoming and of the expenses of the year
		foreach ($years as $year) {
			$data[$year]['incoming'] = self::getSummary ( $year, false );
			$data[$year]['expenses'] = PurchaseInvoices::getSummary($year, false);
		}
		
		$dataset['axis']['x'] = $translator->_( 'Months' );
		$dataset['axis']['y'] = $translator->_( 'Euro' );
		
		$dataset['labels'][] = array('type' =>'string', 'title' => $translator->translate('Months'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Grand Total'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Revenues (Taxable incomes)'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Net Revenues (Taxable incomes - Costs)'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Cost'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Vat'));
		
		foreach ( $data as $year => $records ) {
			for ($i=0; $i<count($records['incoming']); $i++) {
				$income = $records['incoming'][$i];
				$expense = !empty($records['expenses'][$i]) ? $records['expenses'][$i] : 0;
				
				$totals['grandtotal'] = $income['grandtotal'];
				$totals['total'] = $income['total'];
				$totals['totalnet'] = $income['total'] - $expense['total'];
				$totals['cost'] = $expense['total'];
				$totals['vat'] = $expense['vat'] - $income['vat'];
				$total += $totals['totalnet']; 
				$grosstotal += $income['total']; 
				$dataset['records'][$income['monthname']][] = $totals;
			}
		}
		
		$dataset['title'] = $translator->_( '%s Performances in %s - %s net - %s gross', $isp['company'], $year, $currency->toCurrency($total, array('currency' => Settings::findbyParam('currency'))), $currency->toCurrency($grosstotal, array('currency' => Settings::findbyParam('currency'))) );
		return $dataset;
	}	
	
	/**
	 * Create the google week chart 
	 * 
	 * @param array $years
	 * @return string
	 */
	public static function graph_week($from, $to) {
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		$isp = Isp::getActiveISP();
		$total = 0;
		
		// Get the summary of the incoming and of the expenses of the year
		$data['incoming'] = self::getWeekSummarybyDateRange($from, $to);
		$data['expenses'] = PurchaseInvoices::getWeekSummarybyDateRange($from, $to);
		
		$dataset['axis']['x'] = $translator->_( 'Week Number - Month' );
		$dataset['axis']['y'] = $translator->_( 'Euro' );
		
		$dataset['labels'][] = array('type' =>'string', 'title' => $translator->translate('Week'));
		$dataset['labels'][] = array('type' =>'number', 'title' => $translator->translate('Net Revenues (Taxable incomes - Costs)'));
		
		for ($i=0; $i<count($data['incoming']); $i++) {
			$income = $data['incoming'][$i];
			$expense = !empty($data['expenses'][$i]) ? $data['expenses'][$i] : 0;
			$totals['totalnet'] = $income['total'] - $expense['total'];
			$dataset['records'][$income['weekname'] . "/". $income['monthname'] ][] = $totals;
		}
		
		$dataset['title'] = $translator->_( '%s Week Performances', $isp['company'] );
		
		return $dataset;
	}	
	
    /**
     * Set a record with a status
     * 
     * @param $id, $status
     * @return Void
     */
    public static function setInvoice($id, $invoiceID) {
        $object = Doctrine::getTable ( 'Orders' )->find ( $id );
        $object->invoice_id = $invoiceID;
        return $object->save ();
    }
    
    /**
     * find
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function find($id) {
        return Doctrine::getTable ( 'Invoices' )->findOneBy ( 'invoice_id', $id );
    }
    
    /**
     * find
     * Get a record by invoice number
     * @param $number
     * @return Doctrine Record
     */
    public static function findbyNumber($number, $year) {
        return Doctrine::getTable ( 'Invoices' )
        ->findOneBy ( 'number', $number );
    }
    
	/**
	 * Get a invoices by id 
	 * @param array $ids [1,2,3,4,...,n]
	 * @param string $fields
	 * @return Array
	 */
	public static function get_invoices($ids, $fields="*", $orderby=null) {
		return Doctrine_Query::create ()->select($fields)
										->from ( 'Invoices i' )
										->leftJoin ( 'i.Customers c' )
										->leftJoin ( 'i.Orders o' )
										->whereIn( "i.invoice_id", $ids)
										->orderBy(!empty($orderby) ? $orderby : "")
										->execute ( array (), Doctrine::HYDRATE_ARRAY );
	}    
    
    /**
     * getAll
     * Get all the records
     * @return Doctrine Record
     */
    public static function getAll() {
        return Doctrine::getTable ( 'Invoices' )->findAll(Doctrine_Core::HYDRATE_ARRAY);
    }
    
	/**
	 * getByCustomerID
	 * Get all data  
	 * @param $customerID
	 * @return Array
	 */
	public static function getByCustomerID($customerID, $fields = '*') {
		$records = Doctrine_Query::create ()->select ( $fields )
							->from ( 'Invoices i' )
							->leftJoin ( 'i.Customers c' )
							->leftJoin ( 'i.Orders o' )
							->where ( "i.customer_id = ?", $customerID )
							->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
		
		return $records;
	}
    
    /**
     * Delete
     * Delete an order using its ID and the customer id.
     * @param $id, $customerid
     * @return boolean
     */
    public static function DeleteByID($id, $customerid) {
        $dq = Doctrine_Query::create ()->delete ()->from ( 'Invoices i' )->where ( 'invoice_id = ?', $id )->andWhere ( "customer_id = ?", $customerid );
        
        return $dq->execute ();
    }
    
    /**
     * findByCustomerID
     * Get a record by CustomerID
     * @param $id
     * @return Doctrine Record
     */
    public static function findByCustomerID($id) {
        return Doctrine::getTable ( 'Invoices' )->findBy ( 'customer_id', $id);
    }  
    
    /**
     * findByOrderID
     * Get a record by OrderID
     * @param $id
     * @return Doctrine Record
     */
    public static function findByOrderID($id) {
        return Doctrine::getTable ( 'Invoices' )->findBy ( 'order_id', $id );
    }  
    
    
    /**
     * getOrderbyInvoiceId
     * Get a record by InvoiceID
     * @param $invoiceid
     * @return Doctrine Record
     */
    public static function getOrderbyInvoiceId($invoiceid) {
        return Doctrine::getTable ( 'Invoices' )->findBy('invoice_id', $invoiceid, Doctrine::HYDRATE_ARRAY );
    }      
    
    /**
     * getAllInfo
     * Get all data starting from the orderID 
     * @param $id
     * @return Doctrine Record / Array
     */
    public static function getAllInfo($id, $fields = "*", $retarray = false, $where = false) {
        try {
            $dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Invoices i' )
            ->where ( "invoice_id = ?", $id )->limit ( 1 );
            
            if($where){
                $dq->andWhere($where);
            }
            
            $retarray = $retarray ? Doctrine_Core::HYDRATE_ARRAY : null;
            $items = $dq->execute ( array (), $retarray );
            
            return $items;
        } catch ( Exception $e ) {
            die ( $e->getMessage () );
        }
    }   
    
    /*
     * getList
     * Get all the invoices for a select object
     */
    public static function getList($empty=false) {
        $items = array ();
        $arrTypes = Doctrine::getTable ( 'Invoices' )->findAll ();
        if($empty){
            $items[] = "";
        }
        foreach ( $arrTypes->getData () as $c ) {
            $items [$c ['invoice_id']] = $z = sprintf("%03d", $c ['number']) . " - " . Shineisp_Commons_Utilities::formatDateOut($c ['invoice_date']);
        }
        return $items;
    }

    
    /**
     * Create
     * Create an invoice starting from an order id
     * @param $orderid
     * @return Doctrine Record
     */
    public static function Create($orderid) {
        
    	$invoice = new Invoices();
        $InvoicesSettings = new InvoicesSettings();
        
        if(is_numeric($orderid)){
	        $invoice_number = InvoicesSettings::getLastInvoice ( );
	        $customer = Orders::getAllInfo($orderid, "customer_id", true );
	        
	        // Check if there is an invoice ID set for this order.
	        $rs_invoice = Invoices::findByOrderID($orderid)->toArray();
	        if(isset($rs_invoice[0]['number']) && is_numeric($rs_invoice[0]['number'])){
	            // Set the invoice number to the order
	            Orders::setInvoice ( $orderid, $rs_invoice[0]['invoice_id']);
	            return $rs_invoice[0]['number'];
	        }
	        
	        try {
	            if(is_numeric($customer[0]['customer_id'])){
	                $invoice->number = $invoice_number;
	                $invoice->order_id = $orderid;
	                $invoice->customer_id = $customer[0]['customer_id'];
	                $invoice->invoice_date = date('Y-m-d');
	                $invoice->save();
	                
	                $id = $invoice->getIncremented();
	                InvoicesSettings::setLastInvoice($invoice_number);
	                Orders::setInvoice ($orderid, $id);

	                // Create the pdf invoice document
	                self::PrintPDF($invoice->invoice_id, false, true);
	                
	                // Send the invoice in to the Dropbox service
	                Invoices::DropboxIt( $invoice->invoice_id );
	                
	                return $id;
	            }
	        }catch (Exception $e){
	            return $e->getMessage();
	        }
        }
    }
    
    /*
     * sendInvoice
     * send the invoice by email
     */
    public static function sendInvoice($invoiceid){
        if (is_numeric ( $invoiceid )) {
        	$invoice = self::getAllInfo($invoiceid, null, true);
            if (!empty($invoice[0])) {
            	$invoiceNum = $invoice[0]['number'];
                $orderid = $invoice [0] ['order_id'];
                $customerid = $invoice [0] ['customer_id'];
            } else {
                return false;
            }
            
            // Check if the fastlink is already created
            $link_exist = Fastlinks::findlinks ( $orderid, $customerid, 'orders' );
            
            // The fastlink does not exists and we have to create it
            if (count ( $link_exist ) == 0) {
                $fastlink = Fastlinks::CreateFastlink ( "orders", "createinvoice", json_encode ( array ('id' => $invoiceid ) ), "orders", $orderid, $customerid );
            } else {
                // The fastlink exists and we get it in order to write it in the email content
                // but before we have to check if the link that we have to send to the user contain the right invoice
                
                // If the id of the invoice is not equal to the id of the invoice attached into the order we have to create a new fastlink 
                $params = json_decode ( $link_exist [0] ['params'], true );
                if (! empty ( $params ['id'] ) && $params ['id'] == $invoiceid) {
                    $fastlink = $link_exist [0] ['code'];
                } else {
                    $fastlink = Fastlinks::CreateFastlink ( "orders", "createinvoice", json_encode ( array ('id' => $invoiceid ) ), "orders", $orderid, $customerid );
                }
            }
            
            $order = Orders::getAllInfo ( $orderid, null, true );
            
            //if customer comes from reseller
            if ($order [0] ['Customers'] ['parent_id']) {
                $invoice_dest = Customers::getAllInfo ( $order [0] ['Customers'] ['parent_id'] );
                $customer = $invoice_dest ['firstname'] . " " . $invoice_dest ['lastname'];
                $customer .= ! empty ( $invoice_dest ['company'] ) ? " - " . $invoice_dest ['company'] : "";
                $customer_email = $invoice_dest ['email'];
            } else {
                $customer = $order [0] ['Customers'] ['firstname'] . " " . $order [0] ['Customers'] ['lastname'];
                $customer .= ! empty ( $order [0] ['Customers'] ['company'] ) ? " - " . $order [0] ['Customers'] ['company'] : "";
                $customer_email = $order [0] ['Customers'] ['email'];
            }
            
            $email = $order [0] ['Isp'] ['email'];
            $signature = $order [0] ['Isp'] ['company'];
            $url = "http://" . $_SERVER ['HTTP_HOST'] . "/index/link/id/" . $fastlink;
            $date = explode ( "-", $order [0] ['order_date'] );
            
            // Get the template from the main email template folder
            $retval = Shineisp_Commons_Utilities::getEmailTemplate ( 'new_invoice' );
            if ($retval) {
                $subject = $retval ['subject'];
                $subject = str_replace ( "[invoiceid]", sprintf ( "%03s", $invoiceNum ) . "/" . $date [0], $subject );
                $Template = $retval ['template'];
                $Template = str_replace ( "[fullname]", $customer, $Template );
                $Template = str_replace ( "[email]", $email, $Template );
                $Template = str_replace ( "[url]", $url, $Template );
                $Template = str_replace ( "[orderid]", sprintf ( "%03s", $orderid ) . "/" . $date [0], $Template );
                $Template = str_replace ( "[invoiceid]", sprintf ( "%03s", $invoiceNum ) . "/" . $date [0], $Template );
                $Template = str_replace ( "[signature]", $signature, $Template );
                Shineisp_Commons_Utilities::SendEmail ( $email, $customer_email, $email, $subject, $Template );
            }
            return true;
        }
        
        return false;
    }
    
    /**
     * Money format value function
     * @param float $values
     * @return Ambigous <number, string, mixed>
     */
   	public static function Total($values) {
   		$currency = new Zend_Currency();
   		
   		$value = 0;
   		if(count($values)>0){
   			$value = $currency->toCurrency(array_sum($values), array('currency' => Settings::findbyParam('currency')));
   		}
   		
    	return $value;
    }
    
	
	/**
	 * isOwner
	 * Check if the customer is the owner of the selected invoice 
	 * @param $invoice_id
	 * @param $customer_id
	 * @return Array
	 */
	public static function isOwner($invoice_id, $customer_id) {
		try {
			$dq = Doctrine_Query::create ()->select ( 'Count(*) as total' )
			->from ( 'Invoices i' )
			->leftJoin('i.Customers c' )
			->where ( "i.invoice_id = ?", $invoice_id )
			->andWhere ("(i.customer_id = ? OR c.parent_id = ?)", array($customer_id, $customer_id) );

			$record = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
			if (! empty ( $record [0] ['total'] ) && $record [0] ['total'] > 0) {
				return true;
			} else {
				return false;
			}
			
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
	}    
    
	public static function Export() {
		try {
			$invoices = self::getAll();
			foreach ($invoices as $invoice){
				echo $invoice['invoice_id'] . "<br/>";
				self::PrintPDF($invoice['invoice_id'], false);
			}
		} catch ( Exception $e ) {
			die ( $e->getMessage () );
		}
		die ();
	}
	
	
    /**
     * print the invoice
     * @param unknown_type $invoiceid
     */
    public static function PrintPDF($invoice_id, $show = true, $force=false, $path="/documents/invoices/") {
    		$currency = new Zend_Currency();
    	
    		if(!is_numeric($invoice_id)){
    			return false;
    		}
			
			$invoice = Invoices::find ( $invoice_id );
			//* GUEST - ALE - 20130225: invoice not found?
			if ( !$invoice ) {
				die();
				return false;
			}
			
    		
    		$pdf = new Shineisp_Commons_PdfOrder ( );
    		$translator = Zend_Registry::getInstance ()->Zend_Translate;
			$invoice = $invoice->toArray ();
			$payments = Payments::findbyorderid ( $invoice ['order_id'], null, true );
			$order = Orders::getAllInfo ( $invoice ['order_id'], null, true );
			
			// Set the name of the file
			$filename = $invoice ['invoice_date'] . " - " . $invoice ['number'] . ".pdf";
			
			$database ['header'] ['label'] = $translator->translate('Invoice No.') . " " . sprintf("%03d", $invoice['number']) . " - " . Shineisp_Commons_Utilities::formatDateOut ($invoice['invoice_date']);
			$database ['columns'] [] = array ("value" => "SKU", "size" => 30 );
			$database ['columns'] [] = array ("value" => "Description" );
			$database ['columns'] [] = array ("value" => "Qty", "size" => 30, "align" => "center" );
			$database ['columns'] [] = array ("value" => "Unit", "size" => 30 );
			$database ['columns'] [] = array ("value" => "Tax Free Price", "size" => 60, "align" => "right" );
			$database ['columns'] [] = array ("value" => "Setup fee", "size" => 70, "align" => "right" );
			$database ['columns'] [] = array ("value" => "Tax %", "size" => 40, "align" => "center" );
			$database ['columns'] [] = array ("value" => "Total", "size" => 50, "align" => "right" );
			
			if (isset ( $order [0] )) {
				$orderinfo ['order_number'] = $order [0] ['order_id'];
				$orderinfo ['invoice_id'] = $invoice ['number'];
				$orderinfo ['date'] = Shineisp_Commons_Utilities::formatDateOut ( $invoice ['invoice_date'] );
				
				//if customer comes from reseller
				if ($order [0] ['Customers'] ['parent_id']) {
					$invoice_dest = Customers::getAllInfo ( $order [0] ['Customers'] ['parent_id'], 'c.*, a.*' );
					$orderinfo ['customer'] ['customer_id'] = $invoice_dest ['customer_id'];
					$orderinfo ['customer'] ['company'] = $invoice_dest ['company'];
					$orderinfo ['customer'] ['firstname'] = $invoice_dest ['firstname'];
					$orderinfo ['customer'] ['lastname'] = $invoice_dest ['lastname'];
					$orderinfo ['customer'] ['vat'] = $invoice_dest ['vat'];
					$orderinfo ['customer'] ['taxpayernumber'] = $invoice_dest ['taxpayernumber'];
					$orderinfo ['customer'] ['email'] = $invoice_dest ['email'];
					
					if (isset ( $invoice_dest ['Addresses'] [0] )) {
						$orderinfo ['customer'] ['address'] = $invoice_dest ['Addresses'] [0] ['address'];
						$orderinfo ['customer'] ['city'] = $invoice_dest ['Addresses'] [0] ['city'];
						$orderinfo ['customer'] ['code'] = $invoice_dest ['Addresses'] [0] ['code'];
						$orderinfo ['customer'] ['country'] = !empty($invoice_dest ['Addresses'] [0] ['Countries'] ['name']) ? $invoice_dest ['Addresses'] [0] ['Countries'] ['name'] : "";
					}
				} else {
					$orderinfo ['customer'] ['customer_id'] = $order [0] ['Customers'] ['customer_id'];
					$orderinfo ['customer'] ['company'] = $order [0] ['Customers'] ['company'];
					$orderinfo ['customer'] ['firstname'] = $order [0] ['Customers'] ['firstname'];
					$orderinfo ['customer'] ['lastname'] = $order [0] ['Customers'] ['lastname'];
					$orderinfo ['customer'] ['vat'] = $order [0] ['Customers'] ['vat'];
					$orderinfo ['customer'] ['taxpayernumber'] = $order [0] ['Customers'] ['taxpayernumber'];
					$orderinfo ['customer'] ['email'] = $order [0] ['Customers'] ['email'];
					
					if (isset ( $order [0] ['Customers'] ['Addresses'] [0] )) {
						$orderinfo ['customer'] ['address'] = $order [0] ['Customers'] ['Addresses'] [0] ['address'];
						$orderinfo ['customer'] ['city'] = $order [0] ['Customers'] ['Addresses'] [0] ['city'];
						$orderinfo ['customer'] ['code'] = $order [0] ['Customers'] ['Addresses'] [0] ['code'];
						$orderinfo ['customer'] ['country'] = $order [0] ['Customers'] ['Addresses'] [0] ['Countries'] ['name'];
					}
				}
				
				if (count ( $payments ) > 0) {
					$orderinfo['payments'] = array();
					if ( $payments > 1 ) {
						foreach ( $payments as $payment ) {
							$payment['paymentdate']  = Shineisp_Commons_Utilities::formatDateOut ( $payment['paymentdate'] );
							$orderinfo['payments'][] = $payment;	
						}
					}
					$orderinfo ['payment_date'] = Shineisp_Commons_Utilities::formatDateOut ( $payments [0] ['paymentdate'] );
					$orderinfo ['payment_mode'] = $payments [0] ['Banks'] ['name'];
					$orderinfo ['payment_description'] = $payments [0] ['description'];
					$orderinfo ['payment_transaction_id'] = $payments [0] ['reference'];
				}
				
				$orderinfo ['invoice_number'] = $invoice ['number'];
				
				$orderinfo ['company'] ['name'] = $order [0] ['Isp'] ['company'];
				$orderinfo ['company'] ['vat'] = $order [0] ['Isp'] ['vatnumber'];
				$orderinfo ['company'] ['bankname'] = $order [0] ['Isp'] ['bankname'];
				$orderinfo ['company'] ['iban'] = $order [0] ['Isp'] ['iban'];
				$orderinfo ['company'] ['bic'] = $order [0] ['Isp'] ['bic'];
				$orderinfo ['company'] ['address'] = $order [0] ['Isp'] ['address'];
				$orderinfo ['company'] ['zip'] = $order [0] ['Isp'] ['zip'];
				$orderinfo ['company'] ['city'] = $order [0] ['Isp'] ['city'];
				$orderinfo ['company'] ['country'] = $order [0] ['Isp'] ['country'];
				$orderinfo ['company'] ['telephone'] = $order [0] ['Isp'] ['telephone'];
				$orderinfo ['company'] ['fax'] = $order [0] ['Isp'] ['fax'];
				$orderinfo ['company'] ['website'] = $order [0] ['Isp'] ['website'];
				$orderinfo ['company'] ['email'] = $order [0] ['Isp'] ['email'];
				$orderinfo ['company'] ['slogan'] = $order [0] ['Isp'] ['slogan'];
				
				$orderinfo ['subtotal'] = $currency->toCurrency($order[0] ['total'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['grandtotal'] = $currency->toCurrency($order[0] ['grandtotal'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['vat'] = $currency->toCurrency($order[0] ['vat'], array('currency' => Settings::findbyParam('currency')));
				$orderinfo ['delivery'] = 0;
				
				if($order [0] ['status_id'] == Statuses::id("tobepaid", "orders")){ // To be payed
					$orderinfo ['ribbon']['text'] = $translator->translate("To be Payed");
					$orderinfo ['ribbon']['color'] = "#D60000";
					$orderinfo ['ribbon']['border-color'] = "#BD0000";
				}elseif($order [0] ['status_id'] == Statuses::id("complete", "orders")){  // Complete
					$orderinfo ['ribbon']['text'] = $translator->translate("Payed");
					$orderinfo ['ribbon']['color'] = "#009926";
					$orderinfo ['ribbon']['border-color'] = "#00661A";
				}else{
					$orderinfo ['ribbon']['text'] = $translator->translate(Statuses::getLabel($order [0] ['status_id']));
					$orderinfo ['ribbon']['color'] = "#FFCC33";
					$orderinfo ['ribbon']['border-color'] = "#E6AC00";
				}
				
				$database ['records'] = $orderinfo;
				
				foreach ( $order [0] ['OrdersItems'] as $item ) {
					$price = ($item['price']  * $item['quantity']) + $item['setupfee'];
					 
					$tax = Taxes::getTaxbyProductID($item['product_id']);
					if ($tax['percentage'] > 0) {
						$rowtotal = $price * (100 + $tax['percentage']) / 100;
					} else {
						$rowtotal = $price;
					}
					
					$item ['price'] = $currency->toCurrency($item ['price'], array('currency' => Settings::findbyParam('currency')));
					$item ['setupfee'] = $currency->toCurrency($item ['setupfee'], array('currency' => Settings::findbyParam('currency')));
					$rowtotal = $currency->toCurrency($rowtotal, array('currency' => Settings::findbyParam('currency')));
					
					$database ['records'] [] = array ($item ['Products']['sku'], $item ['description'], $item ['quantity'], 'nr', $item ['price'], $item ['setupfee'], $tax['percentage'], $rowtotal);
				}
				
				if (isset ( $order [0] )) {
					$pdf->CreatePDF (  $database, $filename, $show, $path, $force);
					return $path . $filename;
				}
			}
			
			return false;
		}

		/**
		 * DownloadAllbyCustomerID
		 * Download all the orders by customer id.
		 * @param unknown_type $customerid
		 */
		public static function DownloadAllbyCustomerID($customerid){
			try{
				$zip = new ZipArchive();
				$filename = "invoices_" . date('YmdHis') . ".zip";
				
				$file = PUBLIC_PATH . "/tmp/$filename";
				
				$invoices = Doctrine_Query::create ()->select('i.invoice_id, i.invoice_date, i.number')
													 ->from ( 'Invoices i' )
													 ->leftJoin('i.Customers c')
													 ->where ( '(i.customer_id = ? OR c.parent_id = ?)', array($customerid, $customerid))
													 ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
				
				if ($zip->open($file, ZIPARCHIVE::CREATE)===TRUE) {
					foreach ($invoices as $invoice){
						self::PrintPDF($invoice['invoice_id'], false);
						$filetoadd = PUBLIC_PATH . "/documents/invoices/" . $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf";
						$zip->addFile($filetoadd, $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf");
					}
					$zip->close();	
				}
				
				return "/tmp/$filename";
						
			}catch(Exception $e){
				return false;
			}
		}
		
		/**
		 * Upload to dropbox the Invoice file
		 * @param integer $InvoiceID
		 * @return boolean or exception
		 */
		public static function DropboxIt($InvoiceID){
			if(is_numeric($InvoiceID)){
				if(Shineisp_Api_Dropbox_Uploader::isReady()){

					// Get the invoice information
					$invoice = self::getAllInfo($InvoiceID, "invoice_date, number", true);
					if($invoice[0]['invoice_date']){
						$file = $invoice[0] ['invoice_date'] . " - " . $invoice[0] ['number'] . ".pdf";
						if(file_exists(PUBLIC_PATH . "/documents/invoices/$file")){
							$yearoftheinvoice = date('Y',strtotime($invoice[0]['invoice_date']));
							$month_testual_invoice = date('M',strtotime($invoice[0]['invoice_date']));
							$month_number_invoice = date('m',strtotime($invoice[0]['invoice_date']));
							$quarter_number_invoice =Shineisp_Commons_Utilities::getQuarterByMonth(date('m',strtotime($invoice[0]['invoice_date'])));
							
							$destinationPath = Settings::findbyParam('dropbox_invoicesdestinationpath');
							$destinationPath = str_replace("{year}", $yearoftheinvoice, $destinationPath);
							$destinationPath = str_replace("{month}", $month_number_invoice, $destinationPath);
							$destinationPath = str_replace("{monthname}", $month_testual_invoice, $destinationPath);
							$destinationPath = str_replace("{quarter}", $quarter_number_invoice, $destinationPath);
							
							$dropbox = new Shineisp_Api_Dropbox_Uploader(Settings::findbyParam('dropbox_email'), Settings::findbyParam('dropbox_password'));
							$dropbox->upload(PUBLIC_PATH . "/documents/invoices/$file", $destinationPath);
							return true;
						}
					}
				}
			}
			return false;
		}
		
	######################################### BULK ACTIONS ############################################
		
	/**
	 * 
	 * Upload to dropbox all the invoices selected
	 * @param array $items
	 */
	public function bulk_dropbox_invoices($items){
		try{
			$translator = Zend_Registry::getInstance ()->Zend_Translate;
			$invoices = Doctrine_Query::create ()->select('i.invoice_id, i.invoice_date, i.number')
												 ->from ( 'Invoices i' )
												 ->leftJoin('i.Customers c')
												 ->whereIn( 'invoice_id', $items)
												 ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
			
			foreach ($invoices as $invoice){
				self::PrintPDF($invoice['invoice_id'], false, true);
				
				// Send the invoice in to the Dropbox service
				Invoices::DropboxIt( $invoice['invoice_id'] );
			}
			
			die(json_encode(array('mex' => $translator->translate('Invoices uploaded to the Dropbox folder'))));
					
		}catch(Exception $e){
			return false;
		}
	}
	
	/**
	 * 
	 * Download all the invoices selected
	 * @param array $items
	 */
	public function bulk_print_invoices($items){
		try{
			$zip = new ZipArchive();
			$filename = "invoices_" . date('YmdHis') . ".zip";
			
			if(!is_dir(PUBLIC_PATH . "/tmp/")){
				@mkdir(PUBLIC_PATH . "/tmp/");
			}
			
			$file = PUBLIC_PATH . "/tmp/$filename";
			
			$invoices = Doctrine_Query::create ()->select('i.invoice_id, i.invoice_date, i.number')
												 ->from ( 'Invoices i' )
												 ->leftJoin('i.Customers c')
												 ->whereIn( 'invoice_id', $items)
												 ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
			
			if ($zip->open($file, ZIPARCHIVE::CREATE)===TRUE) {
				foreach ($invoices as $invoice){
					self::PrintPDF($invoice['invoice_id'], false, true);
					$filetoadd = PUBLIC_PATH . "/documents/invoices/" . $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf";
					$zip->addFile($filetoadd, $invoice['invoice_date'] . " - " . $invoice['number'] . ".pdf");
				}
				$zip->close();	
			}
			
			die(json_encode(array('url' => "/tmp/" . $filename)));
					
		}catch(Exception $e){
			return false;
		}
	}
	
	/**
	 * export the content in a pdf file
	 * @param array $items
	 */
	public function bulk_pdf_export($items) {
		$isp = Isp::getActiveISP();
		$pdf = new Shineisp_Commons_PdfList();
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		// Get the records from the order table
		$orders = self::get_invoices($items, "invoice_id, number as num, order_id as orderid, DATE_FORMAT(invoice_date, '%d/%m/%Y') as invoicedate, 
		c.company as company, CONCAT(c.firstname, ' ', c.lastname) as fullname, o.total as total, o.vat as vat, o.grandtotal as grandtotal,", 'number, invoice_date');

		// Create the PDF header
		$grid['headers']['title'] = $translator->translate('Invoices List');
		$grid['headers']['subtitle'] = $translator->translate('List of the the invoices');
		$grid['footer']['text'] = $isp['company'] . " - " . $isp['website'];
		 
		if(!empty($orders[0]))

			$total = 0;
			$vat = 0;
			$grandtotal = 0;
			
			// Create the columns of the grid
			$grid ['columns'] [] = array ("value" => $translator->translate('Invoice'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Order'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Date'), 'size' => 100);
			$grid ['columns'] [] = array ("value" => $translator->translate('Company'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Fullname'));
			$grid ['columns'] [] = array ("value" => $translator->translate('Total'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('VAT'), 'size' => 50);
			$grid ['columns'] [] = array ("value" => $translator->translate('Grand Total'), 'size' => 50);
			
			// Getting the records values and delete the first column the customer_id field.
			foreach ($orders as $item){
				$values = array_values($item);
				array_shift($values);
				$grid ['records'] [] = $values;
				
				$total += is_numeric($values[5]) ? $values[5] : 0; 
				$vat += is_numeric($values[6]) ? $values[6] : 0; 
				$grandtotal += is_numeric($values[7]) ? $values[7] : 0; 
			}
				
			$grid ['records'] [] = array('','','','', $translator->translate('Totals'), $total, $vat, $grandtotal);
			
			// Create the PDF
			die($pdf->create($grid));
		
		return false;	
	}			
	
	/**
	 * export the content in a csv file
	 * @param array $items
	 */
	public function bulk_csv_export($items) {
		$translator = Zend_Registry::getInstance ()->Zend_Translate;
		
		// Get the records from the order table
		$orders = self::get_invoices($items, "invoice_id, number as number, order_id as order, DATE_FORMAT(invoice_date, '%d/%m/%Y') as date, 
		c.company as company, CONCAT(c.firstname, ' ', c.lastname) as fullname, o.total as total, o.vat as VAT, o.grandtotal as grandtotal,", 'number, invoice_date');

		if(!empty($orders[0])){

			$tmpname = Shineisp_Commons_Utilities::GenerateRandomString();
			@mkdir ( PUBLIC_PATH . "/tmp/");

			// Create the file and open it
			$fp = fopen(PUBLIC_PATH . "/tmp/" . $tmpname . '.csv', 'w+');

			// Add the headers
			$headers = array_keys($orders[0]);
			if(!empty($headers)){
				array_shift($headers);
				foreach ($headers as $item) {
					$newHeaders[] = $translator->translate(ucfirst($item));
				}
				fputcsv($fp, $newHeaders);
			}
			
			// For each record in the recordset
			foreach ($orders as $item){
				array_shift($item);
				fputcsv($fp, $item);
			}

			// Close the file
			fclose($fp);
			
			// Return the link
			die(json_encode(array('url' => "/tmp/" . $tmpname . ".csv")));
		}
		return false;	
	}			
}