<?php

/**
 * ProductsAttributesIndexes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProductsAttributesIndexes extends BaseProductsAttributesIndexes
{
	
	/*
	 * getAttributebyProductID
	 * Get all the attributes of a product
	 */
	public static function getAttributebyProductID($productid, $language_id = 1) {
		$records = Doctrine_Query::create ()
							->select('pai.index_id, pa.attribute_id as attribute_id, pa.code as code, pa.is_visible_on_front as is_visible_on_front, pa.is_comparable as is_comparable, pa.on_product_listing as on_product_listing, pai.value as value, pad.label as label, pad.prefix as prefix, pad.suffix as suffix, pad.description as description')
							->from ( 'ProductsAttributesIndexes pai' )
							->leftJoin('pai.ProductsAttributes pa')
							->leftJoin('pa.ProductsAttributesData pad WITH pad.language_id = ' . $language_id)
							->where('pai.product_id = ?', $productid)
							->orderBy('pa.position')
							->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
		
		for ($i=0;$i<count($records);$i++){
			if(empty($records[$i]['label'])){
				$records[$i]['label'] = $records[$i]['code'];
			}
		}

		return $records;
	}	
	
	/*
	 * Delete all items by the product id
	 */
	public static function deleteAll($product_id) {
		return Doctrine::getTable ( 'ProductsAttributesIndexes' )->findbyProductId ( $product_id )->delete();
	}
	
	/*
	 * Save all items by the product id
	 */
	public static function saveAll($data, $product_id) {
		
		if(empty($data['group_id'])){
			return false;
		}
		
		$i = 0;
		$attrs = new Doctrine_Collection('ProductsAttributesIndexes');
		self::deleteAll($product_id);
		
		// Get all the product attributes  
		$attributes = ProductsAttributesGroups::getAttributesProfiles($data['group_id']);

		// Loop of the posted variables
		foreach ($data as $var => $value) {
				
			// Loop of all the attributes
			foreach ($attributes as $attribute) {
				if($attribute['ProductsAttributes']['code'] == $var){
					$attrs[$i]->product_id = $product_id;	
					$attrs[$i]->attribute_id = $attribute['attribute_id'];	
					$attrs[$i]->value = $value;
					$i++;	
				}
			}
		}
		
		$attrs->save();
	}
	
	/**
	 * Add a new attribute value
	 * 
	 * @param integer $product_id
	 * @param integer $attribute_id
	 * @param string $value
	 */
	public static function addNew($product_id, $attribute_id, $value){
		$attrs = new ProductsAttributesIndexes();
		$attrs['product_id'] = $product_id;	
		$attrs['attribute_id'] = $value;	
		$attrs['value'] = $value;
		$attrs->save();
		
		return $attrs;
	}
	
	
}