<?php

/**
 * Dns_Zones
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Dns_Zones extends BaseDns_Zones {
    /**
     * find
     * Get a record by ID
     * @param $id
     * @return Doctrine Record
     */
    public static function findAllbyDomain($domain_id, $fields = "*", $retarray = false) {
        $dq = Doctrine_Query::create ()->select ( $fields )->from ( 'Dns_Zones d' )
        ->leftJoin ( 'd.Dns_Zones_Types zt ON zt.type_id = d.type_id' )
        ->addWhere ( "domain_id = ?", $domain_id );
        $retarray = ! empty ( $retarray ) ? Doctrine_Core::HYDRATE_ARRAY : null;
        $customer = $dq->execute ( array (), $retarray );
        return $customer;
    }
    
    /**
     * getZones
     * Get all the zones of a domain
     * @param $domain_id
     * @return Array
     */
    public static function getZones($domain_id, $hideNS=false) {
        $dq = Doctrine_Query::create ()->select('d.*, zt.zone as fieldtype')
        					->from ( 'Dns_Zones d' )
        					->leftJoin ( 'd.Dns_Zones_Types zt' )
        					->where ( "domain_id = ?", $domain_id );
        
        // TODO: Delete this criteria in order to show the NS records
        if($hideNS){
        	$dq->andWhere ( "zt.zone != ?", "NS");
        }
        					
        $records = $dq->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        					
        return $records;
    }
    
    /**
     * getCustomNameServers
     * Get all the custom nameservers of a domain
     * @param $domain_id
     * @return Array
     */
    public static function getCustomNameServers($domain_id) {
        $records = Doctrine_Query::create ()->select('d.*, zt.zone as fieldtype')
        					->from ( 'Dns_Zones d' )
        					->leftJoin ( 'd.Dns_Zones_Types zt' )
        					->where ( "domain_id = ?", $domain_id )
        					->andWhere('zt.type_id = ?', 4)
        					->execute ( array (), Doctrine_Core::HYDRATE_ARRAY );
        					
        return $records;
    }
    
    /**
     * Saving dns zones
     * 
     * 
     * @params integer $id 
     * @params array $zones 
     * @return ARRAY Record
     */
    public static function saveZone($domainId, $zones) {
        
        Doctrine::getTable ( 'Dns_Zones' )->findBy ( 'domain_id', $domainId )->delete ();
        
        if (count ( $zones ) > 0) {
            $myzone = new Doctrine_Collection('Dns_Zones');
            $i = 0;
            foreach ( $zones as $zone ) {
                $dnszonetype = Dns_Zones_Types::getType($zone['fieldtype']);
                $myzone [$i]->domain_id = $domainId;
                $myzone [$i]->subdomain = $zone['subdomain'];
                $myzone [$i]->type_id = $dnszonetype;
                $myzone [$i]->target = $zone['target'];
                $myzone [$i]->updating_date = date('Y-m-d H:i:s');
                $i++;
            }
            $myzone->save ();
            return true;
        }
        
        return false;
    }
    
    /**
     * Add a dns zone
     * 
     * @params $id 
     * @params $subdomain 
     * @params $target 
     * @params $typeId 
     * 
     * @return ARRAY Record
     */
    public static function addDnsZone($domainId, $subdomain, $target, $typeId) {
        $myzone = new Dns_Zones();
              
        $myzone->domain_id = $domainId;
        $myzone->subdomain = $subdomain;
        $myzone->type_id = $typeId;
        $myzone->target = $target;
        $myzone->updating_date = date('Y-m-d H:i:s');
        return $myzone->trySave ();
    }
    
    /**
     * deleteZone
     * Delete dns zones
     * @params $id 
     * @return ARRAY Record
     */
    public static function deleteZone($id) {
    	
    	if(is_numeric($id)){
    		Doctrine_Query::create ()->delete('DNS_Zones dns')->where('dns.zone_id = ?', $id)->execute();
    		return true;
    	}
    		
    	return false;
    }
    
    /**
     * getDomain
     * get the domain attached to the dns zone
     * @params $id 
     * @return ARRAY Record
     */
    public static function getDomain($id) {
        return Doctrine_Query::create ()->from ( 'Dns_Zones dns' )->leftJoin ( 'dns.Domains d ON dns.domain_id = d.domain_id' )->where ( 'zone_id = ?', $id )->execute ( null, Doctrine_Core::HYDRATE_ARRAY );
    }
}