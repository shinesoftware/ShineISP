<?php

/**
 * Addresses
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ShineISP
 * 
 * @author     Shine Software <info@shineisp.com>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Addresses extends BaseAddresses {
	
	/**
	 * Get a record by ID
	 * @param $id
	 * @return Doctrine Record
	 */
	public static function find($id) {
		return Doctrine::getTable ( 'addresses' )->find ( $id );
	}
	
	/**
	 * findOneByUserId
	 * Get a record by customer ID
	 * @param $customerid
	 * @return Doctrine Record
	 */
	public static function findOneByUserId($customerid) {
		return Doctrine::getTable ( 'addresses' )->findOneBy ( 'customer_id', $customerid );
	}
	
	/**
	 * Get all the record by customer ID
	 * @param $customerid
	 * @return Doctrine Record
	 */
	public static function find_by_customerid($customerid) {
		return Doctrine::getTable ( 'Addresses' )->findBy ( 'customer_id', $customerid, Doctrine::HYDRATE_ARRAY );
	}
	
	/**
	 * Delete the address selected by id
	 * @param $id
	 * @return Boolean 
	 */
	public static function delete_address($id) {
		return Doctrine::getTable ( 'Addresses' )->find ($id)->delete();
	}
	
	/**
	 * DeleteAllAddressesByUserId
	 * Delete all the addresses record of the customer ID selected
	 * @param $customerid
	 * @return Doctrine Record
	 */
	public static function DeleteAllAddressesByCustomerId($customerid) {
		return Doctrine::getTable ( 'addresses' )->findBy ( 'customer_id', $customerid )->delete ();
	}
	
	/**
	 * getAll
	 * get all the addresses
	 * @return ArrayObject
	 */
	public static function getAll() {
		$dq = Doctrine_Query::create ()->from ( 'Addresses a' );
		return $dq->execute (array (), Doctrine::HYDRATE_ARRAY);
	}
	
	/**
	 * get customer information attached to the address
	 * 
	 * @param integer $addressid
	 * @return ArrayObject
	 */
	public static function getCustomer($addressid) {
		if(is_numeric($addressid)){
			$dq = Doctrine_Query::create ()->from ( 'Addresses a' )->leftJoin('a.Customers c')->where('a.address_id = ?', $addressid)->limit(1);
			$record = $dq->execute (array (), Doctrine::HYDRATE_ARRAY);
			return !empty($record[0]['Customers']) ? $record[0]['Customers'] : array();
		}else{
			return array();
		}
	}
	
	
	/**
	 * get latitude and longitude of all customers
	 * Get if the customer is a reseller
	 * @return Array
	 */
	public static function getMapCoords() {
		return Doctrine_Query::create ()->select('c.firstname as firstname, c.lastname as lastname, c.company as company, a.address_id, a.latitude, a.longitude')
										->from ( 'Addresses a' )
										->leftJoin('a.Customers c')
										->execute (array (), Doctrine::HYDRATE_ARRAY);
			
	}
	
	/**
	 * Add a new address
	 * @param $id
	 * @param array $data
	 * @return integer address_id
	 */
	public static function AddNew(array $data, $id="") {
		
		if(is_numeric($id)){
			$address = self::find($id);
		}else{
			$address = new Addresses();	
		}
		
		$address['address']   = $data['address'];
		$address['city']      = $data['city'];
		$address['code']      = $data['code'];
		$address['area']      = $data['area'];
        $region_id            = intval( $data['region_id']);
        if( $region_id != 0 ) {
            $address['region_id']   = $region_id;
        }

		// Get the latitude and longitude coordinates
    	$coords = Shineisp_Commons_Utilities::getCoordinates($data['city']);
		
		$address['latitude']      = $coords['results'][0]['geometry']['location']['lat'];
		$address['longitude']     = $coords['results'][0]['geometry']['location']['lng'];
		$address['country_id']    = $data['country_id'];
		$address['customer_id']   = $data['customer_id'];
		
		$address->save();
		return $address['address_id'];
	}

}